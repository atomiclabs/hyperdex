{"version":3,"file":"publisher.js","sourceRoot":"","sources":["../src/publisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, log } from \"builder-util\"\nimport { CancellationToken, ProgressCallbackTransform } from \"builder-util-runtime\"\nimport { PADDING } from \"builder-util/out/log\"\nimport chalk from \"chalk\"\nimport { createReadStream, stat, Stats } from \"fs-extra-p\"\nimport { ClientRequest } from \"http\"\nimport { basename } from \"path\"\nimport { MultiProgress } from \"./multiProgress\"\nimport { ProgressBar } from \"./progress\"\n\nexport type PublishPolicy = \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\"\n\nexport { ProgressCallback } from \"./progress\"\n\nexport interface PublishOptions {\n  publish?: PublishPolicy | null\n}\n\nexport interface PublishContext {\n  readonly cancellationToken: CancellationToken\n  readonly progress: MultiProgress | null\n}\n\nconst progressBarOptions = {\n  incomplete: \" \",\n  width: 20,\n}\n\nexport interface UploadTask {\n  file: string\n  fileContent?: Buffer | null\n\n  arch: Arch | null\n  safeArtifactName?: string | null\n}\n\nexport abstract class Publisher {\n  protected constructor(protected readonly context: PublishContext) {\n  }\n\n  abstract get providerName(): string\n\n  abstract upload(task: UploadTask): Promise<any>\n\n  protected createProgressBar(fileName: string, size: number): ProgressBar | null {\n    log.info({file: fileName, provider: this.providerName}, \"uploading\")\n    if (this.context.progress == null || size < (512 * 1024)) {\n      return null\n    }\n    return this.context.progress.createBar(`${\" \".repeat(PADDING + 2)}[:bar] :percent :etas | ${chalk.green(fileName)} to ${this.providerName}`, {total: size, ...progressBarOptions})\n  }\n\n  protected createReadStreamAndProgressBar(file: string, fileStat: Stats, progressBar: ProgressBar | null, reject: (error: Error) => void): NodeJS.ReadableStream {\n    const fileInputStream = createReadStream(file)\n    fileInputStream.on(\"error\", reject)\n\n    if (progressBar == null) {\n      return fileInputStream\n    }\n    else {\n      const progressStream = new ProgressCallbackTransform(fileStat.size, this.context.cancellationToken, it => progressBar.tick(it.delta))\n      progressStream.on(\"error\", reject)\n      return fileInputStream.pipe(progressStream)\n    }\n  }\n\n  abstract toString(): string\n}\n\nexport abstract class HttpPublisher extends Publisher {\n  constructor(protected readonly context: PublishContext, private readonly useSafeArtifactName = false) {\n    super(context)\n  }\n\n  async upload(task: UploadTask): Promise<any> {\n    const fileName = (this.useSafeArtifactName ? task.safeArtifactName : null) || basename(task.file)\n\n    if (task.fileContent != null) {\n      await this.doUpload(fileName, task.arch || Arch.x64, task.fileContent.length, it => it.end(task.fileContent))\n      return\n    }\n\n    const fileStat = await stat(task.file)\n\n    const progressBar = this.createProgressBar(fileName, fileStat.size)\n    await this.doUpload(fileName, task.arch || Arch.x64, fileStat.size, (request, reject) => {\n      if (progressBar != null) {\n        // reset (because can be called several times (several attempts)\n        progressBar.update(0)\n      }\n      return this.createReadStreamAndProgressBar(task.file, fileStat, progressBar, reject).pipe(request)\n    }, task.file)\n  }\n\n  protected abstract doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, file?: string): Promise<any>\n}\n\nexport function getCiTag() {\n  const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG || process.env.BITRISE_GIT_TAG || process.env.CI_BUILD_TAG\n  return tag != null && tag.length > 0 ? tag : null\n}"]}

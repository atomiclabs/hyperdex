{"version":3,"file":"multiProgress.js","sourceRoot":"","sources":["../src/multiProgress.ts"],"names":[],"mappings":"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","sourcesContent":["import { setPrinter } from \"builder-util/out/log\"\nimport { ProgressBar } from \"./progress\"\n\nexport class MultiProgress {\n  private readonly stream = process.stdout as any\n  private cursor = 0\n\n  private totalLines = 0\n\n  private isLogListenerAdded = false\n\n  private barCount = 0\n\n  createBar(format: string, options: any): ProgressBar {\n    options.stream = this.stream\n\n    // tslint:disable:no-this-assignment\n    const manager = this\n    class MultiProgressBar extends ProgressBar {\n      private index = -1\n\n      constructor(format: string, options: any) {\n        super(format, options)\n      }\n\n      render() {\n        if (this.index === -1) {\n          this.index = manager.totalLines\n          manager.allocateLines(1)\n        }\n        else {\n          manager.moveCursor(this.index)\n        }\n\n        super.render()\n\n        if (!manager.isLogListenerAdded) {\n          manager.isLogListenerAdded = true\n          setPrinter(message => {\n            let newLineCount = 0\n            let newLineIndex = message.indexOf(\"\\n\")\n            while (newLineIndex > -1) {\n              newLineCount++\n              newLineIndex = message.indexOf(\"\\n\", ++newLineIndex)\n            }\n\n            manager.allocateLines(newLineCount + 1)\n            manager.stream.write(message)\n          })\n        }\n      }\n\n      terminate() {\n        manager.barCount--\n        if (manager.barCount === 0 && manager.totalLines > 0) {\n          manager.allocateLines(1)\n          manager.totalLines = 0\n          manager.cursor = 0\n          setPrinter(null)\n          manager.isLogListenerAdded = false\n        }\n      }\n    }\n\n    const bar = new MultiProgressBar(format, options)\n    this.barCount++\n    return bar\n  }\n\n  private allocateLines(count: number) {\n    this.stream.moveCursor(0, this.totalLines - 1)\n    // if cursor pointed to previous line where \\n is already printed, another \\n is ignored, so, we can simply print it\n    this.stream.write(\"\\n\")\n    this.totalLines += count\n    this.cursor = this.totalLines - 1\n  }\n\n  private moveCursor(index: number) {\n    this.stream.moveCursor(0, index - this.cursor)\n    this.cursor = index\n  }\n\n  terminate() {\n    this.moveCursor(this.totalLines)\n    this.stream.clearLine()\n    this.stream.cursorTo(0)\n  }\n}"]}

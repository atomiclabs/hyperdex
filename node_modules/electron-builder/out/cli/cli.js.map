{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../src/cli/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\nimport { exec, InvalidConfigurationError, log } from \"builder-util\"\nimport chalk from \"chalk\"\nimport { getElectronVersion } from \"electron-builder-lib/out/electron/electronVersion\"\nimport { getGypEnv } from \"electron-builder-lib/out/util/yarn\"\nimport { readJson } from \"fs-extra-p\"\nimport isCi from \"is-ci\"\nimport * as path from \"path\"\nimport { loadEnv } from \"read-config-file\"\nimport updateNotifier from \"update-notifier\"\nimport yargs from \"yargs\"\nimport { build, configureBuildCommand } from \"../builder\"\nimport { createSelfSignedCert } from \"./create-self-signed-cert\"\nimport { configureInstallAppDepsCommand, installAppDeps } from \"./install-app-deps\"\nimport { start } from \"./start\"\n\n// tslint:disable:no-unused-expression\nyargs\n  .command([\"build\", \"*\"], \"Build\", configureBuildCommand, wrap(build))\n  .command(\"install-app-deps\", \"Install app deps\", configureInstallAppDepsCommand, wrap(installAppDeps))\n  .command(\"node-gyp-rebuild\", \"Rebuild own native code\", configureInstallAppDepsCommand /* yes, args the same as for install app deps */, wrap(rebuildAppNativeCode))\n  .command(\"create-self-signed-cert\", \"Create self-signed code signing cert for Windows apps\",\n    yargs => yargs\n      .option(\"publisher\", {\n        alias: [\"p\"],\n        type: \"string\",\n        requiresArg: true,\n        description: \"The publisher name\",\n      })\n      .demandOption(\"publisher\"),\n    wrap(argv => createSelfSignedCert(argv.publisher)))\n  .command(\"start\", \"Run application in a development mode using electron-webpack\",\n    yargs => yargs,\n    wrap(() => start()))\n  .help()\n  .epilog(`See ${chalk.underline(\"https://electron.build\")} for more documentation.`)\n  .strict()\n  .recommendCommands()\n  .argv\n\nfunction wrap(task: (args: any) => Promise<any>) {\n  return (args: any) => {\n    checkIsOutdated()\n    loadEnv(path.join(process.cwd(), \"electron-builder.env\"))\n      .then(() => task(args))\n      .catch(error => {\n        console.error(chalk.red(error instanceof InvalidConfigurationError ? error.message : (error.stack || error).toString()))\n        process.exitCode = 1\n      })\n  }\n}\n\nfunction checkIsOutdated() {\n  if (isCi || process.env.NO_UPDATE_NOTIFIER != null) {\n    return\n  }\n\n  readJson(path.join(__dirname, \"..\", \"..\", \"package.json\"))\n    .then(it => {\n      if (it.version === \"0.0.0-semantic-release\") {\n        return\n      }\n\n      const notifier = updateNotifier({pkg: it})\n      if (notifier.update != null) {\n        notifier.notify({\n          message: `Update available ${chalk.dim(notifier.update.current)}${chalk.reset(\" â†’ \")}${chalk.green(notifier.update.latest)} \\nRun ${chalk.cyan(\"yarn upgrade electron-builder\")} to update`\n        })\n      }\n    })\n    .catch(e => log.warn({error: e}, \"cannot check updates\"))\n}\n\nasync function rebuildAppNativeCode(args: any) {\n  const projectDir = process.cwd()\n  log.info({platform: args.platform, arch: args.arch}, \"executing node-gyp rebuild\")\n  // this script must be used only for electron\n  await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n    env: getGypEnv({version: await getElectronVersion(projectDir), useCustomDist: true}, args.platform, args.arch, true),\n  })\n}"]}

{"version":3,"file":"builder.js","sourceRoot":"","sources":["../src/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { addValue, Arch, archFromString, InvalidConfigurationError, log, deepAssign } from \"builder-util\"\nimport chalk from \"chalk\"\nimport { Packager, build as _build, Configuration, DIR_TARGET, PackagerOptions, Platform } from \"electron-builder-lib\"\nimport { PublishOptions } from \"electron-publish\"\nimport BluebirdPromise from \"bluebird-lst\"\n\n/** @internal */\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\n}\n\nexport interface CliOptions extends PackagerOptions, PublishOptions {\n  arch?: string\n\n  x64?: boolean\n  ia32?: boolean\n  armv7l?: boolean\n\n  dir?: boolean\n\n  platform?: string\n}\n\n/** @internal */\nexport function normalizeOptions(args: CliOptions): BuildOptions {\n  if ((args as any).extraMetadata != null) {\n    throw new InvalidConfigurationError(\"Please specify extraMetadata under config field\")\n  }\n\n  if (args.targets != null) {\n    return args\n  }\n\n  if ((args as any).draft != null || (args as any).prerelease != null) {\n    log.warn({solution: \"set releaseType (http://electron.build/configuration/publish#GithubOptions-releaseType) in the GitHub publish options\"}, \"--draft and --prerelease is deprecated\")\n  }\n\n  let targets = new Map<Platform, Map<Arch, Array<string>>>()\n\n  function processTargets(platform: Platform, types: Array<string>) {\n    function commonArch(currentIfNotSpecified: boolean): Array<Arch> {\n      if (platform === Platform.MAC) {\n        return args.x64 || currentIfNotSpecified ? [Arch.x64] : []\n      }\n\n      const result = Array<Arch>()\n      if (args.x64) {\n        result.push(Arch.x64)\n      }\n      if (args.armv7l) {\n        result.push(Arch.armv7l)\n      }\n      if (args.ia32) {\n        result.push(Arch.ia32)\n      }\n\n      return result.length === 0 && currentIfNotSpecified ? [archFromString(process.arch)] : result\n    }\n\n    if (args.platform != null) {\n      throw new InvalidConfigurationError(`--platform cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n    if (args.arch != null) {\n      throw new InvalidConfigurationError(`--arch cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n\n    let archToType = targets.get(platform)\n    if (archToType == null) {\n      archToType = new Map<Arch, Array<string>>()\n      targets.set(platform, archToType)\n    }\n\n    if (types.length === 0) {\n      const defaultTargetValue = args.dir ? [DIR_TARGET] : []\n      for (const arch of commonArch(args.dir === true)) {\n        archToType.set(arch, defaultTargetValue)\n      }\n      return\n    }\n\n    for (const type of types) {\n      const suffixPos = type.lastIndexOf(\":\")\n      if (suffixPos > 0) {\n        addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n      }\n      else {\n        for (const arch of commonArch(true)) {\n          addValue(archToType, arch, type)\n        }\n      }\n    }\n  }\n\n  if (args.mac != null) {\n    processTargets(Platform.MAC, args.mac)\n  }\n\n  if (args.linux != null) {\n    processTargets(Platform.LINUX, args.linux)\n  }\n\n  if (args.win != null) {\n    processTargets(Platform.WINDOWS, args.win)\n  }\n\n  if (targets.size === 0) {\n    if (args.platform == null && args.arch == null) {\n      processTargets(Platform.current(), [])\n    }\n    else {\n      targets = createTargets(normalizePlatforms(args.platform), args.dir ? DIR_TARGET : null, args.arch)\n    }\n  }\n\n  const result = {...args}\n  result.targets = targets\n\n  delete result.dir\n  delete result.mac\n  delete result.linux\n  delete result.win\n  delete result.platform\n  delete result.arch\n\n  const r = result as any\n  delete r.m\n  delete r.o\n  delete r.l\n  delete r.w\n  delete r.windows\n  delete r.macos\n  delete r.$0\n  delete r._\n  delete r.version\n  delete r.help\n  delete r.c\n\n  delete result.ia32\n  delete result.x64\n  delete result.armv7l\n\n  let config = result.config\n\n  // config is array when combining dot-notation values with a config file value (#2016)\n  if (Array.isArray(config)) {\n    const newConfig: Configuration = {}\n\n    for (const configItem of config) {\n      if (typeof configItem === \"object\") {\n        deepAssign(newConfig, configItem)\n      }\n      else if (typeof configItem === \"string\") {\n        newConfig.extends = configItem\n      }\n    }\n\n    config = newConfig\n    result.config = newConfig\n  }\n\n  if (config != null && typeof config !== \"string\") {\n    if (config.extraMetadata != null) {\n      coerceTypes(config.extraMetadata)\n    }\n    if (config.mac != null) {\n      // ability to disable code sign using -c.mac.identity=null\n      coerceValue(config.mac, \"identity\")\n    }\n  }\n\n  if (\"project\" in r && !(\"projectDir\" in result)) {\n    result.projectDir = r.project\n    delete r.project\n  }\n  return result as BuildOptions\n}\n\nfunction coerceValue(host: any, key: string): void {\n  const value = host[key]\n  if (value === \"true\") {\n    host[key] = true\n  }\n  else if (value === \"false\") {\n    host[key] = false\n  }\n  else if (value === \"null\") {\n    host[key] = null\n  }\n  else if (key === \"version\" && typeof value === \"number\") {\n    host[key] = value.toString()\n  }\n  else if (value != null && typeof value === \"object\") {\n    coerceTypes(value)\n  }\n}\n\n/** @private */\nexport function coerceTypes(host: any): any {\n  for (const key of Object.getOwnPropertyNames(host)) {\n    coerceValue(host, key)\n  }\n  return host\n}\n\nexport function createTargets(platforms: Array<Platform>, type?: string | null, arch?: string | null): Map<Platform, Map<Arch, Array<string>>> {\n  const targets = new Map<Platform, Map<Arch, Array<string>>>()\n  for (const platform of platforms) {\n    const archs = platform === Platform.MAC ? [Arch.x64] : (arch === \"all\" ? [Arch.x64, Arch.ia32] : [archFromString(arch == null ? process.arch : arch)])\n    const archToType = new Map<Arch, Array<string>>()\n    targets.set(platform, archToType)\n\n    for (const arch of archs) {\n      archToType.set(arch, type == null ? [] : [type])\n    }\n  }\n  return targets\n}\n\nexport function build(rawOptions?: CliOptions): Promise<Array<string>> {\n  const buildOptions = normalizeOptions(rawOptions || {})\n  const packager = new Packager(buildOptions)\n\n  let electronDownloader: any = null\n  packager.electronDownloader = options => {\n    if (electronDownloader == null) {\n      electronDownloader = BluebirdPromise.promisify(require(\"electron-download-tf\"))\n    }\n    return electronDownloader(options)\n  }\n  return _build(buildOptions, packager)\n}\n\n/**\n * @private\n * @internal\n */\nexport function configureBuildCommand(yargs: yargs.Yargs): yargs.Yargs {\n  const publishGroup = \"Publishing:\"\n  const buildGroup = \"Building:\"\n  const deprecated = \"Deprecated:\"\n\n  return yargs\n    .option(\"mac\", {\n      group: buildGroup,\n      alias: [\"m\", \"o\", \"macos\"],\n      description: `Build for macOS, accepts target list (see ${chalk.underline(\"https://goo.gl/5uHuzj\")}).`,\n      type: \"array\",\n    })\n    .option(\"linux\", {\n      group: buildGroup,\n      alias: \"l\",\n      description: `Build for Linux, accepts target list (see ${chalk.underline(\"https://goo.gl/4vwQad\")})`,\n      type: \"array\",\n    })\n    .option(\"win\", {\n      group: buildGroup,\n      alias: [\"w\", \"windows\"],\n      description: `Build for Windows, accepts target list (see ${chalk.underline(\"https://goo.gl/jYsTEJ\")})`,\n      type: \"array\",\n    })\n    .option(\"x64\", {\n      group: buildGroup,\n      description: \"Build for x64\",\n      type: \"boolean\",\n    })\n    .option(\"ia32\", {\n      group: buildGroup,\n      description: \"Build for ia32\",\n      type: \"boolean\",\n    })\n    .option(\"armv7l\", {\n      group: buildGroup,\n      description: \"Build for armv7l\",\n      type: \"boolean\",\n    })\n    .option(\"dir\", {\n      group: buildGroup,\n      description: \"Build unpacked dir. Useful to test.\",\n      type: \"boolean\",\n    })\n    .option(\"publish\", {\n      group: publishGroup,\n      alias: \"p\",\n      description: `Publish artifacts (to GitHub Releases), see ${chalk.underline(\"https://goo.gl/tSFycD\")}`,\n      choices: [\"onTag\", \"onTagOrDraft\", \"always\", \"never\", undefined as any],\n    })\n    .option(\"draft\", {\n      group: deprecated,\n      description: \"Please set releaseType in the GitHub publish options instead\",\n      type: \"boolean\",\n      default: undefined,\n    })\n    .option(\"prerelease\", {\n      group: deprecated,\n      description: \"Please set releaseType in the GitHub publish options instead\",\n      type: \"boolean\",\n      default: undefined,\n    })\n    .option(\"platform\", {\n      group: deprecated,\n      description: \"The target platform (preferred to use --mac, --win or --linux)\",\n      choices: [\"mac\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\", undefined as any],\n    })\n    .option(\"arch\", {\n      group: deprecated,\n      description: \"The target arch (preferred to use --x64 or --ia32)\",\n      choices: [\"ia32\", \"x64\", \"all\", undefined as any],\n    })\n    .option(\"prepackaged\", {\n      alias: [\"pd\"],\n      group: buildGroup,\n      description: \"The path to prepackaged app (to pack in a distributable format)\",\n    })\n    .option(\"projectDir\", {\n      alias: [\"project\"],\n      group: buildGroup,\n      description: \"The path to project directory. Defaults to current working directory.\",\n    })\n    .option(\"config\", {\n      alias: [\"c\"],\n      group: buildGroup,\n      description: \"The path to an electron-builder config. Defaults to `electron-builder.yml` (or `json`, or `json5`), see \" + chalk.underline(\"https://goo.gl/YFRJOM\"),\n    })\n    .group([\"help\", \"version\"], \"Other:\")\n    .example(\"electron-builder -mwl\", \"build for macOS, Windows and Linux\")\n    .example(\"electron-builder --linux deb tar.xz\", \"build deb and tar.xz for Linux\")\n    .example(\"electron-builder --win --ia32\", \"build for Windows ia32\")\n    .example(\"electron-builder -c.extraMetadata.foo=bar\", \"set package.json property `foo` to `bar`\")\n    .example(\"electron-builder --config.nsis.unicode=false\", \"configure unicode options for NSIS\")\n}\n\nfunction normalizePlatforms(rawPlatforms: Array<string | Platform> | string | Platform | null | undefined): Array<Platform> {\n  const platforms = rawPlatforms == null || Array.isArray(rawPlatforms) ? (rawPlatforms as Array<string | Platform | null | undefined>) : [rawPlatforms]\n  if (platforms as any == null || platforms.length === 0) {\n    return [Platform.fromString(process.platform)]\n  }\n  else if (platforms[0] === \"all\") {\n    if (process.platform === Platform.MAC.nodeName) {\n      return [Platform.MAC, Platform.LINUX, Platform.WINDOWS]\n    }\n    else if (process.platform === Platform.LINUX.nodeName) {\n      // macOS code sign works only on macOS\n      return [Platform.LINUX, Platform.WINDOWS]\n    }\n    else {\n      return [Platform.WINDOWS]\n    }\n  }\n  else {\n    return platforms.map(it => it instanceof Platform ? it : Platform.fromString(it!))\n  }\n}"]}

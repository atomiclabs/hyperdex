{"version":3,"file":"publishOptions.js","sourceRoot":"","sources":["../src/publishOptions.ts"],"names":[],"mappings":";;;;;;;;AAwFA,AAAe,AACf,AAAM;mBAAoB,AAAsB,SAAE,cAAsB,AAAY;AAClF,AAAO,YAAG,AAAO,QAAC,AAAQ,YAAI,AAAO,aAAM,AAAO,QAAC,AAAI,QAAI,AAAW,WAAE,AAC1E;AAAC,AAkHD,AAAM;;kCAAmC,AAAmC;AAC1E,QAAM,AAAQ,WAAG,AAAa,cAAC,AAAQ;;AACvC,MAAI,AAAQ,aAAK,AAAI,MAAE;AACrB,WAAO,AAAK,MAAE,AAA2B,AAAC;AAC3C;;AACD,MAAI,AAAQ,aAAK,AAAQ,UAAE;AACzB,WAAO,AAAS,UAAE,AAA+B,AAAC;AACnD;;AACD,QAAM,IAAI,AAAK,AAAC,iCAA2B,AAAQ,QAAE,AAAC,AACxD;AAAC;;AAED,eAAe,AAAkB;AAC/B,MAAI,AAAW;;AACf,MAAI,AAAO,QAAC,AAAQ,YAAI,AAAI,MAAE;AAC5B,AAAG,AAAG,aAAG,AAAO,QAAC,AAAQ,YAAI,AAAO,QAAC,AAAM,MAAE;AAC9C,SACI;AACH,QAAI,CAAC,AAAO,QAAC,AAAM,OAAC,AAAQ,SAAC,AAAG,AAAC,MAAE;AACjC,UAAI,AAAO,QAAC,AAAM,WAAK,AAAY,cAAE;AACnC,AAAG,AAAG,yBAAW,AAAO,QAAC,AAAM,aAAO,AAAO,QAAC,AAAM,MAAmB;AACxE,aACI;AACH,AAAG,AAAG,yBAAW,AAAO,QAAC,AAAM,MAAmB;AACnD;AACF;AAEC,UAAI,AAAO,QAAC,AAAM,UAAI,AAAI,MAAE;AAC1B,cAAM,IAAI,AAAK,AAAC,sBAAgB,AAAO,QAAC,AAAM,MAA4C,AAAC;AAC5F,OAHE,CAKH,AAAwG;;;AACxG,AAAG,YAAG,AAAO,QAAC,AAAM,WAAK,AAAW,AAClC,AAAC,AAAC,0CAA4B,AAAO,QAAC,AAAM,MAAE,AAC9C,AAAC,AAAC,mBAAc,AAAO,QAAC,AAAM,wBAAkB,AAAO,QAAC,AAAM,MAAE;AACnE;AACF;;AAED,MAAI,AAAO,QAAC,AAAI,QAAI,AAAI,MAAE;AACxB,AAAG,AAAI,eAAI,AAAO,QAAC,AAAI,IAAE;AAC1B;;AACD,SAAO,AAAG,AACZ;AAAC;;AAED,mBAAmB,AAAsB;AACvC,MAAI,AAAO,QAAC,AAAI,QAAI,AAAI,MAAE;AACxB,UAAM,IAAI,AAAK,AAAC,MAAiB,AAAC;AACnC;;AACD,MAAI,AAAO,QAAC,AAAM,UAAI,AAAI,MAAE;AAC1B,UAAM,IAAI,AAAK,AAAC,MAAmB,AAAC;AACrC;;AAED,MAAI,AAAG,AAAG,iBAAW,AAAO,QAAC,AAAI,QAAI,AAAO,QAAC,AAAM,MAAyB;;AAC5E,MAAI,AAAO,QAAC,AAAI,QAAI,AAAI,MAAE;AACxB,AAAG,AAAI,eAAI,AAAO,QAAC,AAAI,IAAE;AAC1B;;AACD,SAAO,AAAG,AACZ;AAAC","sourcesContent":["export type PublishProvider = \"github\" | \"bintray\" | \"s3\" | \"spaces\" | \"generic\"\n\n// typescript-json-schema generates only PublishConfiguration if it is specified in the list, so, it is not added here\nexport type AllPublishOptions = string | GithubOptions | S3Options | SpacesOptions | GenericServerOptions | BintrayOptions\n// https://github.com/YousefED/typescript-json-schema/issues/80\nexport type Publish = AllPublishOptions | Array<AllPublishOptions> | null\n\nexport interface PublishConfiguration {\n  /**\n   * The provider.\n   */\n  readonly provider: PublishProvider\n\n  /**\n   * @private\n   */\n  readonly publisherName?: Array<string> | null\n\n  /**\n   * Whether to publish auto update info files.\n   *\n   * Auto update relies only on the first provider in the list (you can specify several publishers).\n   * Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.\n   *\n   * @default true\n   */\n  readonly publishAutoUpdate?: boolean\n}\n\n/**\n * [GitHub](https://help.github.com/articles/about-releases/) options.\n *\n * GitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\n * Define `GH_TOKEN` environment variable.\n */\nexport interface GithubOptions extends PublishConfiguration {\n  /**\n   * The provider. Must be `github`.\n   */\n  readonly provider: \"github\"\n\n  /**\n   * The repository name. [Detected automatically](#github-repository-and-bintray-package).\n   */\n  readonly repo?: string | null\n\n  /**\n   * The owner.\n   */\n  readonly owner?: string | null\n\n  /**\n   * Whether to use `v`-prefixed tag name.\n   * @default true\n   */\n  readonly vPrefixedTagName?: boolean\n\n  /**\n   * The host (including the port if need).\n   * @default github.com\n   */\n  readonly host?: string | null\n\n  /**\n   * The protocol. GitHub Publisher supports only `https`.\n   * @default https\n   */\n  readonly protocol?: \"https\" | \"http\" | null\n\n  /**\n   * The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update.md#appupdatersetfeedurloptions).\n   */\n  readonly token?: string | null\n\n  /**\n   * Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update.md#private-github-update-repo).\n   */\n  readonly private?: boolean | null\n\n  /**\n   * The type of release. By default `draft` release will be created.\n   *\n   * Also you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRELEASE`is set to `true` — `prerelease`.\n   * @default draft\n   */\n  releaseType?: \"draft\" | \"prerelease\" | \"release\" | null\n}\n\n/** @private */\nexport function githubUrl(options: GithubOptions, defaultHost: string = \"github.com\") {\n  return `${options.protocol || \"https\"}://${options.host || defaultHost}`\n}\n\n/**\n * Generic (any HTTP(S) server) options.\n * In all publish options [File Macros](/file-patterns.md#file-macros) are supported.\n */\nexport interface GenericServerOptions extends PublishConfiguration {\n  /**\n   * The provider. Must be `generic`.\n   */\n  readonly provider: \"generic\"\n\n  /**\n   * The base url. e.g. `https://bucket_name.s3.amazonaws.com`.\n   */\n  readonly url: string\n\n  /**\n   * The channel.\n   * @default latest\n   */\n  readonly channel?: string | null\n\n  /**\n   * Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.\n   */\n  readonly useMultipleRangeRequest?: boolean\n}\n\nexport interface BaseS3Options extends PublishConfiguration {\n  /**\n   * The update channel.\n   * @default latest\n   */\n  channel?: string | null\n\n  /**\n   * The directory path.\n   * @default /\n   */\n  readonly path?: string | null\n\n  /**\n   * The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n   *\n   * @default public-read\n   */\n  readonly acl?: \"private\" | \"public-read\" | null\n}\n\nexport interface S3Options extends BaseS3Options {\n  /**\n   * The provider. Must be `s3`.\n   */\n  readonly provider: \"s3\"\n\n  /**\n   * The bucket name.\n   */\n  readonly bucket: string\n\n  /**\n   * The region. Is determined and set automatically when publishing.\n   */\n  region?: string | null\n\n  /**\n   * The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n   *\n   * Please see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).\n   *\n   * @default public-read\n   */\n  readonly acl?: \"private\" | \"public-read\" | null\n\n  /**\n   * The type of storage to use for the object.\n   * @default STANDARD\n   */\n  readonly storageClass?: \"STANDARD\" | \"REDUCED_REDUNDANCY\" | \"STANDARD_IA\" | null\n\n  /**\n   * Server-side encryption algorithm to use for the object.\n   */\n  readonly encryption?: \"AES256\" | \"aws:kms\" | null\n\n  /**\n   * The endpoint URI to send requests to. The default endpoint is built from the configured region.\n   * The endpoint should be a string like `https://{service}.{region}.amazonaws.com`.\n   */\n  readonly endpoint?: string | null\n}\n\n/**\n * [DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\n * Access key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.\n */\nexport interface SpacesOptions extends BaseS3Options {\n  /**\n   * The provider. Must be `spaces`.\n   */\n  readonly provider: \"spaces\"\n\n  /**\n   * The space name.\n   */\n  readonly name: string\n\n  /**\n   * The region (e.g. `nyc3`).\n   */\n  readonly region: string\n}\n\nexport function getS3LikeProviderBaseUrl(configuration: PublishConfiguration) {\n  const provider = configuration.provider\n  if (provider === \"s3\") {\n    return s3Url((configuration as S3Options))\n  }\n  if (provider === \"spaces\") {\n    return spacesUrl((configuration as SpacesOptions))\n  }\n  throw new Error(`Not supported provider: ${provider}`)\n}\n\nfunction s3Url(options: S3Options) {\n  let url: string\n  if (options.endpoint != null) {\n    url = `${options.endpoint}/${options.bucket}`\n  }\n  else {\n    if (!options.bucket.includes(\".\")) {\n      if (options.region === \"cn-north-1\") {\n        url = `https://${options.bucket}.s3.${options.region}.amazonaws.com.cn`\n      }\n      else {\n        url = `https://${options.bucket}.s3.amazonaws.com`\n      }\n    }\n    else {\n      if (options.region == null) {\n        throw new Error(`Bucket name \"${options.bucket}\" includes a dot, but S3 region is missing`)\n      }\n\n      // special case, see http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro\n      url = options.region === \"us-east-1\"\n        ? `https://s3.amazonaws.com/${options.bucket}`\n        : `https://s3-${options.region}.amazonaws.com/${options.bucket}`\n    }\n  }\n\n  if (options.path != null) {\n    url += `/${options.path}`\n  }\n  return url\n}\n\nfunction spacesUrl(options: SpacesOptions) {\n  if (options.name == null) {\n    throw new Error(`name is missing`)\n  }\n  if (options.region == null) {\n    throw new Error(`region is missing`)\n  }\n\n  let url = `https://${options.name}.${options.region}.digitaloceanspaces.com`\n  if (options.path != null) {\n    url += `/${options.path}`\n  }\n  return url\n}\n\n/**\n * [Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page (\"Edit Your Profile\" -> API Key).\n * Define `BT_TOKEN` environment variable.\n */\nexport interface BintrayOptions extends PublishConfiguration {\n  /**\n   * The provider. Must be `bintray`.\n   */\n  readonly provider: \"bintray\"\n\n  /**\n   * The Bintray package name.\n   */\n  readonly package?: string | null\n\n  /**\n   * The Bintray repository name.\n   * @default generic\n   */\n  readonly repo?: string | null\n\n  /**\n   * The owner.\n   */\n  readonly owner?: string | null\n\n  /**\n   * The Bintray component (Debian only).\n   */\n  readonly component?: string | null\n\n  /**\n   * The Bintray distribution (Debian only).\n   * @default stable\n   */\n  readonly distribution?: string | null\n\n  /**\n   * The Bintray user account. Used in cases where the owner is an organization.\n   */\n  readonly user?: string | null\n\n  readonly token?: string | null\n}\n"]}

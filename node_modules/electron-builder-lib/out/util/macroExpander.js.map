{"version":3,"file":"macroExpander.js","sourceRoot":"","sources":["../../src/util/macroExpander.ts"],"names":[],"mappings":";;;;;;;AAAA,AAAO,AAAE,AAAyB,AAAE,AAAM,AAAc,AAGxD,AAAM;;;;;;;;;;qBAAsB,AAAe,SAAE,AAA+B,MAAE,AAAgB,SAAE,QAAa,AAAE,IAAE,AAAsB,yBAAG,AAAI;AAC5I,MAAI,AAAI,QAAI,AAAI,MAAE;AAChB,AAAO,sBACP,AAAuD;AAD7C,AAAO,KAEd,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IACxB,AAAuD;KACtD,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IACxB,AAAuD;KACtD,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IACxB,AAAuD;KACtD,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC;AAC3B;;AAED,iBAAe,AAAO,QAAC,AAAsB,wBAAE,CAAC,AAAK,OAAE,AAAE,AAAU,AAAE;AACnE,YAAQ,AAAE,AAAE;AACV,WAAK,AAAa;AAChB,eAAO,AAAsB,AAAC,AAAC,yBAAC,AAAO,QAAC,AAAe,AAAC,AAAC,kBAAC,AAAO,QAAC,AAAW;;AAE/E,WAAK,AAAM;AACT,YAAI,AAAI,QAAI,AAAI,MAAE;AAChB,AAAwC;AACxC,iBAAO,AAAE;AACV;;AACD,eAAO,AAAI;;AAEb,WAAK,AAAU;AACb,eAAO,AAAO,QAAC,AAAQ;;AAEzB,WAAK,AAAS;AACZ,eAAO,AAAO,QAAC,AAAO,WAAI,AAAQ;;AAEpC;AACE,YAAI,AAAE,MAAI,AAAO,SAAE;AACjB,iBAAQ,AAAe,QAAC,AAAE,AAAC;AAC5B;;AAED,YAAI,AAAE,GAAC,AAAU,WAAC,AAAM,AAAC,SAAE;AACzB,gBAAM,AAAO,UAAG,AAAE,GAAC,AAAS,UAAC,AAAM,OAAC,AAAM,AAAC;AAC3C,gBAAM,AAAQ,WAAG,AAAO,QAAC,AAAG,IAAC,AAAO,AAAC;;AACrC,cAAI,AAAQ,YAAI,AAAI,MAAE;AACpB,kBAAM,KAAI,AAAyB,AAAC,oEAA0B,AAAO,iBAAU,AAAO,OAAiB,mBAAE,AAAsC,AAAC;AACjJ;;AACD,iBAAO,AAAQ;AAChB;;AAED,cAAM,AAAK,QAAG,AAAK,MAAC,AAAE,AAAC;;AACvB,YAAI,AAAK,SAAI,AAAI,MAAE;AACjB,gBAAM,KAAI,AAAyB,AAAC,oEAA0B,AAAO,mBAAY,AAAE,EAAiB,mBAAE,AAAwC,AAAC;AAChJ,eACI;AACH,iBAAO,AAAK;AACb,AACJ,AACH;;;AAAC,AAAC,AACJ,GAzCS,AAAO;AAyCf","sourcesContent":["import { InvalidConfigurationError } from \"builder-util\"\nimport { AppInfo } from \"../appInfo\"\n\nexport function expandMacro(pattern: string, arch: string | null | undefined, appInfo: AppInfo, extra: any = {}, isProductNameSanitized = true): string {\n  if (arch == null) {\n    pattern = pattern\n    // tslint:disable-next-line:no-invalid-template-strings\n      .replace(\"-${arch}\", \"\")\n      // tslint:disable-next-line:no-invalid-template-strings\n      .replace(\" ${arch}\", \"\")\n      // tslint:disable-next-line:no-invalid-template-strings\n      .replace(\"_${arch}\", \"\")\n      // tslint:disable-next-line:no-invalid-template-strings\n      .replace(\"/${arch}\", \"\")\n  }\n\n  return pattern.replace(/\\${([_a-zA-Z./*]+)}/g, (match, p1): string => {\n    switch (p1) {\n      case \"productName\":\n        return isProductNameSanitized ? appInfo.productFilename : appInfo.productName\n\n      case \"arch\":\n        if (arch == null) {\n          // see above, we remove macro if no arch\n          return \"\"\n        }\n        return arch\n\n      case \"platform\":\n        return process.platform\n\n      case \"channel\":\n        return appInfo.channel || \"latest\"\n\n      default:\n        if (p1 in appInfo) {\n          return (appInfo as any)[p1]\n        }\n\n        if (p1.startsWith(\"env.\")) {\n          const envName = p1.substring(\"env.\".length)\n          const envValue = process.env[envName]\n          if (envValue == null) {\n            throw new InvalidConfigurationError(`cannot expand pattern \"${pattern}\": env ${envName} is not defined`, \"ERR_ELECTRON_BUILDER_ENV_NOT_DEFINED\")\n          }\n          return envValue\n        }\n\n        const value = extra[p1]\n        if (value == null) {\n          throw new InvalidConfigurationError(`cannot expand pattern \"${pattern}\": macro ${p1} is not defined`, \"ERR_ELECTRON_BUILDER_MACRO_NOT_DEFINED\")\n        }\n        else {\n          return value\n        }\n    }\n  })\n}"]}

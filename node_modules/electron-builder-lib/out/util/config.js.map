{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/util/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { asArray, DebugLogger, InvalidConfigurationError, log, deepAssign } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { getConfig as _getConfig, loadParentConfig, orNullIfFileNotExist, ReadConfigRequest, validateConfig as _validateConfig } from \"read-config-file\"\nimport { Configuration } from \"../configuration\"\nimport { reactCra } from \"../presets/rectCra\"\n\n// https://github.com/electron-userland/electron-builder/issues/1847\nfunction mergePublish(config: Configuration, configFromOptions: Configuration) {\n  // if config from disk doesn't have publish (or object), no need to handle, it will be simply merged by deepAssign\n  const publish = Array.isArray(config.publish) ? configFromOptions.publish : null\n  if (publish != null) {\n    delete (configFromOptions as any).publish\n  }\n\n  deepAssign(config, configFromOptions)\n\n  if (publish == null) {\n    return\n  }\n\n  const listOnDisk = config.publish as Array<any>\n  if (listOnDisk.length === 0) {\n    config.publish = publish\n  }\n  else {\n    // apply to first\n    Object.assign(listOnDisk[0], publish)\n  }\n}\n\nexport async function getConfig(projectDir: string, configPath: string | null, configFromOptions: Configuration | null | undefined, packageMetadata: Lazy<{ [key: string]: any } | null> = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))): Promise<Configuration> {\n  const configRequest: ReadConfigRequest = {packageKey: \"build\", configFilename: \"electron-builder\", projectDir, packageMetadata}\n  const configAndEffectiveFile = await _getConfig<Configuration>(configRequest, configPath)\n  const config = configAndEffectiveFile == null ? {} : configAndEffectiveFile.result\n  if (configFromOptions != null) {\n    mergePublish(config, configFromOptions)\n  }\n\n  if (configAndEffectiveFile != null) {\n    log.info({file: configAndEffectiveFile.configFile == null ? 'package.json (\"build\" field)' : configAndEffectiveFile.configFile}, \"loaded configuration\")\n  }\n\n  let extendsSpec = config.extends\n  if (extendsSpec == null && extendsSpec !== null) {\n    const metadata = await packageMetadata.value || {}\n    const devDependencies = metadata.devDependencies\n    const dependencies = metadata.dependencies\n    if ((dependencies != null && \"react-scripts\" in dependencies) || (devDependencies != null && \"react-scripts\" in devDependencies)) {\n      extendsSpec = \"react-cra\"\n      config.extends = extendsSpec\n    }\n    else if (devDependencies != null && \"electron-webpack\" in devDependencies) {\n      extendsSpec = \"electron-webpack/electron-builder.yml\"\n      config.extends = extendsSpec\n    }\n  }\n\n  if (extendsSpec == null) {\n    return deepAssign(getDefaultConfig(), config)\n  }\n\n  let parentConfig: Configuration | null\n  if (extendsSpec === \"react-cra\") {\n    parentConfig = await reactCra(projectDir)\n    log.info({preset: extendsSpec}, \"loaded parent configuration\")\n  }\n  else {\n    const parentConfigAndEffectiveFile = await loadParentConfig<Configuration>(configRequest, extendsSpec)\n    log.info({file: parentConfigAndEffectiveFile.configFile}, \"loaded parent configuration\")\n    parentConfig = parentConfigAndEffectiveFile.result\n  }\n\n  // electron-webpack and electrify client config - want to exclude some files\n  // we add client files configuration to main parent file matcher\n  if (parentConfig.files != null && config.files != null && (Array.isArray(config.files) || typeof config.files === \"string\") && Array.isArray(parentConfig.files) && parentConfig.files.length > 0) {\n    const mainFileSet = parentConfig.files[0]\n    if (typeof mainFileSet === \"object\" && (mainFileSet.from == null || mainFileSet.from === \".\")) {\n      mainFileSet.filter = asArray(mainFileSet.filter)\n      mainFileSet.filter.push(...asArray(config.files as any))\n      delete (config as any).files\n    }\n  }\n\n  return deepAssign(getDefaultConfig(), parentConfig, config)\n}\n\nfunction getDefaultConfig(): Configuration {\n  return {\n    directories: {\n      output: \"dist\",\n      buildResources: \"build\",\n    },\n  }\n}\n\nconst schemeDataPromise = new Lazy(() => readJson(path.join(__dirname, \"..\", \"..\", \"scheme.json\")))\n\nexport async function validateConfig(config: Configuration, debugLogger: DebugLogger) {\n  const extraMetadata = config.extraMetadata\n  if (extraMetadata != null) {\n    if (extraMetadata.build != null) {\n      throw new InvalidConfigurationError(`--em.build is deprecated, please specify as -c\"`)\n    }\n    if (extraMetadata.directories != null) {\n      throw new InvalidConfigurationError(`--em.directories is deprecated, please specify as -c.directories\"`)\n    }\n  }\n\n  // noinspection JSDeprecatedSymbols\n  if (config.npmSkipBuildFromSource === false) {\n    config.buildDependenciesFromSource = false\n  }\n\n  await _validateConfig(config, schemeDataPromise, (message, errors) => {\n    if (debugLogger.enabled) {\n      debugLogger.add(\"invalidConfig\", JSON.stringify(errors, null, 2))\n    }\n\n    return `${message}\n\nHow to fix:\n1. Open https://electron.build/configuration/configuration\n2. Search the option name on the page.\n  * Not found? The option was deprecated or not exists (check spelling).\n  * Found? Check that the option in the appropriate place. e.g. \"title\" only in the \"dmg\", not in the root.\n`\n  })\n}\n\nconst DEFAULT_APP_DIR_NAMES = [\"app\", \"www\"]\n\nexport async function computeDefaultAppDirectory(projectDir: string, userAppDir: string | null | undefined): Promise<string> {\n  if (userAppDir != null) {\n    const absolutePath = path.resolve(projectDir, userAppDir)\n    const stat = await statOrNull(absolutePath)\n    if (stat == null) {\n      throw new InvalidConfigurationError(`Application directory ${userAppDir} doesn't exists`)\n    }\n    else if (!stat.isDirectory()) {\n      throw new InvalidConfigurationError(`Application directory ${userAppDir} is not a directory`)\n    }\n    else if (projectDir === absolutePath) {\n      log.warn({appDirectory: userAppDir}, `Specified application directory equals to project dir — superfluous or wrong configuration`)\n    }\n    return absolutePath\n  }\n\n  for (const dir of DEFAULT_APP_DIR_NAMES) {\n    const absolutePath = path.join(projectDir, dir)\n    const packageJson = path.join(absolutePath, \"package.json\")\n    const stat = await statOrNull(packageJson)\n    if (stat != null && stat.isFile()) {\n      return absolutePath\n    }\n  }\n  return projectDir\n}"]}

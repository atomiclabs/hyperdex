{"version":3,"file":"JsonStreamParser.js","sourceRoot":"","sources":["../../src/util/JsonStreamParser.ts"],"names":[],"mappings":";;;;;;AAAA,IAAK,AAEJ;;AAFD,WAAK,AAAS;AACZ,uCAAM;AAAE,qCAAI,AACd;AAAC,GAFI,AAAS,cAAT,AAAS,YAEb,AAED,AAAM;;;AAKJ,cAA6B,AAAiC;AAAjC,SAAY,eAAZ,AAAY,AAAqB;AAJtD,SAAK,QAAG,AAAS,UAAC,AAAM;AACxB,SAAM,SAAG,AAAE;AACX,SAAsB,yBAAG,AAAC,AAGlC;AAAC,IAED,AAA4E;;;AAC5E,AAAa,gBAAC,AAAa;AACzB,QAAI,AAAM,SAAG,AAAC;;AACd,WAAO,AAAM,SAAG,AAAK,MAAC,AAAM,QAAE;AAC5B,UAAI,AAAI,KAAC,AAAK,UAAK,AAAS,UAAC,AAAM,QAAE;AACnC,YAAI,AAAK,MAAC,AAAM,WAAK,AAAC,KAAI,AAAK,MAAC,AAAC,AAAC,OAAK,AAAG,KAAE;AAC1C,AAAO;AACP,AAAM;AACP;;AAED,aAAK,IAAI,AAAC,IAAG,AAAM,QAAE,AAAC,IAAG,AAAK,MAAC,AAAM,QAAE,AAAC,AAAE,KAAE;AAC1C,cAAI,AAAK,MAAC,AAAC,AAAC,OAAK,AAAG,KAAE;AACpB,AAAI,iBAAC,AAAM,UAAI,AAAK,MAAC,AAAS,UAAC,AAAC,GAAE,AAAC,AAAC;AACpC,AAAI,iBAAC,AAAsB,yBAAG,AAAQ,SAAC,AAAI,KAAC,AAAM,OAAC,AAAI,AAAE,QAAE,AAAE,AAAC;AAC9D,AAAI,iBAAC,AAAM,SAAG,AAAE;AAChB,AAAM,qBAAG,AAAC;AACV,AAAI,iBAAC,AAAK,QAAG,AAAS,UAAC,AAAI;AAC3B,AAAK;AACN;AACF;AACF;;AAED,YAAM,AAAG,MAAG,AAAM,SAAG,AAAI,KAAC,AAAsB;AAChD,AAAI,WAAC,AAAM,UAAI,AAAK,MAAC,AAAS,UAAC,AAAM,QAAE,AAAI,KAAC,AAAG,IAAC,AAAK,MAAC,AAAM,QAAE,AAAG,AAAC,AAAC;AACnE,AAAI,WAAC,AAAsB,0BAAI,AAAK,MAAC,AAAM,SAAG,AAAM;;AACpD,UAAI,AAAI,KAAC,AAAsB,yBAAG,AAAC,GAAE;AACnC,AAAM;AACP;;AAED,AAAM,eAAG,AAAG;AACZ,AAAI,WAAC,AAAsB,yBAAG,AAAC;AAC/B,AAAI,WAAC,AAAK,QAAG,AAAS,UAAC,AAAM;AAC7B,YAAM,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAM,AAAC;AACpC,AAAI,WAAC,AAAM,SAAG,AAAE;AAEhB,AAAI,WAAC,AAAY,aAAC,AAAI,AAAC;AACxB,AACH;AAAC,AACF","sourcesContent":["enum ReadState {\n  HEADER, BODY\n}\n\nexport class JsonStreamParser {\n  private state = ReadState.HEADER\n  private buffer = \"\"\n  private remainingMessageLength = 0\n\n  constructor(private readonly eventHandler: (data: any) => void) {\n  }\n\n  // https://github.com/EventSource/eventsource/blob/master/lib/eventsource.js\n  parseIncoming(chunk: string) {\n    let offset = 0\n    while (offset < chunk.length) {\n      if (this.state === ReadState.HEADER) {\n        if (chunk.length === 1 && chunk[0] === \" \") {\n          // ping\n          return\n        }\n\n        for (let i = offset; i < chunk.length; i++) {\n          if (chunk[i] === \"{\") {\n            this.buffer += chunk.substring(0, i)\n            this.remainingMessageLength = parseInt(this.buffer.trim(), 10)\n            this.buffer = \"\"\n            offset = i\n            this.state = ReadState.BODY\n            break\n          }\n        }\n      }\n\n      const end = offset + this.remainingMessageLength\n      this.buffer += chunk.substring(offset, Math.min(chunk.length, end))\n      this.remainingMessageLength -= chunk.length - offset\n      if (this.remainingMessageLength > 0) {\n        return\n      }\n\n      offset = end\n      this.remainingMessageLength = 0\n      this.state = ReadState.HEADER\n      const data = JSON.parse(this.buffer)\n      this.buffer = \"\"\n\n      this.eventHandler(data)\n    }\n  }\n}"]}

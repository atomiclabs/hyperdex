{"version":3,"file":"AppFileCopierHelper.js","sourceRoot":"","sources":["../../src/util/AppFileCopierHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { log } from \"builder-util\"\nimport { CONCURRENCY, FileTransformer, statOrNull, walk } from \"builder-util/out/fs\"\nimport { ensureDir, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { createElectronCompilerHost, NODE_MODULES_PATTERN } from \"../fileTransformer\"\nimport { Packager } from \"../packager\"\nimport { AppFileWalker } from \"./AppFileWalker\"\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\nimport { Dependency } from \"./packageDependencies\"\n\n// os path separator is used\nexport interface ResolvedFileSet {\n  src: string\n  destination: string\n\n  files: Array<string>\n  metadata: Map<string, Stats>\n  transformedFiles?: Map<number, string | Buffer> | null\n}\n\nexport async function computeFileSets(matchers: Array<FileMatcher>, transformer: FileTransformer | null, packager: Packager, isElectronCompile: boolean): Promise<Array<ResolvedFileSet>> {\n  const fileSets: Array<ResolvedFileSet> = []\n  let hoistedNodeModuleFileSets: Array<ResolvedFileSet> | null = null\n  let isHoistedNodeModuleChecked = false\n  for (const matcher of matchers) {\n    const fileWalker = new AppFileWalker(matcher, packager)\n\n    const fromStat = await statOrNull(matcher.from)\n    if (fromStat == null) {\n      log.debug({directory: matcher.from, reason: \"doesn't exist\"}, `skipped copying`)\n      continue\n    }\n\n    const files = await walk(matcher.from, fileWalker.filter, fileWalker)\n    const metadata = fileWalker.metadata\n\n    // https://github.com/electron-userland/electron-builder/issues/2205 Support for hoisted node_modules (lerna + yarn workspaces)\n    // if no node_modules in the app dir, it means that probably dependencies are hoisted\n    // check that main node_modules doesn't exist in addition to isNodeModulesHandled because isNodeModulesHandled will be false if node_modules dir is ignored by filter\n    // here isNodeModulesHandled is required only because of performance reasons (avoid stat call)\n    if (!isHoistedNodeModuleChecked && matcher.from === packager.appDir && !fileWalker.isNodeModulesHandled) {\n      isHoistedNodeModuleChecked = true\n      if ((await statOrNull(path.join(packager.appDir, \"node_modules\"))) == null) {\n        // in the prepacked mode no package.json\n        const packageJsonStat = await statOrNull(path.join(packager.appDir, \"package.json\"))\n        if (packageJsonStat != null && packageJsonStat.isFile()) {\n          hoistedNodeModuleFileSets = await copyHoistedNodeModules(packager, matcher)\n        }\n      }\n    }\n\n    const transformedFiles = new Map<number, string | Buffer>()\n    if (transformer != null) {\n      await BluebirdPromise.filter(files, (it, index) => {\n        const fileStat = metadata.get(it)\n        if (fileStat == null || !fileStat.isFile()) {\n          return false\n        }\n\n        const transformedValue = transformer(it)\n        if (transformedValue == null) {\n          return false\n        }\n\n        if (typeof transformedValue === \"object\" && \"then\" in transformedValue) {\n          return (transformedValue as Promise<any>)\n            .then(it => {\n              if (it != null) {\n                transformedFiles.set(index, it)\n              }\n              return false\n            })\n        }\n        transformedFiles.set(index, transformedValue as string | Buffer)\n        return false\n      }, CONCURRENCY)\n    }\n    fileSets.push(validateFileSet({src: matcher.from, files, metadata, transformedFiles, destination: matcher.to}))\n  }\n\n  if (isElectronCompile) {\n    // cache files should be first (better IO)\n    fileSets.unshift(await compileUsingElectronCompile(fileSets[0], packager))\n  }\n  if (hoistedNodeModuleFileSets != null) {\n    return fileSets.concat(hoistedNodeModuleFileSets)\n  }\n  return fileSets\n}\n\nfunction validateFileSet(fileSet: ResolvedFileSet): ResolvedFileSet {\n  if (fileSet.src == null || fileSet.src.length === 0) {\n    throw new Error(\"fileset src is empty\")\n  }\n  return fileSet\n}\n\nasync function copyHoistedNodeModules(packager: Packager, mainMatcher: FileMatcher): Promise<Array<ResolvedFileSet>> {\n  const productionDeps = await packager.productionDeps.value\n  const rootPathToCopier = new Map<string, Array<Dependency>>()\n  for (const dep of productionDeps) {\n    const index = dep.path.indexOf(NODE_MODULES_PATTERN)\n    if (index < 0) {\n      throw new Error(\"cannot find node_modules in the path \" + dep.path)\n    }\n\n    const root = dep.path.substring(0, index)\n    let list = rootPathToCopier.get(root)\n    if (list == null) {\n      list = []\n      rootPathToCopier.set(root, list)\n    }\n    list.push(dep)\n  }\n\n  // mapSeries instead of map because copyNodeModules is concurrent and so, no need to increase queue/pressure\n  return await BluebirdPromise.mapSeries(rootPathToCopier.keys(), async source => {\n    // use main matcher patterns, so, user can exclude some files in such hoisted node modules\n    const matcher = new FileMatcher(source, mainMatcher.to, mainMatcher.macroExpander, mainMatcher.patterns)\n    const copier = new NodeModuleCopyHelper(matcher, packager)\n    const files = await copier.collectNodeModules(rootPathToCopier.get(source)!!)\n    return validateFileSet({src: matcher.from, destination: matcher.to, files, metadata: copier.metadata})\n  })\n}\n\nconst BOWER_COMPONENTS_PATTERN = `${path.sep}bower_components${path.sep}`\n/** @internal */\nexport const ELECTRON_COMPILE_SHIM_FILENAME = \"__shim.js\"\n\nasync function compileUsingElectronCompile(mainFileSet: ResolvedFileSet, packager: Packager): Promise<ResolvedFileSet> {\n  log.info(\"compiling using electron-compile\")\n\n  const electronCompileCache = await packager.tempDirManager.getTempDir({prefix: \"electron-compile-cache\"})\n  const cacheDir = path.join(electronCompileCache, \".cache\")\n  // clear and create cache dir\n  await ensureDir(cacheDir)\n  const compilerHost = await createElectronCompilerHost(mainFileSet.src, cacheDir)\n  const nextSlashIndex = mainFileSet.src.length + 1\n  // pre-compute electron-compile to cache dir - we need to process only subdirectories, not direct files of app dir\n  await BluebirdPromise.map(mainFileSet.files, file => {\n    if (file.includes(NODE_MODULES_PATTERN) || file.includes(BOWER_COMPONENTS_PATTERN)\n      || !file.includes(path.sep, nextSlashIndex) // ignore not root files\n      || !mainFileSet.metadata.get(file)!.isFile()) {\n      return null\n    }\n    return compilerHost.compile(file)\n      .then(() => null)\n  }, CONCURRENCY)\n\n  await compilerHost.saveConfiguration()\n\n  const metadata = new Map<string, Stats>()\n  const cacheFiles = await walk(cacheDir, file => !file.startsWith(\".\"), {\n    consume: (file, fileStat) => {\n      if (fileStat.isFile()) {\n        metadata.set(file, fileStat)\n      }\n      return null\n    }\n  })\n\n  // add shim\n  const shimPath = `${mainFileSet.src}${path.sep}${ELECTRON_COMPILE_SHIM_FILENAME}`\n  mainFileSet.files.push(shimPath)\n  mainFileSet.metadata.set(shimPath, {isFile: () => true, isDirectory: () => false, isSymbolicLink: () => false} as any)\n  if (mainFileSet.transformedFiles == null) {\n    mainFileSet.transformedFiles = new Map()\n  }\n  mainFileSet.transformedFiles.set(mainFileSet.files.length - 1, `\n'use strict';\nrequire('electron-compile').init(__dirname, require('path').resolve(__dirname, '${packager.metadata.main || \"index\"}'), true);\n`)\n  return {src: electronCompileCache, files: cacheFiles, metadata, destination: mainFileSet.destination}\n}\n\n// sometimes, destination may not contain path separator in the end (path to folder), but the src does. So let's ensure paths have path separators in the end\nexport function ensureEndSlash(s: string) {\n  return s === \"\" || s.endsWith(path.sep) ? s : (s + path.sep)\n}\n"]}

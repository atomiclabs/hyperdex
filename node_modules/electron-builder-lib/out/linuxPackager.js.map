{"version":3,"file":"linuxPackager.js","sourceRoot":"","sources":["../src/linuxPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, AsyncTaskManager, log } from \"builder-util\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { DIR_TARGET, Platform, Target, TargetSpecificOptions } from \"./core\"\nimport { LinuxConfiguration } from \"./options/linuxOptions\"\nimport { Packager } from \"./packager\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { RemoteBuilder } from \"./remoteBuilder/RemoteBuilder\"\nimport AppImageTarget from \"./targets/AppImageTarget\"\nimport FpmTarget from \"./targets/fpm\"\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\nimport SnapTarget from \"./targets/snap\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\n\nexport class LinuxPackager extends PlatformPackager<LinuxConfiguration> {\n  readonly executableName: string\n\n  constructor(info: Packager) {\n    super(info, Platform.LINUX)\n\n    const executableName = this.platformSpecificBuildOptions.executableName\n    this.executableName = executableName == null ? this.appInfo.sanitizedName.toLowerCase() : sanitizeFileName(executableName)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"snap\", \"appimage\"]\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    let helper: LinuxTargetHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new LinuxTargetHelper(this)\n      }\n      return helper\n    }\n\n    let remoteBuilder: RemoteBuilder | null = null\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      const targetClass: typeof AppImageTarget | typeof SnapTarget | typeof FpmTarget | null = (() => {\n        switch (name) {\n          case \"appimage\":\n            return require(\"./targets/AppImageTarget\").default\n          case \"snap\":\n            return require(\"./targets/snap\").default\n          case \"deb\":\n          case \"rpm\":\n          case \"sh\":\n          case \"freebsd\":\n          case \"pacman\":\n          case \"apk\":\n          case \"p5p\":\n            return require(\"./targets/fpm\").default\n          default:\n            return null\n        }\n      })()\n\n      mapper(name, outDir => {\n        if (targetClass === null) {\n          return createCommonTarget(name, outDir, this)\n        }\n\n        const target = new targetClass(name, this, getHelper(), outDir)\n        if (process.platform === \"win32\" || process.env._REMOTE_BUILD) {\n          if (remoteBuilder == null) {\n            remoteBuilder = new RemoteBuilder(this)\n          }\n          // return remoteBuilder.buildTarget(this, arch, appOutDir, this.packager)\n          return new RemoteTarget(target, remoteBuilder)\n        }\n        return target\n      })\n    }\n  }\n}\n\nclass RemoteTarget extends Target {\n  private buildTaskManager = new AsyncTaskManager(this.remoteBuilder.packager.info.cancellationToken)\n\n  get options(): TargetSpecificOptions | null | undefined {\n    return this.target.options\n  }\n\n  get outDir(): string {\n    return this.target.outDir\n  }\n\n  constructor(private readonly target: Target, private readonly remoteBuilder: RemoteBuilder) {\n    super(target.name, true /* all must be scheduled in time (so, on finishBuild RemoteBuilder will have all targets added - so, we must set isAsyncSupported to true (resolved promise is returned)) */)\n  }\n\n  async finishBuild() {\n    await this.buildTaskManager.awaitTasks()\n    await this.remoteBuilder.build()\n  }\n\n  build(appOutDir: string, arch: Arch) {\n    const promise = this.doBuild(appOutDir, arch)\n    this.buildTaskManager.addTask(promise)\n    return promise\n  }\n\n  private async doBuild(appOutDir: string, arch: Arch) {\n    log.info({target: this.target.name, arch: Arch[arch]}, \"scheduling remote build\")\n    await this.target.checkOptions()\n    this.remoteBuilder.scheduleBuild(this.target, arch, appOutDir)\n  }\n}\n\nexport function toAppImageOrSnapArch(arch: Arch): string {\n  switch (arch) {\n    case Arch.x64:\n      return \"x86_64\"\n    case Arch.ia32:\n      return \"i386\"\n    case Arch.armv7l:\n      return \"arm\"\n    case Arch.arm64:\n      return \"arm_aarch64\"\n\n    default:\n      throw new Error(`Unsupported arch ${arch}`)\n  }\n}"]}

{"version":3,"file":"ElectronFramework.js","sourceRoot":"","sources":["../../src/electron/ElectronFramework.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { debug7zArgs, exec, isEnvTrue, log, spawn, asArray } from \"builder-util\"\nimport { copyDir, DO_NOT_USE_HARD_LINKS, statOrNull, CONCURRENCY, unlinkIfExists } from \"builder-util/out/fs\"\nimport { chmod, emptyDir, readdir, remove, rename } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { executeAppBuilder } from \"builder-util/out/util\"\nimport * as semver from \"semver\"\nimport { AsarIntegrity } from \"../asar/integrity\"\nimport { Configuration, ElectronDownloadOptions } from \"../configuration\"\nimport { Platform } from \"../core\"\nimport { Framework, PrepareApplicationStageDirectoryOptions } from \"../Framework\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport MacPackager from \"../macPackager\"\nimport { Packager } from \"../packager\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { createMacApp } from \"./electronMac\"\nimport { computeElectronVersion, getElectronVersionFromInstalled } from \"./electronVersion\"\n\ninterface InternalElectronDownloadOptions extends ElectronDownloadOptions {\n  version: string\n  platform: string\n  arch: string\n}\n\nfunction createDownloadOpts(opts: Configuration, platform: string, arch: string, electronVersion: string): InternalElectronDownloadOptions {\n  return {\n    platform,\n    arch,\n    version: electronVersion,\n    ...opts.electronDownload,\n  }\n}\n\nasync function beforeCopyExtraFiles(packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null, isClearExecStack: boolean) {\n  if (packager.platform === Platform.LINUX) {\n    const linuxPackager = (packager as LinuxPackager)\n    const executable = path.join(appOutDir, linuxPackager.executableName)\n    await rename(path.join(appOutDir, packager.electronDistExecutableName), executable)\n\n    if (isClearExecStack) {\n      try {\n        await executeAppBuilder([\"clear-exec-stack\", \"--input\", executable])\n      }\n      catch (e) {\n        log.debug({error: e}, \"cannot clear exec stack\")\n      }\n    }\n  }\n  else if (packager.platform === Platform.WINDOWS) {\n    const executable = path.join(appOutDir, `${packager.appInfo.productFilename}.exe`)\n    await rename(path.join(appOutDir, `${packager.electronDistExecutableName}.exe`), executable)\n  }\n  else {\n    await createMacApp(packager as MacPackager, appOutDir, asarIntegrity)\n\n    const wantedLanguages = asArray(packager.platformSpecificBuildOptions.electronLanguages)\n    if (wantedLanguages.length === 0) {\n      return\n    }\n\n    // noinspection SpellCheckingInspection\n    const langFileExt = \".lproj\"\n    const resourcesDir = packager.getResourcesDir(appOutDir)\n    await BluebirdPromise.map(readdir(resourcesDir), file => {\n      if (!file.endsWith(langFileExt)) {\n        return\n      }\n\n      const language = file.substring(0, file.length - langFileExt.length)\n      if (!wantedLanguages.includes(language)) {\n        return remove(path.join(resourcesDir, file))\n      }\n      return\n    }, CONCURRENCY)\n  }\n}\n\nexport async function createElectronFrameworkSupport(configuration: Configuration, packager: Packager): Promise<Framework> {\n  if (configuration.muonVersion != null) {\n    const distMacOsAppName = \"Brave.app\"\n    return {\n      name: \"muon\",\n      isDefaultAppIconProvided: true,\n      version: configuration.muonVersion!!,\n      distMacOsAppName,\n      prepareApplicationStageDirectory: options => {\n        return unpack(options, {\n          mirror: \"https://github.com/brave/muon/releases/download/v\",\n          customFilename: `brave-v${options.version}-${options.platformName}-${options.arch}.zip`,\n          verifyChecksum: false,\n          ...createDownloadOpts(options.packager.config, options.platformName, options.arch, options.version),\n        }, distMacOsAppName)\n      },\n      isNpmRebuildRequired: true,\n      beforeCopyExtraFiles: (packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null) => {\n        return beforeCopyExtraFiles(packager, appOutDir, asarIntegrity, false)\n      },\n    }\n  }\n\n  let version = configuration.electronVersion\n  if (version == null) {\n    // for prepacked app asar no dev deps in the app.asar\n    if (packager.isPrepackedAppAsar) {\n      version = await getElectronVersionFromInstalled(packager.projectDir)\n      if (version == null) {\n        throw new Error(`Cannot compute electron version for prepacked asar`)\n      }\n    }\n    else {\n      version = await computeElectronVersion(packager.projectDir, new Lazy(() => Promise.resolve(packager.metadata)))\n    }\n    configuration.electronVersion = version\n  }\n\n  const distMacOsAppName = \"Electron.app\"\n  return {\n    isDefaultAppIconProvided: true,\n    name: \"electron\",\n    version,\n    distMacOsAppName,\n    isNpmRebuildRequired: true,\n    prepareApplicationStageDirectory: options => unpack(options, createDownloadOpts(options.packager.config, options.platformName, options.arch, version!!), distMacOsAppName),\n    beforeCopyExtraFiles: (packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null) => {\n      return beforeCopyExtraFiles(packager, appOutDir, asarIntegrity, semver.gte(version || \"1.8.3\", \"1.8.3\"))\n    },\n  }\n}\n\nasync function unpack(prepareOptions: PrepareApplicationStageDirectoryOptions, options: InternalElectronDownloadOptions, distMacOsAppName: string) {\n  const packager = prepareOptions.packager\n  const out = prepareOptions.appOutDir\n\n  let dist: string | null | undefined = packager.config.electronDist\n  if (dist != null) {\n    const zipFile = `electron-v${options.version}-${prepareOptions.platformName}-${options.arch}.zip`\n    const resolvedDist = path.resolve(packager.projectDir, dist)\n    if ((await statOrNull(path.join(resolvedDist, zipFile))) != null) {\n      options.cache = resolvedDist\n      dist = null\n    }\n  }\n\n  if (dist == null) {\n    const zipPath = (await Promise.all<any>([\n      packager.info.electronDownloader(options),\n      emptyDir(out)\n    ]))[0]\n\n    if (process.platform === \"darwin\" || isEnvTrue(process.env.USE_UNZIP)) {\n      // on mac unzip faster than 7za (1.1 sec vs 1.6 see)\n      await exec(\"unzip\", [\"-oqq\", \"-d\", out, zipPath])\n    }\n    else {\n      await spawn(path7za, debug7zArgs(\"x\").concat(zipPath, \"-aoa\", `-o${out}`))\n      if (prepareOptions.platformName === \"linux\") {\n        // https://github.com/electron-userland/electron-builder/issues/786\n        // fix dir permissions — opposite to extract-zip, 7za creates dir with no-access for other users, but dir must be readable for non-root users\n        await Promise.all([\n          chmod(path.join(out, \"locales\"), \"0755\"),\n          chmod(path.join(out, \"resources\"), \"0755\")\n        ])\n      }\n    }\n  }\n  else {\n    const source = packager.getElectronSrcDir(dist)\n    const destination = packager.getElectronDestinationDir(out)\n    log.info({source, destination}, \"copying Electron\")\n    await emptyDir(out)\n    await copyDir(source, destination, {\n      isUseHardLink: DO_NOT_USE_HARD_LINKS,\n    })\n  }\n\n  await cleanupAfterUnpack(prepareOptions, distMacOsAppName)\n}\n\nfunction cleanupAfterUnpack(prepareOptions: PrepareApplicationStageDirectoryOptions, distMacOsAppName: string) {\n  const out = prepareOptions.appOutDir\n  const isMac = prepareOptions.packager.platform === Platform.MAC\n  const resourcesPath = isMac ? path.join(out, distMacOsAppName, \"Contents\", \"Resources\") : path.join(out, \"resources\")\n  return Promise.all([\n    unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")),\n    unlinkIfExists(path.join(out, \"version\")),\n    isMac ? Promise.resolve() : rename(path.join(out, \"LICENSE\"), path.join(out, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}),\n  ])\n}"]}

{"version":3,"file":"WineVm.js","sourceRoot":"","sources":["../../src/vm/WineVm.ts"],"names":[],"mappings":";;;;;;;AACA,AAAO,AAAqB,AAAQ,AAAE,AAAM,AAAc;;;;;;;;;;AAC1D,AAAO,AAAE,AAAS,AAAE,AAAM,AAAM;;;;;;;;;;AAChC,AAAO,AAAK,AAAI,AAAM,AAAM,AAE5B,AAAM;;;;MAAqB,sBAAQ,AAAS;AAC1C;AACE,AAAK,AAAE,AACT;AAAC;;AAED,AAAI,OAAC,AAAY,MAAE,AAAmB,MAAE,AAAyB,SAAE,AAAe,kBAAG,AAAI;AACvF,WAAO,AAAQ,6BAAC,AAAI,MAAE,AAAI,MAAE,AAAO,AAAC,AACtC;AAAC;;AAED,AAAK,QAAC,AAAY,MAAE,AAAmB,MAAE,AAAsB,SAAE,AAAgC;AAC/F,UAAM,IAAI,AAAK,MAAC,AAAa,AAAC,AAChC;AAAC;;AAED,AAAQ,WAAC,AAAY;AACnB,WAAO,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAI,MAAE,AAAI,AAAC,AACpC;AAAC,AACF","sourcesContent":["import { SpawnOptions, ExecFileOptions } from \"child_process\"\nimport { ExtraSpawnOptions, execWine } from \"builder-util\"\nimport { VmManager } from \"./vm\"\nimport * as path from \"path\"\n\nexport class WineVmManager extends VmManager {\n  constructor() {\n    super()\n  }\n\n  exec(file: string, args: Array<string>, options?: ExecFileOptions, isLogOutIfDebug = true): Promise<string> {\n    return execWine(file, args, options)\n  }\n\n  spawn(file: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any> {\n    throw new Error(\"Unsupported\")\n  }\n\n  toVmFile(file: string): string {\n    return path.win32.join(\"Z:\", file)\n  }\n}\n"]}

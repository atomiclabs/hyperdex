{"version":3,"file":"nsisUtil.js","sourceRoot":"","sources":["../../../src/targets/nsis/nsisUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, log } from \"builder-util\"\nimport { PackageFileInfo } from \"builder-util-runtime\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { copyFile } from \"builder-util/out/fs\"\nimport { unlink } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { getTemplatePath } from \"../../util/pathManager\"\nimport { NsisTarget } from \"./NsisTarget\"\n\nexport const nsisTemplatesDir = getTemplatePath(\"nsis\")\n\n// noinspection SpellCheckingInspection\nexport const NSIS_PATH = new Lazy(() => getBinFromGithub(\"nsis\", \"3.0.3.0\", \"3cZfTAEgX/iatMcjmh4c8ZSwhO76Oqpneb4UPzT+uWxsAfZdUgSuls3WXwOtb9oY+wqSvY7+WRvO8944RSTUcg==\"))\n\nexport class AppPackageHelper {\n  private readonly archToFileInfo = new Map<Arch, Promise<PackageFileInfo>>()\n  private readonly infoToIsDelete = new Map<PackageFileInfo, boolean>()\n\n  /** @private */\n  refCount = 0\n\n  constructor(private readonly elevateHelper: CopyElevateHelper) {\n  }\n\n  async packArch(arch: Arch, target: NsisTarget): Promise<PackageFileInfo> {\n    let infoPromise = this.archToFileInfo.get(arch)\n    if (infoPromise == null) {\n      const appOutDir = target.archs.get(arch)!\n      infoPromise = this.elevateHelper.copy(appOutDir, target)\n        .then(() => target.buildAppPackage(appOutDir, arch))\n      this.archToFileInfo.set(arch, infoPromise)\n    }\n\n    const info = await infoPromise\n    if (target.isWebInstaller) {\n      this.infoToIsDelete.set(info, false)\n    }\n    else if (!this.infoToIsDelete.has(info)) {\n      this.infoToIsDelete.set(info, true)\n    }\n    return info\n  }\n\n  async finishBuild(): Promise<any> {\n    if (--this.refCount > 0) {\n      return\n    }\n\n    const filesToDelete: Array<string> = []\n    for (const [info, isDelete]  of this.infoToIsDelete.entries()) {\n      if (isDelete) {\n        filesToDelete.push(info.path)\n      }\n    }\n\n    await BluebirdPromise.map(filesToDelete, it => unlink(it))\n  }\n}\n\nexport class CopyElevateHelper {\n  private readonly copied = new Map<string, Promise<string>>()\n\n  copy(appOutDir: string, target: NsisTarget): Promise<any> {\n    let isPackElevateHelper = target.options.packElevateHelper\n    if (isPackElevateHelper === false && target.options.perMachine === true) {\n      isPackElevateHelper = true\n      log.warn(\"`packElevateHelper = false` is ignored, because `perMachine` is set to `true`\")\n    }\n\n    if (isPackElevateHelper === false) {\n      return Promise.resolve()\n    }\n\n    let promise = this.copied.get(appOutDir)\n    if (promise != null) {\n      return promise\n    }\n\n    promise = NSIS_PATH.value.then(it => copyFile(path.join(it, \"elevate.exe\"), path.join(appOutDir, \"resources\", \"elevate.exe\"), false))\n    this.copied.set(appOutDir, promise)\n    return promise\n  }\n}"]}

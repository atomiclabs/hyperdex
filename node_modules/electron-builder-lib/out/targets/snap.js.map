{"version":3,"file":"snap.js","sourceRoot":"","sources":["../../src/targets/snap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, replaceDefault as _replaceDefault, serializeToYaml, executeAppBuilder, toLinuxArchString } from \"builder-util\"\nimport { chmod, outputFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { SnapOptions } from \"..\"\nimport { asArray } from \"builder-util-runtime\"\nimport { Target } from \"../core\"\nimport { isElectronBased } from \"../Framework\"\nimport { LinuxPackager, toAppImageOrSnapArch } from \"../linuxPackager\"\nimport { PlugDescriptor } from \"../options/SnapOptions\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDirPath } from \"./targetUtil\"\n\n// libxss1, libasound2, gconf2 - was \"error while loading shared libraries: libXss.so.1\" on Xubuntu 16.04\nconst defaultStagePackages = [\"libasound2\", \"libgconf2-4\", \"libnotify4\", \"libnspr4\", \"libnss3\", \"libpcre3\", \"libpulse0\", \"libxss1\", \"libxtst6\"]\nconst defaultPlugs = [\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\"]\n\nexport default class SnapTarget extends Target {\n  readonly options: SnapOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n\n  private isUseTemplateApp = false\n\n  constructor(name: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(name)\n  }\n\n  private replaceDefault(inList: Array<string> | null | undefined, defaultList: Array<string>) {\n    const result = _replaceDefault(inList, defaultList)\n    if (result !== defaultList) {\n      this.isUseTemplateApp = false\n    }\n    return result\n  }\n\n  private get isElectron2(): boolean {\n    return semver.gte(this.packager.config.electronVersion || \"1.8.3\", \"2.0.0-beta.1\")\n  }\n\n  private createDescriptor(arch: Arch): any {\n    const appInfo = this.packager.appInfo\n    const snapName = this.packager.executableName.toLowerCase()\n    const options = this.options\n    const linuxArchName = toAppImageOrSnapArch(arch)\n\n    const plugs = normalizePlugConfiguration(options.plugs)\n    const plugNames = this.replaceDefault(plugs == null ? null : Object.getOwnPropertyNames(plugs), defaultPlugs)\n    const desktopPart = this.isElectron2 ? \"desktop-gtk3\" : \"desktop-gtk2\"\n\n    const buildPackages = asArray(options.buildPackages)\n    this.isUseTemplateApp = this.options.useTemplateApp !== false && arch === Arch.x64 && buildPackages.length === 0\n\n    const appDescriptor: any = {\n      command: `command.sh`,\n      environment: {\n        TMPDIR: \"$XDG_RUNTIME_DIR\",\n        PATH: \"$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH\",\n        LD_LIBRARY_PATH: [\n          \"$SNAP_LIBRARY_PATH\",\n          \"$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu:$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu/pulseaudio\",\n          \"$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu/mesa-egl\",\n          \"$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/\" + linuxArchName + \"-linux-gnu:$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu\",\n          \"$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib\",\n          \"$SNAP/lib/\" + linuxArchName + \"-linux-gnu:$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu\"\n        ].join(\":\"),\n        ...options.environment,\n      },\n      plugs: plugNames,\n    }\n    const snap: any = {\n      name: snapName,\n      version: appInfo.version,\n      summary: options.summary || appInfo.productName,\n      description: this.helper.getDescription(options),\n      confinement: options.confinement || \"strict\",\n      grade: options.grade || \"stable\",\n      architectures: [toLinuxArchString(arch)],\n      apps: {\n        [snapName]: appDescriptor\n      },\n      parts: {\n        app: {\n          plugin: \"nil\",\n          \"stage-packages\": this.replaceDefault(options.stagePackages, defaultStagePackages),\n          after: this.replaceDefault(options.after, [desktopPart]),\n        }\n      },\n    }\n\n    if (!this.isUseTemplateApp) {\n      appDescriptor.adapter = \"none\"\n    }\n\n    if (buildPackages.length > 0) {\n      snap.parts.app[\"build-packages\"] = buildPackages\n    }\n\n    if (plugs != null) {\n      for (const plugName of plugNames) {\n        const plugOptions = plugs[plugName]\n        if (plugOptions == null) {\n          continue\n        }\n\n        if (snap.plugs == null) {\n          snap.plugs = {}\n        }\n        snap.plugs[plugName] = plugOptions\n      }\n    }\n\n    if (options.assumes != null) {\n      snap.assumes = asArray(options.assumes)\n    }\n\n    if (!this.isUseTemplateApp && snap.parts.app.after.includes(desktopPart)) {\n      // todo change install to override-build when new snapcraft release will be installed on most user machines\n      const desktopPartOverride: any = {\n        install: `set -x\nexport XDG_DATA_DIRS=$SNAPCRAFT_PART_INSTALL/usr/share\nupdate-mime-database $SNAPCRAFT_PART_INSTALL/usr/share/mime\n\nfor dir in $SNAPCRAFT_PART_INSTALL/usr/share/icons/*/; do\n  if [ -f $dir/index.theme ]; then\n    if which gtk-update-icon-cache-3.0 &> /dev/null; then\n      gtk-update-icon-cache-3.0 -q $dir\n    elif which gtk-update-icon-cache &> /dev/null; then\n      gtk-update-icon-cache -q $dir\n    fi\n  fi\ndone`\n      }\n\n      if (appDescriptor.plugs.includes(\"desktop\") || appDescriptor.plugs.includes(\"desktop-legacy\")) {\n        desktopPartOverride.stage = [\"-./usr/share/fonts/**\"]\n      }\n\n      snap.parts[desktopPart] = desktopPartOverride\n    }\n\n    return snap\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"snap\", arch, \"${name}_${version}_${arch}.${ext}\", false)\n    const artifactPath = path.join(this.outDir, artifactName)\n    this.logBuilding(\"snap\", artifactPath, arch)\n\n    const snap: any = this.createDescriptor(arch)\n    if (this.isUseTemplateApp) {\n      delete snap.parts\n    }\n\n    const stageDir = await createStageDirPath(this, packager, arch)\n    // snapcraft.yaml inside a snap directory\n    const snapMetaDir = path.join(stageDir, this.isUseTemplateApp ? \"meta\" : \"snap\")\n\n    const args = [\n      \"snap\",\n      \"--app\", appOutDir,\n      \"--stage\", stageDir,\n      \"--arch\", toLinuxArchString(arch),\n      \"--output\", artifactPath,\n      \"--docker-image\", isElectronBased(this.packager.info.framework) && this.isElectron2 ? \"electronuserland/snapcraft-electron:2\" : \"electronuserland/builder:latest\",\n    ]\n\n    await this.helper.icons\n    if (this.helper.maxIconPath != null) {\n      if (!this.isUseTemplateApp) {\n        snap.icon = \"snap/gui/icon.png\"\n      }\n      args.push(\"--icon\", this.helper.maxIconPath)\n    }\n\n    const desktopFile = path.join(snapMetaDir, \"gui\", `${snap.name}.desktop`)\n    await this.helper.writeDesktopEntry(this.options, packager.executableName, desktopFile, {\n      // tslint:disable:no-invalid-template-strings\n      Icon: \"${SNAP}/meta/gui/icon.png\"\n    })\n\n    if (packager.packagerOptions.effectiveOptionComputed != null && await packager.packagerOptions.effectiveOptionComputed({snap, desktopFile})) {\n      return\n    }\n\n    await outputFile(path.join(snapMetaDir, this.isUseTemplateApp ? \"snap.yaml\" : \"snapcraft.yaml\"), serializeToYaml(snap))\n\n    const commandWrapperFile = path.join(stageDir, \"command.sh\")\n    // noinspection SpellCheckingInspection\n    await writeFile(commandWrapperFile, `#!/bin/bash\\nexec $SNAP/bin/desktop-launch \"$SNAP/${this.isUseTemplateApp ? \"\" : \"app/\"}${this.packager.executableName}\"`)\n    await chmod(commandWrapperFile, 0o755)\n\n    const hooksDir = await packager.getResource(options.hooks, \"snap-hooks\")\n    if (hooksDir != null) {\n      args.push(\"--hooks\", hooksDir)\n    }\n\n    if (this.isUseTemplateApp) {\n      args.push(\"--template-url\", this.isElectron2 ? \"electron2\" : \"electron1\")\n    }\n    await executeAppBuilder(args)\n    packager.dispatchArtifactCreated(artifactPath, this, arch, packager.computeSafeArtifactName(artifactName, \"snap\", arch, false))\n  }\n}\n\nfunction normalizePlugConfiguration(raw: Array<string | PlugDescriptor> | PlugDescriptor | null | undefined): { [key: string]: PlugDescriptor | null } | null {\n  if (raw == null) {\n    return null\n  }\n\n  const result: any = {}\n  for (const item of (Array.isArray(raw) ? raw : [raw])) {\n    if (typeof item === \"string\") {\n      result[item] = null\n    }\n    else {\n      Object.assign(result, item)\n    }\n  }\n  return result\n}\n"]}

{"version":3,"file":"updateInfoBuilder.js","sourceRoot":"","sources":["../../src/publish/updateInfoBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, hashFile, safeStringifyJson, serializeToYaml, log } from \"builder-util\"\nimport { GenericServerOptions, GithubOptions, PublishConfiguration, UpdateInfo, WindowsUpdateInfo } from \"builder-util-runtime\"\nimport { outputFile, outputJson, readFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { ReleaseInfo } from \"..\"\nimport { Platform } from \"../core\"\nimport { Packager } from \"../packager\"\nimport { ArtifactCreated } from \"../packagerApi\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { computeDownloadUrl, getPublishConfigsForUpdateInfo } from \"./PublishManager\"\n\nasync function getReleaseInfo(packager: PlatformPackager<any>) {\n  const releaseInfo: ReleaseInfo = {...(packager.platformSpecificBuildOptions.releaseInfo || packager.config.releaseInfo)}\n  if (releaseInfo.releaseNotes == null) {\n    const releaseNotesFile = await packager.getResource(releaseInfo.releaseNotesFile, `release-notes-${packager.platform.buildConfigurationKey}.md`, `release-notes-${packager.platform.name}.md`, `release-notes-${packager.platform.nodeName}.md`, \"release-notes.md\")\n    const releaseNotes = releaseNotesFile == null ? null : await readFile(releaseNotesFile, \"utf-8\")\n    // to avoid undefined in the file, check for null\n    if (releaseNotes != null) {\n      releaseInfo.releaseNotes = releaseNotes\n    }\n  }\n  delete releaseInfo.releaseNotesFile\n  return releaseInfo\n}\n\nfunction isGenerateUpdatesFilesForAllChannels(packager: PlatformPackager<any>) {\n  const value = packager.platformSpecificBuildOptions.generateUpdatesFilesForAllChannels\n  return value == null ? packager.config.generateUpdatesFilesForAllChannels : value\n}\n\n/**\n if this is an \"alpha\" version, we need to generate only the \"alpha\" .yml file\n if this is a \"beta\" version, we need to generate both the \"alpha\" and \"beta\" .yml file\n if this is a \"stable\" version, we need to generate all the \"alpha\", \"beta\" and \"stable\" .yml file\n */\nfunction computeChannelNames(packager: PlatformPackager<any>, publishConfig: PublishConfiguration): Array<string> {\n  const currentChannel: string = (publishConfig as GenericServerOptions).channel || \"latest\"\n  // for GitHub should be pre-release way be used\n  if (currentChannel === \"alpha\" || publishConfig.provider === \"github\" || !isGenerateUpdatesFilesForAllChannels(packager)) {\n    return [currentChannel]\n  }\n\n  switch (currentChannel) {\n    case \"beta\":\n      return [currentChannel, \"alpha\"]\n\n    case \"latest\":\n      return [currentChannel, \"alpha\", \"beta\"]\n\n    default:\n      return [currentChannel]\n  }\n}\n\nfunction getUpdateInfoFileName(channel: string, packager: PlatformPackager<any>, arch: Arch | null): string {\n  const osSuffix = packager.platform === Platform.WINDOWS ? \"\" : `-${packager.platform.buildConfigurationKey}`\n  const archSuffix = (arch != null && arch !== Arch.x64 && packager.platform === Platform.LINUX) ? `-${Arch[arch]}` : \"\"\n  return `${channel}${osSuffix}${archSuffix}.yml`\n}\n\nexport interface UpdateInfoFileTask {\n  readonly file: string\n  readonly info: UpdateInfo\n  readonly publishConfiguration: PublishConfiguration\n\n  readonly packager: PlatformPackager<any>\n}\n\n/** @internal */\nexport async function createUpdateInfoTasks(event: ArtifactCreated, _publishConfigs: Array<PublishConfiguration>): Promise<Array<UpdateInfoFileTask>> {\n  const packager = event.packager\n  const publishConfigs = await getPublishConfigsForUpdateInfo(packager, _publishConfigs, event.arch)\n  if (publishConfigs == null || publishConfigs.length === 0) {\n    return []\n  }\n\n  const outDir = event.target!.outDir\n  const version = packager.appInfo.version\n  const sha2 = new Lazy<string>(() => hashFile(event.file!, \"sha256\", \"hex\"))\n  const isMac = packager.platform === Platform.MAC\n  const createdFiles = new Set<string>()\n  const sharedInfo = await createUpdateInfo(version, event, await getReleaseInfo(packager))\n  const tasks: Array<UpdateInfoFileTask> = []\n  const electronUpdaterCompatibility = (packager.platformSpecificBuildOptions as any).electronUpdaterCompatibility\n  for (let publishConfiguration of publishConfigs) {\n    if (publishConfiguration.provider === \"github\" && \"releaseType\" in publishConfiguration) {\n      publishConfiguration = {...publishConfiguration!!}\n      delete (publishConfiguration as GithubOptions).releaseType\n    }\n\n    const isBintray = publishConfiguration.provider === \"bintray\"\n    let dir = outDir\n    // Bintray uses different variant of channel file info, better to generate it to a separate dir by always\n    if (isBintray || (publishConfigs.length > 1 && publishConfiguration !== publishConfigs[0])) {\n      dir = path.join(outDir, publishConfiguration.provider)\n    }\n\n    // spaces is a new publish provider, no need to keep backward compatibility\n    let isElectronUpdater1xCompatibility = publishConfiguration.provider !== \"spaces\" && (electronUpdaterCompatibility == null || semver.satisfies(\"1.0.0\", electronUpdaterCompatibility))\n\n    let info = sharedInfo\n    // noinspection JSDeprecatedSymbols\n    if (isElectronUpdater1xCompatibility && packager.platform === Platform.WINDOWS) {\n      info = {\n        ...info,\n      };\n      (info as WindowsUpdateInfo).sha2 = await sha2.value\n    }\n\n    if (event.safeArtifactName != null && publishConfiguration.provider === \"github\") {\n      const newFiles = info.files.slice()\n      newFiles[0].url = event.safeArtifactName\n      info = {\n        ...info,\n        files: newFiles,\n        path: event.safeArtifactName,\n      }\n    }\n\n    for (const channel of computeChannelNames(packager, publishConfiguration)) {\n      if (isMac && isElectronUpdater1xCompatibility && event.file.endsWith(\".zip\")) {\n        // write only for first channel (generateUpdatesFilesForAllChannels is a new functionality, no need to generate old mac update info file)\n        isElectronUpdater1xCompatibility = false\n        await writeOldMacInfo(publishConfiguration, outDir, dir, channel, createdFiles, version, packager)\n      }\n\n      const updateInfoFile = path.join(dir, (isBintray ? `${version}_` : \"\") + getUpdateInfoFileName(channel, packager, event.arch))\n      if (createdFiles.has(updateInfoFile)) {\n        continue\n      }\n\n      createdFiles.add(updateInfoFile)\n\n      // artifact should be uploaded only to designated publish provider\n      tasks.push({\n        file: updateInfoFile,\n        info,\n        publishConfiguration,\n        packager,\n      })\n    }\n  }\n  return tasks\n}\n\nasync function createUpdateInfo(version: string, event: ArtifactCreated, releaseInfo: ReleaseInfo): Promise<UpdateInfo> {\n  const customUpdateInfo = event.updateInfo\n  const url = path.basename(event.file!)\n  const sha512 = (customUpdateInfo == null ? null : customUpdateInfo.sha512) || await hashFile(event.file!)\n  const files = [{url, sha512}]\n  const result: UpdateInfo = {\n    version,\n    files,\n    path: url /* backward compatibility, electron-updater 1.x - electron-updater 2.15.0 */,\n    sha512 /* backward compatibility, electron-updater 1.x - electron-updater 2.15.0 */,\n    ...releaseInfo as UpdateInfo,\n  }\n\n  if (customUpdateInfo != null) {\n    // file info or nsis web installer packages info\n    Object.assign(\"sha512\" in customUpdateInfo ? files[0] : result, customUpdateInfo)\n  }\n  return result\n}\n\nexport async function writeUpdateInfoFiles(updateInfoFileTasks: Array<UpdateInfoFileTask>, packager: Packager) {\n  // zip must be first and zip info must be used for old path/sha512 properties in the update info\n  updateInfoFileTasks.sort((a, b) => (a.info.files[0].url.endsWith(\".zip\") ? 0 : 100) - (b.info.files[0].url.endsWith(\".zip\") ? 0 : 100))\n\n  const updateChannelFileToInfo = new Map<string, UpdateInfoFileTask>()\n  for (const task of updateInfoFileTasks) {\n    const key = `${task.file}@${safeStringifyJson(task.publishConfiguration)}`\n    const existingTask = updateChannelFileToInfo.get(key)\n    if (existingTask == null) {\n      updateChannelFileToInfo.set(key, task)\n      continue\n    }\n\n    existingTask.info.files.push(...task.info.files)\n  }\n\n  const releaseDate = new Date().toISOString()\n  await BluebirdPromise.map(updateChannelFileToInfo.values(), async task => {\n    const publishConfig = task.publishConfiguration\n    if (publishConfig.publishAutoUpdate === false) {\n      log.debug({\n        provider: publishConfig.provider,\n        reason: \"publishAutoUpdate is set to false\"\n      }, \"auto update metadata file not published\")\n      return\n    }\n\n    if (task.info.releaseDate == null) {\n      task.info.releaseDate = releaseDate\n    }\n\n    const fileContent = Buffer.from(serializeToYaml(task.info))\n    await outputFile(task.file, fileContent)\n    packager.dispatchArtifactCreated({\n      file: task.file,\n      fileContent,\n      arch: null,\n      packager: task.packager,\n      target: null,\n      publishConfig,\n    })\n  }, {concurrency: 4})\n}\n\n// backward compatibility - write json file\nasync function writeOldMacInfo(publishConfig: PublishConfiguration, outDir: string, dir: string, channel: string, createdFiles: Set<string>, version: string, packager: PlatformPackager<any>) {\n  const isGitHub = publishConfig.provider === \"github\"\n  const updateInfoFile = (isGitHub && outDir === dir) ? path.join(dir, \"github\", `${channel}-mac.json`) : path.join(dir, `${channel}-mac.json`)\n  if (!createdFiles.has(updateInfoFile)) {\n    createdFiles.add(updateInfoFile)\n    await outputJson(updateInfoFile, {\n      version,\n      releaseDate: new Date().toISOString(),\n      url: computeDownloadUrl(publishConfig, packager.generateName2(\"zip\", \"mac\", isGitHub), packager),\n    }, {spaces: 2})\n\n    packager.info.dispatchArtifactCreated({\n      file: updateInfoFile,\n      arch: null,\n      packager,\n      target: null,\n      publishConfig,\n    })\n  }\n}\n"]}

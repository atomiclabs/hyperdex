{"version":3,"file":"core.js","sourceRoot":"","sources":["../src/core.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAI,AAAE,AAAc,AAAY,AAAG,AAAE,AAAM,AAAc,AAiBlE,AAAM;;;;;;;;;;;AASJ,cAAmB,AAAY,MAAS,AAA6B,uBAAS,AAAgB;AAA3E,SAAI,OAAJ,AAAI,AAAQ;AAAS,SAAqB,wBAArB,AAAqB,AAAQ;AAAS,SAAQ,WAAR,AAAQ,AAAQ,AAC9F;AAAC;;AAED,AAAQ;AACN,WAAO,AAAI,KAAC,AAAI,AAClB;AAAC;;AAED,AAAY,eAAC,AAAoC,MAAE,GAAG,AAAkB;AACtE,QAAI,AAAI,QAAI,AAAI,AAAI,SAAC,AAAK,SAAI,AAAI,QAAI,AAAK,MAAC,AAAM,WAAK,AAAC,AAAC,IAAE;AACzD,aAAO,IAAI,AAAG,IAAC,CAAC,CAAC,AAAI,MAAE,IAAI,AAAG,AAAE,AAAC,AAAC,AAAC;AACpC;;AAED,UAAM,AAAU,aAAG,IAAI,AAAG,AAAE;;AAC5B,QAAI,AAAI,SAAK,AAAQ,SAAC,AAAG,KAAE;AACzB,AAAK,cAAG,CAAC,AAAI,oBAAC,AAAG,AAAC;AACnB;;AAED,SAAK,MAAM,AAAI,AAAI,QAAC,AAAK,SAAI,AAAI,QAAI,AAAK,MAAC,AAAM,WAAK,AAAC,AAAC,AAAC,IAAC,CAAC,AAAc,mCAAC,AAAO,QAAC,AAAI,AAAC,AAAC,AAAC,AAAC,SAAC,AAAK,AAAC,OAAE;AACjG,AAAU,iBAAC,AAAG,IAAC,AAAI,MAAE,AAAI,QAAI,AAAI,AAAC,AAAC,OAAC,AAAE,AAAC,AAAC,AAAC,KAAC,AAAK,MAAC,AAAO,QAAC,AAAI,AAAC,AAAC,AAAC,QAAC,AAAI,AAAC,AAAC,OAAC,CAAC,AAAI,AAAC,AAAC,AAAC;AAChF;;AACD,WAAO,IAAI,AAAG,IAAC,CAAC,CAAC,AAAI,MAAE,AAAU,AAAC,AAAC,AAAC,AACtC;AAAC;;AAED,AAAM,SAAC,AAAO;AACZ,WAAO,AAAQ,SAAC,AAAU,WAAC,AAAO,QAAC,AAAQ,AAAC,AAC9C;AAAC;;AAED,AAAM,SAAC,AAAU,WAAC,AAAY;AAC5B,AAAI,WAAG,AAAI,KAAC,AAAW,AAAE;;AACzB,YAAQ,AAAI,AAAE;AACZ,WAAK,AAAQ,SAAC,AAAG,IAAC,AAAQ,AAAC;AAC3B,WAAK,AAAQ,SAAC,AAAG,IAAC,AAAI;AACpB,eAAO,AAAQ,SAAC,AAAG;;AAErB,WAAK,AAAQ,SAAC,AAAO,QAAC,AAAQ,AAAC;AAC/B,WAAK,AAAQ,SAAC,AAAO,QAAC,AAAI,AAAC;AAC3B,WAAK,AAAQ,SAAC,AAAO,QAAC,AAAqB;AACzC,eAAO,AAAQ,SAAC,AAAO;;AAEzB,WAAK,AAAQ,SAAC,AAAK,MAAC,AAAQ;AAC1B,eAAO,AAAQ,SAAC,AAAK;;AAEvB;AACE,cAAM,IAAI,AAAK,AAAC,2BAAqB,AAAI,IAAE,AAAC,AAC/C,AACH;;AAAC;;;;;AArDM,SAAG,MAAG,IAAI,AAAQ,SAAC,AAAK,OAAE,AAAK,OAAE,AAAQ,AAAC;AAC1C,SAAK,QAAG,IAAI,AAAQ,SAAC,AAAO,SAAE,AAAO,SAAE,AAAO,AAAC;AAC/C,SAAO,UAAG,IAAI,AAAQ,SAAC,AAAS,WAAE,AAAK,OAAE,AAAO,AAAC,UAExD,AAAa;AACb,AAAoC;;AAC7B,SAAG,MAAG,AAAQ,SAAC,AAAG,AAkD3B,AAAM;;;AAIJ,cAA+B,AAAY,MAAW,mBAA4B,AAAI;AAAvD,SAAI,OAAJ,AAAI,AAAQ;AAAW,SAAgB,mBAAhB,AAAgB,AAAgB,AACtF;AAAC,IAED,AAAmC;;;AACzB,AAAW,cAAC,AAA6B,uBAAE,AAAoB,cAAE,AAAU;AACnF,AAAG,uBAAC,AAAI;AAAE,AAAM,cAAE,AAAqB;AAAE,AAAI,YAAE,AAAI,oBAAC,AAAI,AAAC;AAAE,AAAI,YAAE,AAAG,mBAAC,AAAQ,SAAC,AAAY,AAAC,AAAC;AAAnF,OAAqF,AAAU,AAAC,AAC3G;AAAC;;AAEK,AAAY,cAAlB,AAAK,IACH,AAAS,AACX;;;AAAC;;AAID,AAAW;AACT,WAAO,AAAO,QAAC,AAAO,AAAE,AAC1B;AAAC,AACF,AAWD,AAAM;;;;;AAAC,MAAM,AAAc,iBAAG,AAAS,AACvC,AAAM;;AAAC,MAAM,AAAU,aAAG,AAAK","sourcesContent":["import { Arch, archFromString, ArchType, log } from \"builder-util\"\nimport { Publish } from \"builder-util-runtime\"\n\nexport type TargetConfigType = Array<string | TargetConfiguration> | string | TargetConfiguration | null\n\nexport interface TargetConfiguration {\n  /**\n   * The target name. e.g. `snap`.\n   */\n  readonly target: string\n\n  /**\n   * The arch or list of archs.\n   */\n  readonly arch?: Array<ArchType> | ArchType\n}\n\nexport class Platform {\n  static MAC = new Platform(\"mac\", \"mac\", \"darwin\")\n  static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\n  static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\n\n  // deprecated\n  //noinspection JSUnusedGlobalSymbols\n  static OSX = Platform.MAC\n\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>> {\n    if (type == null && (archs == null || archs.length === 0)) {\n      return new Map([[this, new Map()]])\n    }\n\n    const archToType = new Map()\n    if (this === Platform.MAC) {\n      archs = [Arch.x64]\n    }\n\n    for (const arch of (archs == null || archs.length === 0 ? [archFromString(process.arch)] : archs)) {\n      archToType.set(arch, type == null ? [] : (Array.isArray(type) ? type : [type]))\n    }\n    return new Map([[this, archToType]])\n  }\n\n  static current(): Platform {\n    return Platform.fromString(process.platform)\n  }\n\n  static fromString(name: string): Platform {\n    name = name.toLowerCase()\n    switch (name) {\n      case Platform.MAC.nodeName:\n      case Platform.MAC.name:\n        return Platform.MAC\n\n      case Platform.WINDOWS.nodeName:\n      case Platform.WINDOWS.name:\n      case Platform.WINDOWS.buildConfigurationKey:\n        return Platform.WINDOWS\n\n      case Platform.LINUX.nodeName:\n        return Platform.LINUX\n\n      default:\n        throw new Error(`Unknown platform: ${name}`)\n    }\n  }\n}\n\nexport abstract class Target {\n  abstract readonly outDir: string\n  abstract readonly options: TargetSpecificOptions | null | undefined\n\n  protected constructor(readonly name: string, readonly isAsyncSupported: boolean = true) {\n  }\n\n  // noinspection JSMethodCanBeStatic\n  protected logBuilding(targetPresentableName: string, artifactPath: string, arch: Arch): void {\n    log.info({target: targetPresentableName, arch: Arch[arch], file: log.filePath(artifactPath)}, \"building\")\n  }\n\n  async checkOptions(): Promise<any> {\n    // ignore\n  }\n\n  abstract build(appOutDir: string, arch: Arch): Promise<any>\n\n  finishBuild(): Promise<any> {\n    return Promise.resolve()\n  }\n}\n\nexport interface TargetSpecificOptions {\n  /**\n   The [artifact file name template](/configuration/configuration.md#artifact-file-name-template).\n   */\n  readonly artifactName?: string | null\n\n  publish?: Publish\n}\n\nexport const DEFAULT_TARGET = \"default\"\nexport const DIR_TARGET = \"dir\"\n\nexport type CompressionLevel = \"store\" | \"normal\" | \"maximum\"\n\nexport interface BeforeBuildContext {\n  readonly appDir: string\n  readonly electronVersion: string\n  readonly platform: Platform\n  readonly arch: string\n}\n\nexport interface SourceRepositoryInfo {\n  type?: string\n  domain?: string\n  user: string\n  project: string\n}"]}

{"version":3,"file":"bintray.js","sourceRoot":"","sources":["../src/bintray.ts"],"names":[],"mappings":";;;;;;;AACA,AAAO,AAAE,AAAuB,AAAgB,AAAS,AAAkB,AAAM,AAAgB,AAiBjG,AAAM;;;;;;;;;;;AAiBJ,cAAY,AAAuB,SAAmB,AAA+B,cAAmB,AAAoC,mBAAE,AAAsB;AAA9G,SAAY,eAAZ,AAAY,AAAmB;AAAmB,SAAiB,oBAAjB,AAAiB,AAAmB;AANpI,SAAc,iBAA0B,AAAI;;AAOlD,QAAI,AAAO,QAAC,AAAK,SAAI,AAAI,MAAE;AACzB,YAAM,IAAI,AAAK,MAAC,AAAwB,AAAC;AAC1C;;AACD,QAAI,AAAO,QAAC,AAAO,WAAI,AAAI,MAAE;AAC3B,YAAM,IAAI,AAAK,MAAC,AAA0B,AAAC;AAC5C;;AAED,AAAI,SAAC,AAAI,OAAG,AAAO,QAAC,AAAI,QAAI,AAAS;AACrC,AAAI,SAAC,AAAW,cAAG,AAAO,QAAC,AAAO;AAClC,AAAI,SAAC,AAAK,QAAG,AAAO,QAAC,AAAK;AAC1B,AAAI,SAAC,AAAI,OAAG,AAAO,QAAC,AAAI,QAAI,AAAO,QAAC,AAAK;AACzC,AAAI,SAAC,AAAS,YAAG,AAAO,QAAC,AAAS,aAAI,AAAI;AAC1C,AAAI,SAAC,AAAY,eAAG,AAAO,QAAC,AAAY,gBAAI,AAAQ;AACpD,AAAI,SAAC,AAAI,OAAG,AAAM,UAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,AAAC,gBAAS,AAAM,OAAC,AAAI,AAAC,QAAG,AAAI,KAAC,AAAI,QAAI,AAAM,MAAE,AAAC,IAAC,AAAQ,SAAC,AAAQ,AAAC,SAAE;AACvG,AAAI,SAAC,AAAQ,AAAG,wBAAa,AAAI,KAAC,AAAK,SAAI,AAAI,KAAC,AAAI,QAAI,AAAI,KAAC,AAAW,WAAE,AAC5E;AAAC;;AApBD,AAAiB,oBAAC,AAA4B;AAC5C,AAAI,SAAC,AAAc,iBAAG,AAAK,AAC7B;AAAC;;AAoBO,AAAc,iBAAI,AAAY,MAAE,AAAmB,MAAE,OAAuC,AAAI,MAAE,AAAoC,mBAAE,AAAiC;AAC/K,WAAO,AAAS,oCAAM,AAAY,aAAC,AAAO;AAA0B,AAAQ,gBAAE,AAAiB;AAAE,AAAI;AAAE,AAAO,eAAE,AAAI,KAAC,AAAc,kBAAI,AAAS,AAAC;AAA9E,KAAxB,AAAuB,EAAiF,AAAI,MAAE,AAAM,AAAC,OAA/I,AAAI,EAA6I,AAAiB,mBAAE,AAAI,AAAC,AAAC,AAC7L;AAAC;;AAED,AAAU,aAAC,AAAe;AACxB,WAAO,AAAI,KAAC,AAAc,AAAC,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAO,OAAE,IAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,AAAC,AAC7G;AAAC;;AAED,AAAe,kBAAC,AAAe;AAC7B,WAAO,AAAI,KAAC,AAAc,AAAc,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAO,OAAQ,UAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,AAAC,AAChI;AAAC;;AAED,AAAa,gBAAC,AAAe;AAC3B,gBAAY,AAAc,AAAU,kBAAG,AAAI,KAAC,AAAQ,QAAW,aAAE,AAAI,KAAC,AAAI;AACxE,AAAI,YAAE,AAAO,AACd;AAF2E,KAArE,AAAI,EAER,AAAI,KAAC,AAAiB,AAAC,AAC5B;AAAC;;AAED,AAAa,gBAAC,AAAe;AAC3B,WAAO,AAAI,KAAC,AAAc,AAAC,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAO,OAAE,IAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,mBAAE,AAAQ,AAAC,AACvH;AAAC,AACF","sourcesContent":["import { CancellationToken } from \"./CancellationToken\"\nimport { configureRequestOptions, HttpExecutor, parseJson, RequestHeaders } from \"./httpExecutor\"\nimport { BintrayOptions } from \"./publishOptions\"\n\nexport interface Version {\n  readonly name: string\n  //noinspection ReservedWordAsName\n  readonly package: string\n}\n\nexport interface File {\n  name: string\n  path: string\n\n  sha1: string\n  sha256: string\n}\n\nexport class BintrayClient {\n  private readonly basePath: string\n  readonly auth: string | null\n  readonly repo: string\n\n  readonly owner: string\n  readonly user: string\n  readonly component: string | null\n  readonly distribution: string | null\n  readonly packageName: string\n\n  private requestHeaders: RequestHeaders | null = null\n\n  setRequestHeaders(value: RequestHeaders | null) {\n    this.requestHeaders = value\n  }\n\n  constructor(options: BintrayOptions, private readonly httpExecutor: HttpExecutor<any>, private readonly cancellationToken: CancellationToken, apiKey?: string | null) {\n    if (options.owner == null) {\n      throw new Error(\"owner is not specified\")\n    }\n    if (options.package == null) {\n      throw new Error(\"package is not specified\")\n    }\n\n    this.repo = options.repo || \"generic\"\n    this.packageName = options.package\n    this.owner = options.owner\n    this.user = options.user || options.owner\n    this.component = options.component || null\n    this.distribution = options.distribution || \"stable\"\n    this.auth = apiKey == null ? null : `Basic ${Buffer.from(`${this.user}:${apiKey}`).toString(\"base64\")}`\n    this.basePath = `/packages/${this.owner}/${this.repo}/${this.packageName}`\n  }\n\n  private bintrayRequest<T>(path: string, auth: string | null, data: {[name: string]: any; } | null = null, cancellationToken: CancellationToken, method?: \"GET\" | \"DELETE\" | \"PUT\"): Promise<T> {\n    return parseJson(this.httpExecutor.request(configureRequestOptions({hostname: \"api.bintray.com\", path, headers: this.requestHeaders || undefined}, auth, method), cancellationToken, data))\n  }\n\n  getVersion(version: string): Promise<Version> {\n    return this.bintrayRequest(`${this.basePath}/versions/${version}`, this.auth, null, this.cancellationToken)\n  }\n\n  getVersionFiles(version: string): Promise<Array<File>> {\n    return this.bintrayRequest<Array<File>>(`${this.basePath}/versions/${version}/files`, this.auth, null, this.cancellationToken)\n  }\n\n  createVersion(version: string): Promise<any> {\n    return this.bintrayRequest<Version>(`${this.basePath}/versions`, this.auth, {\n      name: version,\n    }, this.cancellationToken)\n  }\n\n  deleteVersion(version: string): Promise<any> {\n    return this.bintrayRequest(`${this.basePath}/versions/${version}`, this.auth, null, this.cancellationToken, \"DELETE\")\n  }\n}"]}

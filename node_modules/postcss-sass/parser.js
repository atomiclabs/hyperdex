'use strict';

exports.__esModule = true;

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _gonzalesPe = require('gonzales-pe');

var _gonzalesPe2 = _interopRequireDefault(_gonzalesPe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_RAWS_ROOT = {
    before: ''
};

var DEFAULT_RAWS_RULE = {
    before: '',
    between: ''
};

var DEFAULT_RAWS_DECL = {
    before: '',
    between: '',
    semicolon: false
};

var DEFAULT_COMMENT_DECL = {
    before: '',
    left: '',
    right: ''
};

var SassParser = function () {
    function SassParser(input) {
        _classCallCheck(this, SassParser);

        this.input = input;
    }

    SassParser.prototype.parse = function parse() {
        try {
            this.node = _gonzalesPe2.default.parse(this.input.css, { syntax: 'sass' });
        } catch (error) {
            throw this.input.error(error.message, error.line, 1);
        }
        this.lines = this.input.css.match(/^.*(\r?\n|$)/gm);
        this.root = this.stylesheet(this.node);
    };

    SassParser.prototype.extractSource = function extractSource(start, end) {
        var nodeLines = this.lines.slice(start.line - 1, end.line);

        nodeLines[0] = nodeLines[0].substring(start.column - 1);
        var last = nodeLines.length - 1;
        nodeLines[last] = nodeLines[last].substring(0, end.column);

        return nodeLines.join('');
    };

    SassParser.prototype.stylesheet = function stylesheet(node) {
        var _this = this;

        // Create and set parameters for Root node
        var root = _postcss2.default.root();
        root.source = {
            start: node.start,
            end: node.end,
            input: this.input
        };
        // Raws for root node
        root.raws = {
            semicolon: DEFAULT_RAWS_ROOT.semicolon,
            before: DEFAULT_RAWS_ROOT.before
        };
        // Store spaces before root (if exist)
        this.raws = {
            before: ''
        };
        node.content.forEach(function (contentNode) {
            return _this.process(contentNode, root);
        });
        return root;
    };

    SassParser.prototype.process = function process(node, parent) {
        if (this[node.type]) {
            return this[node.type](node, parent) || null;
        } else {
            return null;
        }
    };

    SassParser.prototype.ruleset = function ruleset(node, parent) {
        var _this2 = this;

        // Loop to find the deepest ruleset node
        this.raws.multiRuleProp = '';

        node.content.forEach(function (contentNode) {
            switch (contentNode.type) {
                case 'block':
                    {
                        // Create Rule node
                        var rule = _postcss2.default.rule();
                        rule.selector = '';
                        // Object to store raws for Rule
                        var ruleRaws = {
                            before: _this2.raws.before || DEFAULT_RAWS_RULE.before,
                            between: DEFAULT_RAWS_RULE.between
                        };

                        // Variable to store spaces and symbols before declaration property
                        _this2.raws.before = '';
                        _this2.raws.comment = false;

                        // Look up throw all nodes in current ruleset node
                        node.content.filter(function (_ref) {
                            var type = _ref.type;
                            return type === 'block';
                        }).forEach(function (innerContentNode) {
                            return _this2.process(innerContentNode, rule);
                        });

                        if (rule.nodes.length) {
                            // Write selector to Rule
                            rule.selector = _this2.extractSource(node.start, contentNode.start).slice(0, -1).replace(/\s+$/, function (spaces) {
                                ruleRaws.between = spaces;
                                return '';
                            });
                            // Set parameters for Rule node
                            rule.parent = parent;
                            rule.source = {
                                start: node.start,
                                end: node.end,
                                input: _this2.input
                            };
                            rule.raws = ruleRaws;
                            parent.nodes.push(rule);
                        }
                        break;
                    }
                default:
            }
        });
    };

    SassParser.prototype.block = function block(node, parent) {
        var _this3 = this;

        // If nested rules exist, wrap current rule in new rule node
        if (this.raws.multiRule) {
            if (this.raws.multiRulePropVariable) {
                this.raws.multiRuleProp = '$' + this.raws.multiRuleProp;
            }
            var multiRule = Object.assign(_postcss2.default.rule(), {
                source: {
                    start: {
                        line: node.start.line - 1,
                        column: node.start.column
                    },
                    end: node.end,
                    input: this.input
                },
                raws: {
                    before: this.raws.before || DEFAULT_RAWS_RULE.before,
                    between: DEFAULT_RAWS_RULE.between
                },
                parent: parent,
                selector: (this.raws.customProperty ? '--' : '') + this.raws.multiRuleProp
            });
            parent.push(multiRule);
            parent = multiRule;
        }

        this.raws.before = '';

        // Looking for declaration node in block node
        node.content.forEach(function (contentNode) {
            return _this3.process(contentNode, parent);
        });
        if (this.raws.multiRule) {
            this.raws.beforeMulti = this.raws.before;
        }
    };

    SassParser.prototype.declaration = function declaration(node, parent) {
        var _this4 = this;

        var isBlockInside = false;
        // Create Declaration node
        var declarationNode = _postcss2.default.decl();
        declarationNode.prop = '';

        // Object to store raws for Declaration
        var declarationRaws = Object.assign(declarationNode.raws, {
            before: this.raws.before || DEFAULT_RAWS_DECL.before,
            between: DEFAULT_RAWS_DECL.between,
            semicolon: DEFAULT_RAWS_DECL.semicolon
        });

        this.raws.property = false;
        this.raws.betweenBefore = false;
        this.raws.comment = false;
        // Looking for property and value node in declaration node
        node.content.forEach(function (contentNode) {
            switch (contentNode.type) {
                case 'customProperty':
                    _this4.raws.customProperty = true;
                // fall through
                case 'property':
                    {
                        /* global.property to detect is property is already defined in current object */
                        _this4.raws.property = true;
                        _this4.raws.multiRuleProp = contentNode.content[0].content;
                        _this4.raws.multiRulePropVariable = contentNode.content[0].type === 'variable';
                        _this4.process(contentNode, declarationNode);
                        break;
                    }
                case 'propertyDelimiter':
                    {
                        if (_this4.raws.property && !_this4.raws.betweenBefore) {
                            /* If property is already defined and there's no ':' before it */
                            declarationRaws.between += contentNode.content;
                            _this4.raws.multiRuleProp += contentNode.content;
                        } else {
                            /* If ':' goes before property declaration, like :width 100px */
                            _this4.raws.betweenBefore = true;
                            declarationRaws.before += contentNode.content;
                            _this4.raws.multiRuleProp += contentNode.content;
                        }
                        break;
                    }
                case 'space':
                    {
                        declarationRaws.between += contentNode.content;
                        break;
                    }
                case 'value':
                    {
                        // Look up for a value for current property
                        switch (contentNode.content[0].type) {
                            case 'block':
                                {
                                    isBlockInside = true;
                                    // If nested rules exist
                                    if (Array.isArray(contentNode.content[0].content)) {
                                        _this4.raws.multiRule = true;
                                    }
                                    _this4.process(contentNode.content[0], parent);
                                    break;
                                }
                            case 'variable':
                                {
                                    declarationNode.value = '$';
                                    _this4.process(contentNode, declarationNode);
                                    break;
                                }
                            case 'color':
                                {
                                    declarationNode.value = '#';
                                    _this4.process(contentNode, declarationNode);
                                    break;
                                }
                            case 'number':
                                {
                                    if (contentNode.content.length > 1) {
                                        declarationNode.value = contentNode.content.join('');
                                    } else {
                                        _this4.process(contentNode, declarationNode);
                                    }
                                    break;
                                }
                            case 'parentheses':
                                {
                                    declarationNode.value = '(';
                                    _this4.process(contentNode, declarationNode);
                                    break;
                                }
                            default:
                                {
                                    _this4.process(contentNode, declarationNode);
                                }
                        }
                        break;
                    }
                default:
            }
        });

        if (!isBlockInside) {
            // Set parameters for Declaration node
            declarationNode.source = {
                start: node.start,
                end: node.end,
                input: this.input
            };
            declarationNode.parent = parent;
            parent.nodes.push(declarationNode);
        }

        this.raws.before = '';
        this.raws.customProperty = false;
        this.raws.multiRuleProp = '';
        this.raws.property = false;
    };

    SassParser.prototype.customProperty = function customProperty(node, parent) {
        this.property(node, parent);
        parent.prop = '--' + parent.prop;
    };

    SassParser.prototype.property = function property(node, parent) {
        // Set property for Declaration node
        switch (node.content[0].type) {
            case 'variable':
                {
                    parent.prop += '$';
                    break;
                }
            case 'interpolation':
                {
                    this.raws.interpolation = true;
                    parent.prop += '#{';
                    break;
                }
            default:
        }
        parent.prop += node.content[0].content;
        if (this.raws.interpolation) {
            parent.prop += '}';
            this.raws.interpolation = false;
        }
    };

    SassParser.prototype.value = function value(node, parent) {
        if (!parent.value) {
            parent.value = '';
        }
        // Set value for Declaration node
        if (node.content.length) {
            node.content.forEach(function (contentNode) {
                switch (contentNode.type) {
                    case 'important':
                        {
                            parent.raws.important = contentNode.content;
                            parent.important = true;
                            var match = parent.value.match(/^(.*?)(\s*)$/);
                            if (match) {
                                parent.raws.important = match[2] + parent.raws.important;
                                parent.value = match[1];
                            }
                            break;
                        }
                    case 'parentheses':
                        {
                            parent.value += contentNode.content.join('') + ')';
                            break;
                        }
                    default:
                        {
                            if (contentNode.content.constructor === Array) {
                                parent.value += contentNode.content.join('');
                            } else {
                                parent.value += contentNode.content;
                            }
                        }
                }
            });
        }
    };

    SassParser.prototype.singlelineComment = function singlelineComment(node, parent) {
        return this.comment(node, parent, true);
    };

    SassParser.prototype.multilineComment = function multilineComment(node, parent) {
        return this.comment(node, parent, false);
    };

    SassParser.prototype.comment = function comment(node, parent, inline) {
        var text = node.content.match(/^(\s*)((?:\S[\s\S]*?)?)(\s*)$/);

        this.raws.comment = true;

        var comment = Object.assign(_postcss2.default.comment(), {
            text: text[2],
            raws: {
                before: this.raws.before || DEFAULT_COMMENT_DECL.before,
                left: text[1],
                right: text[3],
                inline: inline
            }
        });

        if (this.raws.beforeMulti) {
            comment.raws.before += this.raws.beforeMulti;
            this.raws.beforeMulti = undefined;
        }

        parent.nodes.push(comment);
        this.raws.before = '';
    };

    SassParser.prototype.space = function space(node, parent) {
        // Spaces before root and rule
        switch (parent.type) {
            case 'root':
                {
                    this.raws.before += node.content;
                    break;
                }
            case 'rule':
                {
                    if (this.raws.comment) {
                        this.raws.before += node.content;
                    } else if (this.raws.loop) {
                        parent.selector += node.content;
                    } else {
                        this.raws.before = (this.raws.before || '\n') + node.content;
                    }
                    break;
                }
            default:
        }
    };

    SassParser.prototype.declarationDelimiter = function declarationDelimiter(node) {
        this.raws.before += node.content;
    };

    SassParser.prototype.loop = function loop(node, parent) {
        var _this5 = this;

        var loop = _postcss2.default.rule();
        this.raws.comment = false;
        this.raws.multiRule = false;
        this.raws.loop = true;
        loop.selector = '';
        loop.raws = {
            before: this.raws.before || DEFAULT_RAWS_RULE.before,
            between: DEFAULT_RAWS_RULE.between
        };
        if (this.raws.beforeMulti) {
            loop.raws.before += this.raws.beforeMulti;
            this.raws.beforeMulti = undefined;
        }
        node.content.forEach(function (contentNode, i) {
            if (node.content[i + 1] && node.content[i + 1].type === 'block') {
                _this5.raws.loop = false;
            }
            _this5.process(contentNode, loop);
        });
        parent.nodes.push(loop);
        this.raws.loop = false;
    };

    SassParser.prototype.atkeyword = function atkeyword(node, parent) {
        parent.selector += '@' + node.content;
    };

    SassParser.prototype.operator = function operator(node, parent) {
        parent.selector += node.content;
    };

    SassParser.prototype.variable = function variable(node, parent) {
        if (this.raws.loop) {
            parent.selector += '$' + node.content[0].content;
        } else {
            parent.selector += '#' + node.content[0].content;
        }
    };

    SassParser.prototype.ident = function ident(node, parent) {
        parent.selector += node.content;
    };

    return SassParser;
}();

exports.default = SassParser;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
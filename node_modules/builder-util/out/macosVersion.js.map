{"version":3,"file":"macosVersion.js","sourceRoot":"","sources":["../src/macosVersion.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;;;;;AACrC,AAAO,AAAE,AAAI,AAAE,AAAM,AAAU;;;;;;;;;;AAC/B,AAAO,AAAK,AAAM,AAAM,AAAQ;;;;;;;;;;AAChC,AAAO,AAAE,AAAG,AAAE,AAAM,AAAQ;;;;;;;;;;;4CAgB5B,AAAK,WAA0C,AAAa;AAC1D,WAAO,AAAM,SAAC,AAAG,KAAC,MAAM,AAAY,aAAC,AAAK,QAAE,AAAK,MAAC,AAAK,AAAC,AAAC,AAC3D;AAAC,AAED,AAAM;;;;;;;;;AAlBN,MAAM,AAAY,oBAAO,AAAI,+CAAS,AAAK,AAAI,AAAE;AAC/C,QAAM,AAAI,OAAG,MAAM,AAAQ,0BAAC,AAAkD,oDAAE,AAAM,AAAC;AACvF,QAAM,AAAO,UAAG,AAA6D,8DAAC,AAAI,KAAC,AAAI,AAAC;;AACxF,MAAI,CAAC,AAAO,SAAE;AACZ,UAAM,IAAI,AAAK,MAAC,AAAiC,AAAC;AACnD;;AACD,AAAG,cAAC,AAAK;AAAE,AAAO,aAAE,AAAO,QAAC,AAAC,AAAC,AAAC;AAArB,KAAuB,AAAe,AAAC;;AACjD,SAAO,AAAK,MAAC,AAAO,QAAC,AAAC,AAAC,AAAC,AAC1B;AAAC,AAAC,CARmB;;AAUrB,eAAe,AAAe;AAC5B,SAAO,AAAO,QAAC,AAAK,MAAC,AAAG,AAAC,KAAC,AAAM,WAAK,AAAC,AAAC,AAAC,AAAC,OAAG,AAAO,OAAI,AAAC,AAAC,OAAC,AAAO,AACnE;AAAC;;;AAOC,SAAO,AAAY,aAAC,AAAK,AAC3B;AAAC,AAED,AAAM;;;4CAAC,AAAK;AACV,WAAO,AAAO,QAAC,AAAQ,aAAK,AAAQ,aAAI,MAAM,AAA+B,gCAAC,AAAS,AAAC,AAC1F;AAAC,AAED,AAAM;;;;;;;;;;4CAAC,AAAK;AACV,WAAO,AAAO,QAAC,AAAQ,aAAK,AAAQ,aAAI,MAAM,AAA+B,gCAAC,AAAS,AAAC,AAC1F;AAAC,AAED,AAAM;;;;;;;;;;4CAAC,AAAK;AACV,WAAO,AAAO,QAAC,AAAQ,aAAK,AAAQ,aAAI,MAAM,AAA+B,gCAAC,AAAS,AAAC,AAC1F;AAAC","sourcesContent":["import { readFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as semver from \"semver\"\nimport { log } from \"./util\"\n\nconst macOsVersion = new Lazy<string>(async () => {\n  const file = await readFile(\"/System/Library/CoreServices/SystemVersion.plist\", \"utf8\")\n  const matches = /<key>ProductVersion<\\/key>[\\s\\S]*<string>([\\d.]+)<\\/string>/.exec(file)\n  if (!matches) {\n    throw new Error(\"Couldn't find the macOS version\")\n  }\n  log.debug({version: matches[1]}, \"macOS version\")\n  return clean(matches[1])\n})\n\nfunction clean(version: string) {\n  return version.split(\".\").length === 2 ? `${version}.0` : version\n}\n\nasync function isOsVersionGreaterThanOrEqualTo(input: string) {\n  return semver.gte(await macOsVersion.value, clean(input))\n}\n\nexport function getMacOsVersion() {\n  return macOsVersion.value\n}\n\nexport async function isMacOsSierra() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.12.0\")\n}\n\nexport async function isMacOsHighSierra() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.13.0\")\n}\n\nexport async function isCanSignDmg() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.11.5\")\n}\n"]}

Index: lib/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict'\n\nconst debug = require('debug')('electron-download')\nconst envPaths = require('env-paths')\nconst fs = require('fs-extra')\nconst rc = require('rc')\nconst nugget = require('nugget')\nconst os = require('os')\nconst path = require('path')\nconst pathExists = require('path-exists')\nconst semver = require('semver')\nconst sumchecker = require('sumchecker')\n\nlet tmpFileCounter = 0\n\nclass ElectronDownloader {\n  constructor (opts) {\n    this.opts = opts\n\n    this.npmrc = {}\n    try {\n      rc('npm', this.npmrc)\n    } catch (error) {\n      console.error(`Error reading npm configuration: ${error.message}`)\n    }\n  }\n\n  get baseUrl () {\n    return process.env.NPM_CONFIG_ELECTRON_MIRROR ||\n      process.env.npm_config_electron_mirror ||\n      process.env.ELECTRON_MIRROR ||\n      this.opts.mirror ||\n      'https://github.com/electron/electron/releases/download/v'\n  }\n\n  get middleUrl () {\n    return process.env.ELECTRON_CUSTOM_DIR || this.opts.customDir || this.version\n  }\n\n  get urlSuffix () {\n    return process.env.ELECTRON_CUSTOM_FILENAME || this.opts.customFilename || this.filename\n  }\n\n  get arch () {\n    return this.opts.arch || os.arch()\n  }\n\n  get cache () {\n    // use passed argument or XDG environment variable fallback to OS default\n    return this.opts.cache || envPaths('electron', {suffix: ''}).cache\n  }\n\n  get cachedChecksum () {\n    return path.join(this.cache, `${this.checksumFilename}-${this.version}`)\n  }\n\n  get cachedZip () {\n    const oldLocation = path.join(os.homedir(), './.electron', this.filename)\n    if (pathExists.sync(oldLocation)) {\n      return oldLocation\n    }\n\n    return path.join(this.cache, this.filename)\n  }\n\n  get checksumFilename () {\n    return 'SHASUMS256.txt'\n  }\n\n  get checksumUrl () {\n    return `${this.baseUrl}${this.middleUrl}/${this.checksumFilename}`\n  }\n\n  get filename () {\n    const type = `${this.platform}-${this.arch}`\n    const suffix = `v${this.version}-${type}`\n\n    if (this.chromedriver) {\n      return `chromedriver-v2.21-${type}.zip`\n    } else if (this.mksnapshot) {\n      return `mksnapshot-${suffix}.zip`\n    } else if (this.ffmpeg) {\n      return `ffmpeg-${suffix}.zip`\n    } else if (this.symbols) {\n      return `electron-${suffix}-symbols.zip`\n    } else if (this.dsym) {\n      return `electron-${suffix}-dsym.zip`\n    } else {\n      return `electron-${suffix}.zip`\n    }\n  }\n\n  get platform () {\n    return this.opts.platform || os.platform()\n  }\n\n  get proxy () {\n    let proxy\n    if (this.npmrc && this.npmrc.proxy) proxy = this.npmrc.proxy\n    if (this.npmrc && this.npmrc['https-proxy']) proxy = this.npmrc['https-proxy']\n\n    return proxy\n  }\n\n  get quiet () {\n    return this.opts.quiet || process.stdout.rows < 1\n  }\n\n  get strictSSL () {\n    let strictSSL = true\n    if (this.opts.strictSSL === false || this.npmrc['strict-ssl'] === false) {\n      strictSSL = false\n    }\n\n    return strictSSL\n  }\n\n  get force () {\n    return this.opts.force || false\n  }\n\n  get symbols () {\n    return this.opts.symbols || false\n  }\n\n  get dsym () {\n    return this.opts.dsym || false\n  }\n\n  get chromedriver () {\n    return this.opts.chromedriver || false\n  }\n\n  get mksnapshot () {\n    return this.opts.mksnapshot || false\n  }\n\n  get ffmpeg () {\n    return this.opts.ffmpeg || false\n  }\n\n  get url () {\n    return `${this.baseUrl}${this.middleUrl}/${this.urlSuffix}`\n  }\n\n  get verifyChecksumNeeded () {\n    return semver.gte(this.version, '1.3.2')\n  }\n\n  get version () {\n    return this.opts.version\n  }\n\n  checkForCachedChecksum (cb) {\n    pathExists(this.cachedChecksum).then(exists => {\n      if (exists && !this.force) {\n        this.verifyChecksum(cb)\n      } else {\n        this.downloadChecksum(cb)\n      }\n    })\n  }\n\n  checkForCachedZip (cb) {\n    pathExists(this.cachedZip).then(exists => {\n      if (exists && !this.force) {\n        debug('zip exists', this.cachedZip)\n        this.checkIfZipNeedsVerifying(cb)\n      } else {\n        this.ensureCacheDir(cb)\n      }\n    })\n  }\n\n  checkIfZipNeedsVerifying (cb) {\n    if (this.verifyChecksumNeeded) {\n      debug('Verifying zip with checksum')\n      return this.checkForCachedChecksum(cb)\n    }\n    return cb(null, this.cachedZip)\n  }\n\n  createCacheDir (cb) {\n    fs.mkdirs(this.cache, (err) => {\n      if (err) {\n        if (err.code !== 'EACCES') return cb(err)\n        // try local folder if homedir is off limits (e.g. some linuxes return '/' as homedir)\n        let localCache = path.resolve('./.electron')\n        return fs.mkdirs(localCache, function (err) {\n          if (err) return cb(err)\n          cb(null, localCache)\n        })\n      }\n      cb(null, this.cache)\n    })\n  }\n\n  downloadChecksum (cb) {\n    this.downloadFile(this.checksumUrl, this.cachedChecksum, cb, this.verifyChecksum.bind(this))\n  }\n\n  downloadFile (url, cacheFilename, cb, onSuccess) {\n    const tempFileName = `tmp-${process.pid}-${(tmpFileCounter++).toString(16)}-${path.basename(cacheFilename)}`\n    debug('downloading', url, 'to', this.cache)\n    let nuggetOpts = {\n      target: tempFileName,\n      dir: this.cache,\n      resume: true,\n      quiet: this.quiet,\n      strictSSL: this.strictSSL,\n      proxy: this.proxy\n    }\n    nugget(url, nuggetOpts, (errors) => {\n      if (errors) {\n        // nugget returns an array of errors but we only need 1st because we only have 1 url\n        return this.handleDownloadError(cb, errors[0])\n      }\n\n      this.moveFileToCache(tempFileName, cacheFilename, cb, onSuccess)\n    })\n  }\n\n  downloadIfNotCached (cb) {\n    if (!this.version) return cb(new Error('must specify version'))\n    debug('info', {cache: this.cache, filename: this.filename, url: this.url})\n    this.checkForCachedZip(cb)\n  }\n\n  downloadZip (cb) {\n    this.downloadFile(this.url, this.cachedZip, cb, this.checkIfZipNeedsVerifying.bind(this))\n  }\n\n  ensureCacheDir (cb) {\n    debug('creating cache dir')\n    this.createCacheDir((err, actualCache) => {\n      if (err) return cb(err)\n      this.opts.cache = actualCache // in case cache dir changed\n      this.downloadZip(cb)\n    })\n  }\n\n  handleDownloadError (cb, error) {\n    if (error.message.indexOf('404') === -1) return cb(error)\n    if (this.symbols) {\n      error.message = `Failed to find Electron symbols v${this.version} for ${this.platform}-${this.arch} at ${this.url}`\n    } else {\n      error.message = `Failed to find Electron v${this.version} for ${this.platform}-${this.arch} at ${this.url}`\n    }\n\n    return cb(error)\n  }\n\n  moveFileToCache (filename, target, cb, onSuccess) {\n    const cache = this.cache\n    debug('moving', filename, 'from', cache, 'to', target)\n    fs.rename(path.join(cache, filename), target, (err) => {\n      if (err) {\n        fs.unlink(cache, cleanupError => {\n          try {\n            if (cleanupError) {\n              console.error(`Error deleting cache file: ${cleanupError.message}`)\n            }\n          } finally {\n            cb(err)\n          }\n        })\n      } else {\n        onSuccess(cb)\n      }\n    })\n  }\n\n  verifyChecksum (cb) {\n    let options = {}\n    if (semver.lt(this.version, '1.3.5')) {\n      options.defaultTextEncoding = 'binary'\n    }\n    let checker = new sumchecker.ChecksumValidator('sha256', this.cachedChecksum, options)\n    checker.validate(this.cache, this.filename).then(() => {\n      cb(null, this.cachedZip)\n    }, (err) => {\n      fs.unlink(this.cachedZip, (fsErr) => {\n        if (fsErr) return cb(fsErr)\n        cb(err)\n      })\n    })\n  }\n}\n\nmodule.exports = function download (opts, cb) {\n  let downloader = new ElectronDownloader(opts)\n  downloader.downloadIfNotCached(cb)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/index.js	(date 1491035014000)
+++ lib/index.js	(revision )
@@ -11,8 +11,6 @@
 const semver = require('semver')
 const sumchecker = require('sumchecker')
 
-let tmpFileCounter = 0
-
 class ElectronDownloader {
   constructor (opts) {
     this.opts = opts
@@ -200,7 +198,7 @@
   }
 
   downloadFile (url, cacheFilename, cb, onSuccess) {
-    const tempFileName = `tmp-${process.pid}-${(tmpFileCounter++).toString(16)}-${path.basename(cacheFilename)}`
+    const tempFileName = `tmp-${process.pid}-${(ElectronDownloader.tmpFileCounter++).toString(16)}-${path.basename(cacheFilename)}`
     debug('downloading', url, 'to', this.cache)
     let nuggetOpts = {
       target: tempFileName,
@@ -287,6 +285,8 @@
   }
 }
 
+ElectronDownloader.tmpFileCounter = 0
+
 module.exports = function download (opts, cb) {
   let downloader = new ElectronDownloader(opts)
   downloader.downloadIfNotCached(cb)

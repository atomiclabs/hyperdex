{"version":3,"file":"log.js","sourceRoot":"","sources":["../src/log.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk, { Chalk } from \"chalk\"\nimport _debug from \"debug\"\nimport WritableStream = NodeJS.WritableStream\n\nlet printer: ((message: string) => void) | null = null\n\nexport const debug = _debug(\"electron-builder\")\n\nexport interface Fields {\n  [index: string]: any\n}\n\nexport function setPrinter(value: ((message: string) => void) | null) {\n  printer = value\n}\n\nexport type LogLevel = \"info\" | \"warn\" | \"debug\" | \"notice\" | \"error\"\n\nexport const PADDING = 2\n\nexport class Logger {\n  constructor(protected readonly stream: WritableStream) {\n  }\n\n  messageTransformer: ((message: string, level: LogLevel) => string) = it => it\n\n  filePath(file: string) {\n    const cwd = process.cwd()\n    return file.startsWith(cwd) ? file.substring(cwd.length + 1) : file\n  }\n\n  // noinspection JSMethodCanBeStatic\n  get isDebugEnabled() {\n    return debug.enabled\n  }\n\n  info(messageOrFields: Fields | null | string, message?: string) {\n    this.doLog(message, messageOrFields, \"info\")\n  }\n\n  notice(messageOrFields: Fields | null | string, message?: string): void {\n    this.doLog(message, messageOrFields, \"notice\")\n  }\n\n  warn(messageOrFields: Fields | null | string, message?: string): void {\n    this.doLog(message, messageOrFields, \"warn\")\n  }\n\n  debug(fields: Fields | null, message: string) {\n    if (debug.enabled) {\n      this._doLog(message, fields, \"debug\")\n    }\n  }\n\n  private doLog(message: string | undefined | Error, messageOrFields: Fields | null | string, level: LogLevel) {\n    if (message === undefined) {\n      this._doLog(messageOrFields as string, null, level)\n    }\n    else {\n      this._doLog(message, messageOrFields as Fields | null, level)\n    }\n  }\n\n  private _doLog(message: string | Error, fields: Fields | null, level: LogLevel) {\n    // noinspection SuspiciousInstanceOfGuard\n    if (message instanceof Error) {\n      message = message.stack || message.toString()\n    }\n    else {\n      message = message.toString()\n    }\n\n    const levelIndicator = \"â€¢\"\n    const color = LEVEL_TO_COLOR[level]\n    this.stream.write(`${\" \".repeat(PADDING)}${color(levelIndicator)} `)\n    this.stream.write(Logger.createMessage(this.messageTransformer(message, level), fields, level, color, PADDING + 2 /* level indicator and space */))\n    this.stream.write(\"\\n\")\n  }\n\n  static createMessage(message: string, fields: Fields | null, level: LogLevel, color: (it: string) => string, messagePadding = 0): string {\n    if (fields == null) {\n      return message\n    }\n\n    let text = message\n\n    const fieldPadding = \" \".repeat(Math.max(1, 16 - message.length))\n    text += fieldPadding\n\n    const fieldNames = Object.keys(fields)\n    let counter = 0\n    for (const name of fieldNames) {\n      let fieldValue = fields[name]\n      let valuePadding: string | null = null\n      if (fieldValue != null && typeof fieldValue === \"string\" && fieldValue.includes(\"\\n\")) {\n        valuePadding = \" \".repeat(messagePadding + message.length + fieldPadding.length + 2)\n        fieldValue = \"\\n\" + valuePadding + fieldValue.replace(/\\n/g, `\\n${valuePadding}`)\n      }\n      else if (Array.isArray(fieldValue)) {\n        fieldValue = JSON.stringify(fieldValue)\n      }\n      else if (Array.isArray(fieldValue)) {\n        fieldValue = JSON.stringify(fieldValue)\n      }\n      else if (typeof fieldValue === \"object\") {\n        // fieldValue = safeStringifyJson(fieldValue)\n      }\n\n      text += `${color(name)}=${fieldValue}`\n      if (++counter !== fieldNames.length) {\n        if (valuePadding == null) {\n          text += \" \"\n        }\n        else {\n          text += \"\\n\" + valuePadding\n        }\n      }\n    }\n    return text\n  }\n\n  log(message: string): void {\n    if (printer == null) {\n      this.stream.write(`${message}\\n`)\n    }\n    else {\n      printer(message)\n    }\n  }\n}\n\nconst LEVEL_TO_COLOR: { [index: string]: Chalk } = {\n  info: chalk.blue,\n  notice: chalk.yellow,\n  warn: chalk.yellow,\n  debug: chalk.white,\n}\n\nexport const log = new Logger(process.stdout)"]}

{"version":3,"file":"asyncTaskManager.js","sourceRoot":"","sources":["../src/asyncTaskManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken } from \"builder-util-runtime\"\nimport { log } from \"./log\"\nimport { NestedError } from \"./promise\"\n\nexport class AsyncTaskManager {\n  readonly tasks: Array<Promise<any>> = []\n  private readonly errors: Array<Error> = []\n\n  constructor(private readonly cancellationToken: CancellationToken) {\n  }\n\n  add(task: () => Promise<any>) {\n    if (this.cancellationToken == null || !this.cancellationToken.cancelled) {\n      this.addTask(task())\n    }\n  }\n\n  addTask(promise: Promise<any>) {\n    if (this.cancellationToken.cancelled) {\n      log.debug({reason: \"cancelled\", stack: new Error().stack}, \"async task not added\")\n      if (\"cancel\" in promise) {\n        (promise as any).cancel()\n      }\n      return\n    }\n\n    this.tasks.push(promise\n      .catch(it => {\n        log.debug({error: it.message || it.toString()}, \"async task error\")\n        this.errors.push(it)\n        return Promise.resolve(null)\n      }))\n  }\n\n  cancelTasks() {\n    for (const task of this.tasks) {\n      if (\"cancel\" in task) {\n        (task as any).cancel()\n      }\n    }\n    this.tasks.length = 0\n  }\n\n  async awaitTasks(): Promise<Array<any>> {\n    if (this.cancellationToken.cancelled) {\n      this.cancelTasks()\n      return []\n    }\n\n    const checkErrors = () => {\n      if (this.errors.length > 0) {\n        this.cancelTasks()\n        throwError(this.errors)\n        return\n      }\n    }\n\n    checkErrors()\n\n    let result: Array<any> | null = null\n    const tasks = this.tasks\n    let list = tasks.slice()\n    tasks.length = 0\n    while (list.length > 0) {\n      const subResult = await Promise.all(list)\n      result = result == null ? subResult : result.concat(subResult)\n      checkErrors()\n      if (tasks.length === 0) {\n        break\n      }\n      else {\n        if (this.cancellationToken.cancelled) {\n          this.cancelTasks()\n          return []\n        }\n\n        list = tasks.slice()\n        tasks.length = 0\n      }\n    }\n    return result || []\n  }\n}\n\nfunction throwError(errors: Array<Error>) {\n  if (errors.length === 1) {\n    throw errors[0]\n  }\n  else if (errors.length > 1) {\n    throw new NestedError(errors, \"Cannot cleanup: \")\n  }\n}"]}

{"version":3,"file":"appFileCopier.js","sourceRoot":"","sources":["../../src/util/appFileCopier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { AsyncTaskManager } from \"builder-util\"\nimport { CONCURRENCY, FileCopier, Link, MAX_FILE_REQUESTS, FileTransformer } from \"builder-util/out/fs\"\nimport { ensureDir, readlink, Stats, symlink, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { NODE_MODULES_PATTERN } from \"../fileTransformer\"\nimport { Packager } from \"../packager\"\nimport { ensureEndSlash, ResolvedFileSet } from \"./AppFileCopierHelper\"\n\nexport function getDestinationPath(file: string, fileSet: ResolvedFileSet) {\n  if (file === fileSet.src) {\n    return fileSet.destination\n  }\n  else {\n    const src = ensureEndSlash(fileSet.src)\n    const dest = ensureEndSlash(fileSet.destination)\n    if (file.startsWith(src)) {\n      return dest + file.substring(src.length)\n    }\n    else {\n      // hoisted node_modules\n      // not lastIndexOf, to ensure that nested module (top-level module depends on) copied to parent node_modules, not to top-level directory\n      // project https://github.com/angexis/punchcontrol/commit/cf929aba55c40d0d8901c54df7945e1d001ce022\n      const index = file.indexOf(NODE_MODULES_PATTERN)\n      if (index < 0) {\n        throw new Error(`File \"${file}\" not under the source directory \"${fileSet.src}\"`)\n      }\n      return dest + file.substring(index + 1 /* leading slash */)\n    }\n  }\n}\n\nexport async function copyAppFiles(fileSet: ResolvedFileSet, packager: Packager, transformer: FileTransformer) {\n  const metadata = fileSet.metadata\n  const transformedFiles = fileSet.transformedFiles\n  // search auto unpacked dir\n  const taskManager = new AsyncTaskManager(packager.cancellationToken)\n  const createdParentDirs = new Set<string>()\n\n  function transformContentIfNeed(sourceFile: string, index: number): Promise<any> {\n    let transformedContent: string | Buffer | Promise<string | Buffer | null> | null | undefined = transformedFiles == null ? null : transformedFiles.get(index)\n    if (transformedContent == null) {\n      transformedContent = transformer(sourceFile)\n    }\n\n    if (transformedContent != null && typeof transformedContent === \"object\" && \"then\" in transformedContent) {\n      return transformedContent as Promise<any>\n    }\n    else {\n      return Promise.resolve(transformedContent)\n    }\n  }\n\n  const fileCopier = new FileCopier()\n  const links: Array<Link> = []\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const sourceFile = fileSet.files[i]\n    const stat = metadata.get(sourceFile)\n    if (stat == null) {\n      // dir\n      continue\n    }\n\n    const destinationFile = getDestinationPath(sourceFile, fileSet)\n    if (stat.isSymbolicLink()) {\n      links.push({file: destinationFile, link: await readlink(sourceFile)})\n      continue\n    }\n\n    const fileParent = path.dirname(destinationFile)\n    if (!createdParentDirs.has(fileParent)) {\n      createdParentDirs.add(fileParent)\n      await ensureDir(fileParent)\n    }\n\n    taskManager.addTask(transformContentIfNeed(sourceFile, i).then(it => copyFileOrData(fileCopier, it, sourceFile, destinationFile, stat)))\n    if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n      await taskManager.awaitTasks()\n    }\n  }\n\n  if (taskManager.tasks.length > 0) {\n    await taskManager.awaitTasks()\n  }\n  if (links.length > 0) {\n    await BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY)\n  }\n}\n\nexport function copyFileOrData(fileCopier: FileCopier, data: string | Buffer | undefined | null, source: string, destination: string, stats: Stats) {\n  if (data == null) {\n    return fileCopier.copy(source, destination, stats)\n  }\n  else {\n    return writeFile(destination, data)\n  }\n}"]}

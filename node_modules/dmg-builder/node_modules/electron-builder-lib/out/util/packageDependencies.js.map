{"version":3,"file":"packageDependencies.js","sourceRoot":"","sources":["../../src/util/packageDependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { isEnvTrue, log } from \"builder-util\"\nimport { CONCURRENCY, statOrNull } from \"builder-util/out/fs\"\nimport { orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { lstat, readdir, readFile, realpath, Stats } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\n\nexport interface Dependency {\n  name: string\n  version: string\n  path: string\n  extraneous: boolean\n  optional: boolean\n\n  dependencies: Map<string, Dependency> | null\n  directDependencyNames: Array<string> | null\n  peerDependencies: { [key: string]: any } | null\n  optionalDependencies: { [key: string]: any } | null\n\n  realName: string\n  link?: string\n\n  parent?: Dependency\n\n  // only if link\n  stat?: Stats\n}\n\n// noinspection SpellCheckingInspection\nconst knownAlwaysIgnoredDevDeps = new Set([\n  \"electron-builder-tslint-config\", \"electron-download\", \"libui-download\",\n  \"electron-forge\", \"electron-packager\", \"electron-compilers\",\n  \"prebuild-install\", \"nan\",\n  \"electron-webpack\", \"electron-webpack-ts\", \"electron-webpack-vue\",\n  \"@types\",\n])\n\n// noinspection JSUnusedGlobalSymbols\nexport function createLazyProductionDeps(projectDir: string) {\n  return new Lazy(() => getProductionDependencies(projectDir))\n}\n\n/** @internal */\nexport async function getProductionDependencies(folder: string): Promise<Array<Dependency>> {\n  const result: Array<Dependency> = []\n  computeSortedPaths(await new Collector().collect(folder), result, false)\n  return result\n}\n\nconst ignoredProperties = new Set([\"description\", \"author\", \"bugs\", \"engines\", \"repository\", \"build\", \"main\", \"license\", \"homepage\", \"scripts\", \"maintainers\", \"contributors\", \"keywords\", \"devDependencies\", \"files\", \"typings\", \"types\", \"xo\", \"resolutions\"])\n\nfunction readJson(file: string) {\n  return readFile(file, \"utf-8\")\n    .then(it => JSON.parse(it, (key, value) => ignoredProperties.has(key) ? undefined : value))\n}\n\nfunction computeSortedPaths(parent: Dependency, result: Array<Dependency>, isExtraneous: boolean) {\n  const dependencies = parent.dependencies\n  if (dependencies == null) {\n    return\n  }\n\n  for (const dep of dependencies.values()) {\n    if (dep.extraneous === isExtraneous) {\n      result.push(dep)\n      computeSortedPaths(dep, result, isExtraneous)\n    }\n  }\n}\n\nclass Collector {\n  readonly pathToMetadata = new Map<string, Dependency>()\n  private unresolved = new Map<string, boolean>()\n\n  async collect(dir: string) {\n    const rootDependency: Dependency = await readJson(path.join(dir, \"package.json\"))\n    await this.readInstalled(path.join(dir, \"node_modules\"), rootDependency, rootDependency.name)\n    this.unmarkExtraneous(rootDependency)\n\n    if (this.unresolved.size > 0) {\n      log.debug({unresolved: Array.from(this.unresolved.keys()).join(\", \")}, \"unresolved dependencies after first round\")\n      await this.resolveUnresolvedHoisted(rootDependency, dir)\n    }\n    return rootDependency\n  }\n\n  private async resolveUnresolvedHoisted(rootDependency: Dependency, dir: string): Promise<void> {\n    let nameToMetadata = rootDependency.dependencies\n    if (nameToMetadata == null) {\n      rootDependency.dependencies = new Map<string, Dependency>()\n      nameToMetadata = rootDependency.dependencies\n    }\n\n    let parentDir = dir\n    do {\n      parentDir = path.dirname(parentDir)\n      if (parentDir === \"\" || parentDir.endsWith(\"/\") || parentDir.endsWith(\"\\\\\")) {\n        // https://github.com/electron-userland/electron-builder/issues/2220\n        const list = Array.from(this.unresolved.keys()).filter(it => !this.unresolved.get(it))\n        if (list.length === 1 && list[0] === \"proton-native\") {\n          // resolve in tests\n          parentDir = process.cwd()\n        }\n        else {\n          if (list.length !== 0) {\n            const message = `Unresolved node modules: ${list.join(\", \")}`\n            if (isEnvTrue(process.env.ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES)) {\n              log.warn(message)\n            }\n            else {\n              throw new Error(message)\n            }\n          }\n          break\n        }\n      }\n\n      const parentNodeModulesDir = parentDir + path.sep + \"node_modules\"\n      const dirStat = await statOrNull(parentNodeModulesDir)\n      if (dirStat == null || !dirStat.isDirectory()) {\n        if (dirStat == null || !dirStat.isDirectory()) {\n          continue\n        }\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/2222#issuecomment-339060335\n      // step 1: resolve current unresolved\n      // step n: try to resolve new unresolved in the same parent dir until at least something is resolved in the dir\n      while (true) {\n        const unresolved = Array.from(this.unresolved.keys())\n        this.unresolved.clear()\n\n        const resolved = await BluebirdPromise.map(unresolved, it => {\n          return this.readChildPackage(it, parentNodeModulesDir, rootDependency)\n            .catch(e => {\n              if ((e as any).code === \"ENOENT\") {\n                return null\n              }\n              else {\n                throw e\n              }\n            })\n        }, CONCURRENCY)\n\n        let hasResolved = false\n\n        for (const dep of resolved) {\n          if (dep != null) {\n            hasResolved = true\n            this.unmarkExtraneous(dep)\n            nameToMetadata.set(dep.realName, dep)\n          }\n        }\n\n        if (!hasResolved) {\n          break\n        }\n\n        this.unmarkExtraneous(rootDependency)\n\n        if (this.unresolved.size === 0) {\n          return\n        }\n      }\n    }\n    while (this.unresolved.size > 0)\n  }\n\n  private async readInstalled(nodeModulesDir: string, dependency: Dependency, name: string): Promise<void> {\n    dependency.realName = name\n    dependency.directDependencyNames = dependency.dependencies == null ? null : Object.keys(dependency.dependencies)\n\n    // mark as extraneous at this point.\n    // this will be un-marked in unmarkExtraneous, where we mark as not-extraneous everything that is required in some way from the root object.\n    dependency.extraneous = true\n    dependency.optional = true\n\n    if (dependency.dependencies == null && dependency.optionalDependencies == null) {\n      // package has only dev or peer dependencies - no need to check child node_module\n      dependency.dependencies = null\n      return\n    }\n\n    const childModules = await readNodeModulesDir(nodeModulesDir)\n    if (childModules == null) {\n      dependency.dependencies = null\n      return\n    }\n\n    const deps = await BluebirdPromise.map(childModules, it => this.readChildPackage(it, nodeModulesDir, dependency), CONCURRENCY)\n    if (deps.length === 0) {\n      dependency.dependencies = null\n      return\n    }\n\n    const nameToMetadata = new Map<string, Dependency>()\n    for (const dep of deps) {\n      if (dep != null) {\n        nameToMetadata.set(dep.realName, dep)\n      }\n    }\n    dependency.dependencies = nameToMetadata\n  }\n\n  private async readChildPackage(name: string, nodeModulesDir: string, parent: Dependency): Promise<Dependency | null> {\n    const rawDir = path.join(nodeModulesDir, name)\n    let dir: string | null = rawDir\n    const stat = await lstat(dir)\n    const isSymbolicLink = stat.isSymbolicLink()\n    if (isSymbolicLink) {\n      dir = await orNullIfFileNotExist(realpath(dir))\n      if (dir == null) {\n        log.debug({path: rawDir}, \"broken symlink\")\n        return null\n      }\n    }\n\n    const processed = this.pathToMetadata.get(dir)\n    if (processed != null) {\n      return processed\n    }\n\n    const metadata: Dependency = await orNullIfFileNotExist(readJson(path.join(dir, \"package.json\")))\n    if (metadata == null) {\n      return null\n    }\n\n    if (isSymbolicLink) {\n      metadata.link = dir\n      metadata.stat = stat\n    }\n    else {\n      metadata.parent = parent\n\n      // overwrite if already set by project package.json\n      metadata.link = undefined\n    }\n\n    metadata.path = rawDir\n\n    // do not add root project to result\n    this.pathToMetadata.set(dir, metadata)\n\n    await this.readInstalled(dir + path.sep + \"node_modules\", metadata, name)\n    return metadata\n  }\n\n  private unmark(deps: Iterable<string>, obj: Dependency, unsetOptional: boolean, isOptional: boolean) {\n    for (const name of deps) {\n      const dep = this.findDep(obj, name, isOptional)\n      if (dep != null) {\n        if (unsetOptional) {\n          dep.optional = false\n        }\n        if (dep.extraneous) {\n          this.unmarkExtraneous(dep)\n        }\n      }\n    }\n  }\n\n  private unmarkExtraneous(obj: Dependency) {\n    // Mark all non-required deps as extraneous.\n    // start from the root object and mark as non-extraneous all modules\n    // that haven't been previously flagged as extraneous then propagate to all their dependencies\n\n    obj.extraneous = false\n\n    if (obj.directDependencyNames != null) {\n      this.unmark(obj.directDependencyNames, obj, true, false)\n    }\n\n    if (obj.peerDependencies != null) {\n      this.unmark(Object.keys(obj.peerDependencies), obj, true, false)\n    }\n\n    if (obj.optionalDependencies != null) {\n      this.unmark(Object.keys(obj.optionalDependencies), obj, false, true)\n    }\n  }\n\n  // find the one that will actually be loaded by require() so we can make sure it's valid\n  private findDep(obj: Dependency, name: string, isOptional: boolean) {\n    if (isIgnoredDep(name)) {\n      return null\n    }\n\n    let r: Dependency | null | undefined = obj\n    let found = null\n    while (r != null && found == null) {\n      // if r is a valid choice, then use that.\n      // kinda weird if a pkg depends on itself, but after the first iteration of this loop, it indicates a dep cycle.\n      found = r.dependencies == null ? null : r.dependencies.get(name)\n      if (found == null && r.realName === name) {\n        found = r\n      }\n      r = r.link == null ? r.parent : null\n    }\n\n    if (found == null) {\n      this.unresolved.set(name, isOptional)\n    }\n    return found\n  }\n}\n\nfunction isIgnoredDep(name: string) {\n  return knownAlwaysIgnoredDevDeps.has(name) || name.startsWith(\"@types/\")\n}\n\nasync function readNodeModulesDir(dir: string): Promise<Array<string> | null> {\n  let files: Array<string>\n  try {\n    files = (await readdir(dir)).filter(it => !it.startsWith(\".\") && !knownAlwaysIgnoredDevDeps.has(it))\n  }\n  catch (e) {\n    // error indicates that nothing is installed here\n    return null\n  }\n\n  files.sort()\n\n  const scopes = files.filter(it => it.startsWith(\"@\"))\n  if (scopes.length === 0) {\n    return files\n  }\n\n  const result = files.filter(it => !it.startsWith(\"@\"))\n  const scopeFileList = await BluebirdPromise.map(scopes, it => readdir(path.join(dir, it)))\n  for (let i = 0; i < scopes.length; i++) {\n    const list = scopeFileList[i]\n    list.sort()\n    for (const file of list) {\n      if (!file.startsWith(\".\")) {\n        result.push(`${scopes[i]}/${file}`)\n      }\n    }\n  }\n\n  return result\n}\n"]}

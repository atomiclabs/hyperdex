{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../src/util/filter.ts"],"names":[],"mappings":";;;;;;;;AAGA,AAAO,AAAK,AAAI,AAAM,AAAM;;AAC5B,AAAO,AAAE,AAAc,AAAE,AAAM,AAAuB;;;;;;;;;;;;AAEtD,AAAgB,AAChB,AAAM;kBAAmB,AAAkB;AACzC,QAAM,AAAG,MAAG,AAAO,QAAC,AAAG;;AACvB,MAAI,AAAG,IAAC,AAAM,SAAG,AAAC,GAAE;AAClB,WAAO,AAAI;AACZ;;AAED,OAAK,MAAM,AAAC,KAAI,AAAG,IAAC,AAAC,AAAC,IAAE;AACtB,QAAI,OAAO,AAAC,MAAK,AAAQ,UAAE;AACzB,aAAO,AAAI;AACZ;AACF;;AAED,SAAO,AAAK,AACd;AAAC;AAED,AAAgB,AAChB,AAAM;;;sBAAuB,AAAW,KAAE,AAA0B,UAAE,AAAyC;AAC7G,QAAM,AAAa,gBAAG,AAAI,KAAC,AAAG;AAC9B,QAAM,AAAe,kBAAG,AAAc,2CAAC,AAAG,AAAC;AAC3C,SAAO,CAAC,AAAE,IAAE,AAAI,AAAE,AAAE;AAClB,QAAI,AAAG,QAAK,AAAE,IAAE;AACd,aAAO,AAAI;AACZ;;AAED,QAAI,AAAQ,WAAG,AAAE,GAAC,AAAS,UAAC,AAAe,gBAAC,AAAM,AAAC;;AACnD,QAAI,AAAa,kBAAK,AAAI,MAAE;AAC1B,UAAI,AAAQ,SAAC,AAAU,WAAC,AAAI,AAAC,OAAE;AAC7B,AAAmI;AACnI,AAAQ,mBAAG,AAAQ,SAAC,AAAS,UAAC,AAAC,AAAC;AACjC;;AACD,AAAQ,iBAAG,AAAQ,SAAC,AAAO,QAAC,AAAK,OAAE,AAAG,AAAC;AACxC,MAED,AAAmE;;;AACnE,WAAO,AAAY,aAAC,AAAQ,UAAE,AAAQ,UAAE,AAAI,AAAC,AAAI,UAAC,AAAe,mBAAI,AAAI,QAAI,AAAI,KAAC,AAAW,AAAE,iBAAI,CAAC,AAAY,aAAC,AAAQ,UAAE,AAAe,iBAAE,AAAI,AAAC,AAAC,AACpJ;AAAC,AACH;AAAC,EAED,AAAgE;;;AAChE,sBAAsB,AAAY,MAAE,AAA0B,UAAE,AAAW;AACzE,MAAI,AAAK,QAAG,AAAK;;AACjB,OAAK,MAAM,AAAO,WAAI,AAAQ;AAC5B,AAAqD;AACrD,AAAyD;AACzD,QAAI,AAAK,UAAK,AAAO,QAAC,AAAM,QAAE;AAC5B,AAAQ;AACT,KAL6B,CAO9B,AAAqE;AACrE,AAAoM;;;AACpM,AAAK,YAAG,AAAO,QAAC,AAAK,MAAC,AAAI,MAAE,AAAI,KAAC,AAAW,AAAE,iBAAI,CAAC,AAAO,QAAC,AAAM,AAAC;AACnE;;AACD,SAAO,AAAK,AACd;AAAC","sourcesContent":["import { Filter } from \"builder-util/out/fs\"\nimport { Stats } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { ensureEndSlash } from \"./AppFileCopierHelper\"\n\n/** @internal */\nexport function hasMagic(pattern: Minimatch) {\n  const set = pattern.set\n  if (set.length > 1) {\n    return true\n  }\n\n  for (const i of set[0]) {\n    if (typeof i !== \"string\") {\n      return true\n    }\n  }\n\n  return false\n}\n\n/** @internal */\nexport function createFilter(src: string, patterns: Array<Minimatch>, excludePatterns?: Array<Minimatch> | null): Filter {\n  const pathSeparator = path.sep\n  const srcWithEndSlash = ensureEndSlash(src)\n  return (it, stat) => {\n    if (src === it) {\n      return true\n    }\n\n    let relative = it.substring(srcWithEndSlash.length)\n    if (pathSeparator === \"\\\\\") {\n      if (relative.startsWith(\"\\\\\")) {\n        // windows problem: double backslash, the above substring call removes root path with a single slash, so here can me some leftovers\n        relative = relative.substring(1)\n      }\n      relative = relative.replace(/\\\\/g, \"/\")\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/867\n    return minimatchAll(relative, patterns, stat) && (excludePatterns == null || stat.isDirectory() || !minimatchAll(relative, excludePatterns, stat))\n  }\n}\n\n// https://github.com/joshwnj/minimatch-all/blob/master/index.js\nfunction minimatchAll(path: string, patterns: Array<Minimatch>, stat: Stats): boolean {\n  let match = false\n  for (const pattern of patterns) {\n    // If we've got a match, only re-test for exclusions.\n    // if we don't have a match, only re-test for inclusions.\n    if (match !== pattern.negate) {\n      continue\n    }\n\n    // partial match — pattern: foo/bar.txt path: foo — we must allow foo\n    // use it only for non-negate patterns: const m = new Minimatch(\"!node_modules/@(electron-download|electron)/**/*\", {dot: true }); m.match(\"node_modules\", true) will return false, but must be true\n    match = pattern.match(path, stat.isDirectory() && !pattern.negate)\n  }\n  return match\n}\n"]}

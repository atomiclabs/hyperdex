{"version":3,"file":"NodeModuleCopyHelper.js","sourceRoot":"","sources":["../../src/util/NodeModuleCopyHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CONCURRENCY, Filter } from \"builder-util/out/fs\"\nimport { lstat, readdir, readlink, stat, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { excludedNames, FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { resolveFunction } from \"../platformPackager\"\nimport { Dependency } from \"./packageDependencies\"\n\nconst excludedFiles = new Set([\".DS_Store\", \"node_modules\" /* already in the queue */, \"CHANGELOG.md\", \"ChangeLog\", \"changelog.md\", \"binding.gyp\", \".npmignore\"].concat(excludedNames.split(\",\")))\nconst topLevelExcludedFiles = new Set([\"test.js\", \"karma.conf.js\", \".coveralls.yml\", \"README.md\", \"readme.markdown\", \"README\", \"readme.md\", \"readme\", \"test\", \"__tests__\", \"tests\", \"powered-test\", \"example\", \"examples\"])\n\n/** @internal */\nexport class NodeModuleCopyHelper {\n  readonly metadata = new Map<string, Stats>()\n  readonly filter: Filter\n\n  constructor(private readonly matcher: FileMatcher, protected readonly packager: Packager) {\n    this.filter = matcher.createFilter()\n  }\n\n  protected handleFile(file: string, fileStat: Stats): Promise<Stats | null> | null {\n    if (!fileStat.isSymbolicLink()) {\n      return null\n    }\n\n    return readlink(file)\n      .then((linkTarget): any => {\n        // http://unix.stackexchange.com/questions/105637/is-symlinks-target-relative-to-the-destinations-parent-directory-and-if-so-wh\n        return this.handleSymlink(fileStat, file, path.resolve(path.dirname(file), linkTarget))\n      })\n  }\n\n  protected handleSymlink(fileStat: Stats, file: string, linkTarget: string): Promise<Stats> | null {\n    const link = path.relative(this.matcher.from, linkTarget)\n    if (link.startsWith(\"..\")) {\n      // outside of project, linked module (https://github.com/electron-userland/electron-builder/issues/675)\n      return stat(linkTarget)\n        .then(targetFileStat => {\n          this.metadata.set(file, targetFileStat)\n          return targetFileStat\n        })\n    }\n    else {\n      (fileStat as any).relativeLink = link\n    }\n    return null\n  }\n\n  async collectNodeModules(list: Array<Dependency>): Promise<Array<string>> {\n    const filter = this.filter\n    const metadata = this.metadata\n\n    const isIncludePdb = this.packager.config.includePdb === true\n\n    const onNodeModuleFile = resolveFunction(this.packager.config.onNodeModuleFile)\n\n    const result: Array<string> = []\n    const queue: Array<string> = []\n    for (const dep of list) {\n      queue.length = 1\n      queue[0] = dep.path\n\n      if (dep.link != null) {\n        this.metadata.set(dep.path, dep.stat!)\n        const r = this.handleSymlink(dep.stat!, dep.path, dep.link!)\n        if (r != null) {\n          await r\n        }\n      }\n\n      while (queue.length > 0) {\n        const dirPath = queue.pop()!\n\n        const childNames = await readdir(dirPath)\n        childNames.sort()\n\n        const isTopLevel = dirPath === dep.path\n        const dirs: Array<string> = []\n        // our handler is async, but we should add sorted files, so, we add file to result not in the mapper, but after map\n        const sortedFilePaths = await BluebirdPromise.map(childNames, name => {\n          if (onNodeModuleFile != null) {\n            onNodeModuleFile(dirPath + path.sep + name)\n          }\n\n          if (excludedFiles.has(name) || name.endsWith(\".h\") || name.endsWith(\".o\") || name.endsWith(\".obj\") || name.endsWith(\".cc\") || (!isIncludePdb && name.endsWith(\".pdb\")) || name.endsWith(\".d.ts\") ||\n            name.endsWith(\".suo\") || name.endsWith(\".sln\") || name.endsWith(\".xproj\") || name.endsWith(\".csproj\")) {\n            return null\n          }\n\n          // noinspection SpellCheckingInspection\n          if (isTopLevel && (topLevelExcludedFiles.has(name) || (dep.name === \"libui-node\" && (name === \"build\" || name === \"docs\" || name === \"src\")))) {\n            return null\n          }\n\n          if (dirPath.endsWith(\"build\")) {\n            if (name === \"gyp-mac-tool\" || name === \"Makefile\" || name.endsWith(\".mk\") || name.endsWith(\".gypi\") || name.endsWith(\".Makefile\")) {\n              return null\n            }\n          }\n          else if (dirPath.endsWith(\"Release\") && (name === \".deps\" || name === \"obj.target\")) {\n            return null\n          }\n          else if (name === \"src\" && (dirPath.endsWith(\"keytar\") || dirPath.endsWith(\"keytar-prebuild\"))) {\n            return null\n          }\n          else if (dirPath.endsWith(\"lzma-native\") && (name === \"build\" || name === \"deps\")) {\n            return null\n          }\n\n          const filePath = dirPath + path.sep + name\n          return lstat(filePath)\n            .then(stat => {\n              if (filter != null && !filter(filePath, stat)) {\n                return null\n              }\n\n              if (!stat.isDirectory()) {\n                metadata.set(filePath, stat)\n              }\n              const consumerResult = this.handleFile(filePath, stat)\n              if (consumerResult == null) {\n                if (stat.isDirectory()) {\n                  dirs.push(name)\n                  return null\n                }\n                else {\n                  return filePath\n                }\n              }\n              else {\n                return consumerResult\n                  .then(it => {\n                    // asarUtil can return modified stat (symlink handling)\n                    if ((it == null ? stat : it).isDirectory()) {\n                      dirs.push(name)\n                      return null\n                    }\n                    else {\n                      return filePath\n                    }\n                  })\n              }\n            })\n        }, CONCURRENCY)\n\n        for (const child of sortedFilePaths) {\n          if (child != null) {\n            result.push(child)\n          }\n        }\n\n        dirs.sort()\n        for (const child of dirs) {\n          queue.push(dirPath + path.sep + child)\n        }\n      }\n    }\n    return result\n  }\n}"]}

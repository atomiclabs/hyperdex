{"version":3,"file":"repositoryInfo.js","sourceRoot":"","sources":["../../src/util/repositoryInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { readFile } from \"fs-extra-p\"\nimport { fromUrl, Info } from \"hosted-git-info\"\nimport * as path from \"path\"\nimport { SourceRepositoryInfo } from \"../core\"\nimport { Metadata, RepositoryInfo } from \"..\"\n\nexport function getRepositoryInfo(projectDir: string, metadata?: Metadata, devMetadata?: Metadata | null): Promise<SourceRepositoryInfo | null> {\n  return _getInfo(projectDir, (devMetadata == null ? null : devMetadata.repository) || (metadata == null ? null : metadata.repository))\n}\n\nasync function getGitUrlFromGitConfig(projectDir: string): Promise<string | null> {\n  const data = await orNullIfFileNotExist(readFile(path.join(projectDir, \".git\", \"config\"), \"utf8\"))\n  if (data == null) {\n    return null\n  }\n\n  const conf = data.split(/\\r?\\n/)\n  const i = conf.indexOf('[remote \"origin\"]')\n  if (i !== -1) {\n    let u = conf[i + 1]\n    if (!u.match(/^\\s*url =/)) {\n      u = conf[i + 2]\n    }\n\n    if (u.match(/^\\s*url =/)) {\n      return u.replace(/^\\s*url = /, \"\")\n    }\n  }\n  return null\n}\n\nasync function _getInfo(projectDir: string, repo?: RepositoryInfo | string | null): Promise<SourceRepositoryInfo | null> {\n  if (repo != null) {\n    return parseRepositoryUrl(typeof repo === \"string\" ? repo : repo.url)\n  }\n\n  const slug = process.env.TRAVIS_REPO_SLUG || process.env.APPVEYOR_REPO_NAME\n  if (slug != null) {\n    const splitted = slug.split(\"/\")\n    return {\n      user: splitted[0],\n      project: splitted[1],\n    }\n  }\n\n  const user = process.env.CIRCLE_PROJECT_USERNAME\n  const project = process.env.CIRCLE_PROJECT_REPONAME\n  if (user != null && project != null) {\n    return {\n      user,\n      project,\n    }\n  }\n\n  const url = await getGitUrlFromGitConfig(projectDir)\n  return url == null ? null : parseRepositoryUrl(url)\n}\n\nfunction parseRepositoryUrl(url: string): Info {\n  const info: any = fromUrl(url)\n  if (info != null) {\n    delete info.protocols\n    delete info.treepath\n    delete info.filetemplate\n    delete info.bugstemplate\n    delete info.gittemplate\n    delete info.tarballtemplate\n    delete info.sshtemplate\n    delete info.sshurltemplate\n    delete info.browsetemplate\n    delete info.docstemplate\n    delete info.httpstemplate\n    delete info.shortcuttemplate\n    delete info.pathtemplate\n    delete info.pathmatch\n    delete info.protocols_re\n    delete info.committish\n    delete info.default\n    delete info.opts\n  }\n  return info\n}"]}

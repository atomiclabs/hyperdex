{"version":3,"file":"yarn.js","sourceRoot":"","sources":["../../src/util/yarn.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, log, spawn } from \"builder-util\"\nimport { exists } from \"builder-util/out/fs\"\nimport { Lazy } from \"lazy-val\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { Configuration } from \"../configuration\"\nimport { Dependency } from \"./packageDependencies\"\n\nexport async function installOrRebuild(config: Configuration, appDir: string, options: RebuildOptions, forceInstall: boolean = false) {\n  const effectiveOptions = {\n    buildFromSource: config.buildDependenciesFromSource === true,\n    additionalArgs: asArray(config.npmArgs), ...options\n  }\n\n  if (forceInstall || !(await exists(path.join(appDir, \"node_modules\")))) {\n    await installDependencies(appDir, effectiveOptions)\n  }\n  else {\n    await rebuild(appDir, effectiveOptions)\n  }\n}\n\nexport interface DesktopFrameworkInfo {\n  version: string\n  useCustomDist: boolean\n}\n\nfunction getElectronGypCacheDir() {\n  return path.join(homedir(), \".electron-gyp\")\n}\n\nexport function getGypEnv(frameworkInfo: DesktopFrameworkInfo, platform: string, arch: string, buildFromSource: boolean) {\n  const common = {\n    ...process.env,\n    npm_config_arch: arch,\n    npm_config_target_arch: arch,\n    npm_config_platform: platform,\n    npm_config_build_from_source: buildFromSource,\n    // required for node-pre-gyp\n    npm_config_target_platform: platform,\n    npm_config_update_binary: true,\n    npm_config_fallback_to_build: true,\n  }\n\n  if (!frameworkInfo.useCustomDist) {\n    return common\n  }\n\n  // https://github.com/nodejs/node-gyp/issues/21\n  return {\n    ...common,\n    npm_config_disturl: \"https://atom.io/download/electron\",\n    npm_config_target: frameworkInfo.version,\n    npm_config_runtime: \"electron\",\n    npm_config_devdir: getElectronGypCacheDir(),\n  }\n}\n\nfunction installDependencies(appDir: string, options: RebuildOptions): Promise<any> {\n  const platform = options.platform || process.platform\n  const arch = options.arch || process.arch\n  const additionalArgs = options.additionalArgs\n\n  log.info({platform, arch, appDir}, `installing production dependencies`)\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const execArgs = [\"install\", \"--production\"]\n\n  if (!isYarnPath(execPath)) {\n    if (process.env.NPM_NO_BIN_LINKS === \"true\") {\n      execArgs.push(\"--no-bin-links\")\n    }\n    execArgs.push(\"--cache-min\", \"999999999\")\n  }\n\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.unshift(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  if (additionalArgs != null) {\n    execArgs.push(...additionalArgs)\n  }\n  return spawn(execPath, execArgs, {\n    cwd: appDir,\n    env: getGypEnv(options.frameworkInfo, platform, arch, options.buildFromSource === true),\n  })\n}\n\nfunction getPackageToolPath() {\n  if (process.env.FORCE_YARN === \"true\") {\n    return process.platform === \"win32\" ? \"yarn.cmd\" : \"yarn\"\n  }\n  else {\n    return process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n}\n\nfunction isYarnPath(execPath: string | null | undefined) {\n  return process.env.FORCE_YARN === \"true\" || (execPath != null && path.basename(execPath).startsWith(\"yarn\"))\n}\n\nexport interface RebuildOptions {\n  frameworkInfo: DesktopFrameworkInfo\n  productionDeps?: Lazy<Array<Dependency>>\n\n  platform?: string\n  arch?: string\n\n  buildFromSource?: boolean\n\n  additionalArgs?: Array<string> | null\n}\n\n/** @internal */\nexport async function rebuild(appDir: string, options: RebuildOptions) {\n  const nativeDeps = await BluebirdPromise.filter(await options.productionDeps!.value, it => exists(path.join(it.path, \"binding.gyp\")), {concurrency: 8})\n  if (nativeDeps.length === 0) {\n    log.info(\"no native production dependencies\")\n    return\n  }\n\n  const platform = options.platform || process.platform\n  const arch = options.arch || process.arch\n  const additionalArgs = options.additionalArgs\n\n  log.info({platform, arch}, \"rebuilding native production dependencies\")\n\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const isYarn = isYarnPath(execPath)\n  const execArgs: Array<string> = []\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.push(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  const env = getGypEnv(options.frameworkInfo, platform, arch, options.buildFromSource === true)\n  if (isYarn) {\n    execArgs.push(\"run\", \"install\")\n    if (additionalArgs != null) {\n      execArgs.push(...additionalArgs)\n    }\n    await BluebirdPromise.map(nativeDeps, dep => {\n      log.info({name: dep.name}, `rebuilding native dependency`)\n      return spawn(execPath!, execArgs, {\n        cwd: dep.path,\n        env,\n      })\n        .catch(error => {\n          if (dep.optional) {\n            log.warn({dep: dep.name}, \"cannot build optional native dep\")\n          }\n          else {\n            throw error\n          }\n        })\n    }, {concurrency: process.platform === \"win32\" ? 1 : 2})\n  }\n  else {\n    execArgs.push(\"rebuild\")\n    if (additionalArgs != null) {\n      execArgs.push(...additionalArgs)\n    }\n    execArgs.push(...nativeDeps.map(it => `${it.name}@${it.version}`))\n    await spawn(execPath, execArgs, {\n      cwd: appDir,\n      env,\n    })\n  }\n}\n"]}

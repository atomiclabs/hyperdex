{"version":3,"file":"CommonWindowsInstallerConfiguration.js","sourceRoot":"","sources":["../../src/options/CommonWindowsInstallerConfiguration.ts"],"names":[],"mappings":";;;;;;;;AAAA,AAAO,AAAE,AAAyB,AAAE,AAAe,AAAE,AAAM,AAAc;;;;;;;;;;AACzE,AAAO,AAAgB,AAAM,AAAmB,AAqDhD,AAAM;;;;;;;;;;;;6BAA8B,AAA4C,SAAE,AAAqB;AACrG,QAAM,AAAO,UAAG,AAAQ,SAAC,AAAO;AAEhC,MAAI,AAAY,eAAkB,AAAI;;AACtC,MAAI,AAAO,QAAC,AAAY,gBAAI,AAAI,QAAI,AAAO,QAAC,AAAY,iBAAK,AAAK,OAAE;AAClE,QAAI,AAAO,QAAC,AAAY,iBAAK,AAAI,MAAE;AACjC,YAAM,AAAW,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAW;;AAChD,UAAI,AAAW,eAAI,AAAI,MAAE;AACvB,cAAM,KAAI,AAAyB,AAAC,0CAAiH,AAAC;AACvJ;;AACD,AAAY,qBAAG,AAAgB,iCAAC,AAAW,AAAC;AAC7C,WACI;AACH,AAAY,qBAAI,AAAO,QAAC,AAAuB,aAAC,AAAK,MAAC,AAAQ,AAAC,UAAC,AAAG,IAAC,AAAE,AAAC,AAAE,MAAC,AAAgB,iCAAC,AAAE,AAAC,AAAC,KAAC,AAAI,KAAC,AAAI,AAAC;AAC3G;AACF;;AAED;AACE,AAAY,kBAAE,AAAO,QAAC,AAAU,eAAK,AAAI;AACzC,AAAU,gBAAE,AAAO,QAAC,AAAQ,aAAK,AAAK;AAEtC,AAAY,kBAAE,AAAe,oCAAC,AAAO,QAAC,AAAY,AAAC,AAAC,AAAC,gBAAC,AAAO,QAAC,AAAe,AAAC,AAAC,kBAAC,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAc,AAAC;AAC5H,AAAuB,6BAAE,AAAsC,uCAAC,AAAO,QAAC,AAAqB,AAAC;AAC9F,AAAyB,+BAAE,AAAO,QAAC,AAAuB,4BAAK,AAAK;AACpE,AAAY,AACb,AACH;AATS;AASR;;AAED,gDAAgD,AAAmC;AACjF,MAAI,AAAK,UAAK,AAAK,OAAE;AACnB,WAAO,AAA6B,8BAAC,AAAK;AAC3C,aACQ,AAAK,UAAK,AAAQ,UAAE;AAC3B,WAAO,AAA6B,8BAAC,AAAM;AAC5C,GAFI,MAGA;AACH,WAAO,AAA6B,8BAAC,AAAa;AACnD,AACH;AAAC,AAED,AAAM;;AAAN,IAAY,AAEX;;;AAFD,WAAY,AAA6B;AACvC,sFAAa;AAAE,+EAAM;AAAE,8EAAK,AAC9B;AAAC,GAFW,AAA6B,0EAA7B,AAA6B,gCAExC","sourcesContent":["import { InvalidConfigurationError, isEmptyOrSpaces } from \"builder-util\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { WinPackager } from \"../winPackager\"\n\nexport interface CommonWindowsInstallerConfiguration {\n  readonly oneClick?: boolean\n\n  /**\n   * Whether to install per all users (per-machine).\n   * @default false\n   */\n  readonly perMachine?: boolean\n\n  /**\n   * *one-click installer only.*  Whether to run the installed application after finish.\n   * @default true\n   */\n  readonly runAfterFinish?: boolean\n\n  /**\n   * Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).\n   * @default true\n   */\n  readonly createDesktopShortcut?: boolean | \"always\"\n\n  /**\n   * Whether to create start menu shortcut.\n   * @default true\n   */\n  readonly createStartMenuShortcut?: boolean\n\n  /**\n   * Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.\n   * @default false\n   */\n  readonly menuCategory?: boolean | string\n\n  /**\n   * The name that will be used for all shortcuts. Defaults to the application name.\n   */\n  readonly shortcutName?: string | null\n}\n\nexport interface FinalCommonWindowsInstallerOptions {\n  isAssisted: boolean\n  isPerMachine: boolean\n\n  shortcutName: string\n  menuCategory: string | null\n\n  isCreateDesktopShortcut: DesktopShortcutCreationPolicy\n  isCreateStartMenuShortcut: boolean\n}\n\nexport function getEffectiveOptions(options: CommonWindowsInstallerConfiguration, packager: WinPackager): FinalCommonWindowsInstallerOptions {\n  const appInfo = packager.appInfo\n\n  let menuCategory: string | null = null\n  if (options.menuCategory != null && options.menuCategory !== false) {\n    if (options.menuCategory === true) {\n      const companyName = packager.appInfo.companyName\n      if (companyName == null) {\n        throw new InvalidConfigurationError(`Please specify \"author\" in the application package.json â€” it is required because \"menuCategory\" is set to true.`)\n      }\n      menuCategory = sanitizeFileName(companyName)\n    }\n    else {\n      menuCategory = (options.menuCategory as string).split(/[\\/\\\\]/).map(it => sanitizeFileName(it)).join(\"\\\\\")\n    }\n  }\n\n  return {\n    isPerMachine: options.perMachine === true,\n    isAssisted: options.oneClick === false,\n\n    shortcutName: isEmptyOrSpaces(options.shortcutName) ? appInfo.productFilename : packager.expandMacro(options.shortcutName!!),\n    isCreateDesktopShortcut: convertToDesktopShortcutCreationPolicy(options.createDesktopShortcut),\n    isCreateStartMenuShortcut: options.createStartMenuShortcut !== false,\n    menuCategory,\n  }\n}\n\nfunction convertToDesktopShortcutCreationPolicy(value: boolean | undefined | string): DesktopShortcutCreationPolicy {\n  if (value === false) {\n    return DesktopShortcutCreationPolicy.NEVER\n  }\n  else if (value === \"always\") {\n    return DesktopShortcutCreationPolicy.ALWAYS\n  }\n  else {\n    return DesktopShortcutCreationPolicy.FRESH_INSTALL\n  }\n}\n\nexport enum DesktopShortcutCreationPolicy {\n  FRESH_INSTALL, ALWAYS, NEVER\n}"]}

{"version":3,"file":"SnapOptions.js","sourceRoot":"","sources":["../../src/options/SnapOptions.ts"],"names":[],"mappings":"","sourcesContent":["import { TargetSpecificOptions } from \"../core\"\nimport { CommonLinuxOptions } from \"./linuxOptions\"\n\nexport interface SnapOptions extends CommonLinuxOptions, TargetSpecificOptions {\n  /**\n   * The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.\n   * @default strict\n   */\n  readonly confinement?: \"devmode\" | \"strict\" | \"classic\" | null\n\n  /**\n   * The custom environment. Defaults to `{\"TMPDIR: \"$XDG_RUNTIME_DIR\"}`. If you set custom, it will be merged with default.\n   */\n  readonly environment?: object | null\n  // { [key: string]: string } Our scheme generator cannot validate this type\n\n  /**\n   * The 78 character long summary. Defaults to [productName](configuration.md#Configuration-productName).\n   */\n  readonly summary?: string | null\n\n  /**\n   * The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).\n   * @default stable\n   */\n  readonly grade?: \"devel\" | \"stable\" | null\n\n  /**\n   * The list of features that must be supported by the core in order for this snap to install.\n   */\n  readonly assumes?: Array<string> | string | null\n\n  /**\n   * The list of debian packages needs to be installed for building this snap.\n   */\n  readonly buildPackages?: Array<string> | null\n\n  /**\n   * The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\n   * Defaults to `[\"libasound2\", \"libgconf2-4\", \"libnotify4\", \"libnspr4\", \"libnss3\", \"libpcre3\", \"libpulse0\", \"libxss1\", \"libxtst6\"]`.\n   *\n   * If list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom package `foo` in addition to defaults.\n   */\n  readonly stagePackages?: Array<string> | null\n\n  /**\n   * The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).\n   * @default build/snap-hooks\n   */\n  readonly hooks?: string | null\n\n  /**\n   * The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\n   * Defaults to `[\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\"]`.\n   *\n   * If list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom plug `foo` in addition to defaults.\n   *\n   * Additional attributes can be specified using object instead of just name of plug:\n   * ```\n   *[\n   *  {\n   *    \"browser-sandbox\": {\n   *      \"interface\": \"browser-support\",\n   *      \"allow-sandbox\": true\n   *    },\n   *  },\n   *  \"another-simple-plug-name\"\n   *]\n   * ```\n   */\n  readonly plugs?: Array<string | PlugDescriptor> | PlugDescriptor | null\n\n  /**\n   * Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\n   * Defaults to `[\"desktop-gtk2\"\"]`.\n   *\n   * If list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom parts `foo` in addition to defaults.\n   */\n  readonly after?: Array<string> | null\n\n  /**\n   * Whether to use template snap. Defaults to `true` if `stagePackages` not specified.\n   */\n  readonly useTemplateApp?: boolean\n}\n\nexport interface PlugDescriptor {\n  [key: string]: {[key: string]: any} | null\n}\n"]}

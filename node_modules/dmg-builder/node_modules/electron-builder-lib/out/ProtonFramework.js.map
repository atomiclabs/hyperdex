{"version":3,"file":"ProtonFramework.js","sourceRoot":"","sources":["../src/ProtonFramework.ts"],"names":[],"mappings":"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","sourcesContent":["import { chmod, copyFile, emptyDir, ensureDir, writeFile } from \"fs-extra-p\"\nimport { getBin } from \"builder-util/out/binDownload\"\nimport { FileTransformer } from \"builder-util/out/fs\"\nimport { log } from \"builder-util\"\nimport { safeStringifyJson } from \"builder-util-runtime\"\nimport { Platform } from \"./core\"\nimport { NODE_MODULES_PATTERN } from \"./fileTransformer\"\nimport { Framework, AppInfo, PrepareApplicationStageDirectoryOptions } from \"./index\"\nimport * as path from \"path\"\nimport { LinuxPackager } from \"./linuxPackager\"\nimport MacPackager from \"./macPackager\"\nimport { build as buildPlist } from \"plist\"\n\nexport function createProtonFrameworkSupport(nodeVersion: string, appInfo: AppInfo): Framework {\n  return new ProtonFramework(nodeVersion === \"current\" ? process.versions.node : nodeVersion, `${appInfo.productFilename}.app`)\n}\n\nclass ProtonFramework implements Framework {\n  readonly name = \"proton\"\n  readonly isDefaultAppIconProvided = false\n\n  // noinspection JSUnusedGlobalSymbols\n  readonly isNpmRebuildRequired = false\n\n  constructor(readonly version: string, readonly distMacOsAppName: string) {\n  }\n\n  createTransformer(): FileTransformer | null {\n    const babel = require(\"babel-core\")\n    const babelOptions: any = {ast: false, sourceMaps: \"inline\"}\n    if (process.env.TEST_SET_BABEL_PRESET === \"true\") {\n      // out test dir can be located outside of electron-builder node_modules and babel cannot resolve string names of preset\n      babelOptions.presets = [\n        [require(\"babel-preset-env\"), {targets: {node: this.version}}],\n        require(\"babel-preset-stage-0\"),\n        require(\"babel-preset-react\"),\n      ]\n      babelOptions.babelrc = false\n    }\n\n    log.info({options: safeStringifyJson(babelOptions, new Set<string>([\"presets\"]))}, \"transpile source code using Babel\")\n    return file => {\n      if (!(file.endsWith(\".js\") || file.endsWith(\".jsx\")) || file.includes(NODE_MODULES_PATTERN)) {\n        return null\n      }\n\n      return new Promise((resolve, reject) => {\n        return babel.transformFile(file, babelOptions, (error: Error, result: any) => {\n          if (error == null) {\n            resolve(result.code)\n          }\n          else {\n            reject(error)\n          }\n        })\n      })\n    }\n  }\n\n  private async prepareMacosApplicationStageDirectory(packager: MacPackager, options: PrepareApplicationStageDirectoryOptions) {\n    const appContentsDir = path.join(options.appOutDir, this.distMacOsAppName, \"Contents\")\n    await ensureDir(path.join(appContentsDir, \"Resources\"))\n    await ensureDir(path.join(appContentsDir, \"MacOS\"))\n    await copyFile(path.join(await getBin(\"node\", `${this.version}-darwin-x64`, null), \"node\"), path.join(appContentsDir, \"MacOS\", \"node\"))\n\n    const appPlist: any = {}\n    await packager.applyCommonInfo(appPlist)\n    await Promise.all([\n      writeFile(path.join(appContentsDir, \"Info.plist\"), buildPlist(appPlist)),\n      writeExecutableMain(path.join(appContentsDir, \"MacOS\", appPlist.CFBundleExecutable), `#!/bin/sh\nDIR=$(dirname \"$0\")\n\"$DIR/node\" \"$DIR/../Resources/app/${options.packager.info.metadata.main || \"index.js\"}\"\n`),\n    ])\n  }\n\n  private async prepareLinuxApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions) {\n    const appOutDir = options.appOutDir\n    await copyFile(path.join(await getBin(\"node\", `${this.version}-linux-${options.arch === \"ia32\" ? \"x86\" : options.arch}`, null), \"node\"), path.join(appOutDir, \"node\"))\n    const mainPath = path.join(appOutDir, (options.packager as LinuxPackager).executableName)\n    await writeExecutableMain(mainPath, `#!/bin/sh\nDIR=$(dirname \"$0\")\n\"$DIR/node\" \"$DIR/app/${options.packager.info.metadata.main || \"index.js\"}\"\n`)\n  }\n\n  async prepareApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions) {\n    await emptyDir(options.appOutDir)\n\n    const packager = options.packager\n    if (packager.platform === Platform.MAC) {\n      await this.prepareMacosApplicationStageDirectory(packager as MacPackager, options)\n    }\n    else if (packager.platform === Platform.LINUX) {\n      await this.prepareLinuxApplicationStageDirectory(options)\n    }\n    else {\n      throw new Error(`Unsupported platform: ${packager.platform}`)\n    }\n  }\n}\n\nasync function writeExecutableMain(file: string, content: string) {\n  await writeFile(file, content, {mode: 0o755})\n  await chmod(file, 0o755)\n}"]}

{"version":3,"file":"differentialUpdateInfoBuilder.js","sourceRoot":"","sources":["../../src/targets/differentialUpdateInfoBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAG,AAAE,AAAiB,AAAE,AAAM,AAAc;;;;;;;;;;AAErD,AAAO,AAAK,AAAI,AAAM,AAAM,AAK5B,AAAM;;;;AAAC,MAAM,AAAqB,wBAAG,AAAW,AAEhD,AAAM;;;6CAA8C,AAAoB,cAAE,AAAiD;AACzH,MAAI,AAAY,gBAAI,AAAI,MAAE;AACxB,WAAO,AAAI;AACZ;;AAED,QAAM,AAAI,OAAG,AAAM,OAAC,AAAI,KAAC,AAAY,AAAC;;AACtC,MAAI,AAAI,KAAC,AAAM,UAAI,AAAC,GAAE;AACpB,WAAO,AAAI;AACZ;;AAED,QAAM,AAAQ,WAAwC,AAAE;;AACxD,OAAK,MAAM,AAAI,QAAI,AAAI,MAAE;AACvB,UAAM,AAAe,kBAAG,AAAY,aAAC,AAAI,AAAC;AAC1C,UAAM,AAAI,OAAG,AAAI,KAAC,AAAQ,SAAC,AAAe,gBAAC,AAAI,AAAC;AAChD,AAAQ,aAAC,AAAI,AAAC,0BACT,AAAe;AAClB,AAAI,YAAE,AAAI;AACV,AAAoE;AACpE,AAAI,AACE;KALS;AAMlB;;AACD;AAAQ,AAAQ,AAAC,AACnB;AADS;AACR,AAED,AAAM;;kDAAmD,AAA8B;AACrF,AAoBG;;;;;;;;;;;;;;AACH,AAAc,iBAAC,AAAQ,WAAG,AAAC,GAC3B,AAAqD;;AACrD,AAAc,iBAAC,AAAK,QAAG,AAAK,OAC5B,AAAuE;;AACvE,AAAc,iBAAC,AAAW,cAAG,AAAQ;AACrC,SAAO,AAAc,AACvB;AAAC,AAED,AAAM;;;2CAAC,AAAK,WAAyB,AAAY;AAC/C,AAAG,uBAAC,AAAI;AAAE,AAAI,YAAE,AAAG,mBAAC,AAAQ,SAAC,AAAI,AAAC,AAAC;AAA1B,OAA4B,AAA6B,AAAC;;AACnE,WAAO,AAAI,KAAC,AAAK,OAAC,MAAM,AAAiB,sCAAC,CAAC,AAAU,YAAE,AAAS,WAAE,AAAI,MAAE,AAAe,iBAAE,AAAS,AAAC,AAAC,AAAC,AACvG;AAAC,AAED,AAAM;;;;;;;;;;4CAAC,AAAK,WAAyB,AAAY,MAAE,AAAc,QAAE,AAA+B,UAAE,AAA+B;AACjI,UAAM,AAAY,AAAG,kBAAG,AAAI,OAAG,AAAqB,qBAAE;;AACtD,AAAG,uBAAC,AAAI;AAAE,AAAY,oBAAE,AAAG,mBAAC,AAAQ,SAAC,AAAY,AAAC,AAAC;AAA1C,OAA4C,AAAoB,AAAC;;AAC1E,UAAM,AAAU,aAAuB,AAAI,KAAC,AAAK,OAAC,MAAM,AAAiB,sCAAC,CAAC,AAAU,YAAE,AAAS,WAAE,AAAI,MAAE,AAAU,YAAE,AAAY,AAAC,AAAC,AAAC;AACnI,AAAQ,aAAC,AAAI,KAAC,AAAuB;AACnC,AAAI,YAAE,AAAY;AAClB,AAAgB,wBAAE,AAAgB,oBAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,AAAC,UAAG,AAAgB,mBAAG,AAAqB,qBAAE;AACjG,AAAM;AACN,AAAI,YAAE,AAAI;AACV,AAAQ;AACR,AAAU,AACX,AAAC;AAPoC;AAQtC,WAAO,AAAU,AACnB;AAAC","sourcesContent":["import { log, executeAppBuilder } from \"builder-util\"\nimport { BlockMapDataHolder, PackageFileInfo } from \"builder-util-runtime\"\nimport * as path from \"path\"\nimport { Target } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { ArchiveOptions } from \"./archive\"\n\nexport const BLOCK_MAP_FILE_SUFFIX = \".blockmap\"\n\nexport function createNsisWebDifferentialUpdateInfo(artifactPath: string, packageFiles: { [arch: string]: PackageFileInfo }) {\n  if (packageFiles == null) {\n    return null\n  }\n\n  const keys = Object.keys(packageFiles)\n  if (keys.length <= 0) {\n    return null\n  }\n\n  const packages: { [arch: string]: PackageFileInfo } = {}\n  for (const arch of keys) {\n    const packageFileInfo = packageFiles[arch]\n    const file = path.basename(packageFileInfo.path)\n    packages[arch] = {\n      ...packageFileInfo,\n      path: file,\n      // https://github.com/electron-userland/electron-builder/issues/2583\n      file,\n    } as any\n  }\n  return {packages}\n}\n\nexport function configureDifferentialAwareArchiveOptions(archiveOptions: ArchiveOptions): ArchiveOptions {\n  /*\n   * dict size 64 MB: Full: 33,744.88 KB, To download: 17,630.3 KB (52%)\n   * dict size 16 MB: Full: 33,936.84 KB, To download: 16,175.9 KB (48%)\n   * dict size  8 MB: Full: 34,187.59 KB, To download:  8,229.9 KB (24%)\n   * dict size  4 MB: Full: 34,628.73 KB, To download: 3,782.97 KB (11%)\n\n   as we can see, if file changed in one place, all block is invalidated (and update size approximately equals to dict size)\n\n   1 MB is used:\n\n   1MB:\n\n   2018/01/11 11:54:41:0045 File has 59 changed blocks\n   2018/01/11 11:54:41:0050 Full: 71,588.59 KB, To download: 1,243.39 KB (2%)\n\n   4MB:\n\n   2018/01/11 11:31:43:0440 Full: 70,303.55 KB, To download: 4,843.27 KB (7%)\n   2018/01/11 11:31:43:0435 File has 234 changed blocks\n\n   */\n  archiveOptions.dictSize = 1\n  // solid compression leads to a lot of changed blocks\n  archiveOptions.solid = false\n  // do not allow to change compression level to avoid different packages\n  archiveOptions.compression = \"normal\"\n  return archiveOptions\n}\n\nexport async function appendBlockmap(file: string): Promise<BlockMapDataHolder> {\n  log.info({file: log.filePath(file)}, \"building embedded block map\")\n  return JSON.parse(await executeAppBuilder([\"blockmap\", \"--input\", file, \"--compression\", \"deflate\"]))\n}\n\nexport async function createBlockmap(file: string, target: Target, packager: PlatformPackager<any>, safeArtifactName: string | null): Promise<BlockMapDataHolder> {\n  const blockMapFile = `${file}${BLOCK_MAP_FILE_SUFFIX}`\n  log.info({blockMapFile: log.filePath(blockMapFile)}, \"building block map\")\n  const updateInfo: BlockMapDataHolder = JSON.parse(await executeAppBuilder([\"blockmap\", \"--input\", file, \"--output\", blockMapFile]))\n  packager.info.dispatchArtifactCreated({\n    file: blockMapFile,\n    safeArtifactName: safeArtifactName == null ? null : `${safeArtifactName}${BLOCK_MAP_FILE_SUFFIX}`,\n    target,\n    arch: null,\n    packager,\n    updateInfo,\n  })\n  return updateInfo\n}"]}

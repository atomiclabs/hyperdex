{"version":3,"file":"WebInstallerTarget.js","sourceRoot":"","sources":["../../../src/targets/nsis/WebInstallerTarget.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAkB,AAAE,AAAiB,AAAE,AAA8B,AAAE,AAAM,AAA8B;;;;;;;;;;AAGpH,AAAO,AAAE,AAAU,AAAE,AAAM,AAAc;;;;;;;;;;AAGzC,AAAe,AACf,AAAM;MAA0B,2BAAQ,AAAU;AAChD,cAAY,AAAqB,UAAE,AAAc,QAAE,AAAkB,YAAE,AAA+B;AACpG,AAAK,UAAC,AAAQ,UAAE,AAAM,QAAE,AAAU,YAAE,AAAa,AAAC,AACpD;AAAC;;AAED,MAAI,AAAc;AAChB,WAAO,AAAI,AACb;AAAC;;AAEe,AAAgB,kBAAtB,AAAK,CAAkB,AAAiB,UAAE,AAAY;;;;AAC9D,AAA8B;AAC9B,YAAO,AAAU,yBAAC,AAAgC,UAAC,AAAgB,iBAAC,AAAI,KAAC,AAAI,OAAE,AAAQ,UAAE,AAAO,AAAC;AAEjG,YAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,YAAM,AAAO,UAAG,AAAI,MAAC,AAAyB;AAE9C,UAAI,AAAa,gBAAG,AAAO,QAAC,AAAa;;AACzC,UAAI,AAAa,iBAAI,AAAI,MAAE;AACzB,cAAM,AAAc,iBAAG,MAAM,AAA8B,sDAAC,AAAQ,WAAE,MAAM,AAAiB,yCAAC,AAAQ,UAAE,AAAI,MAAC,AAAO,SAAE,AAAI,MAAE,AAAK,AAAC,SAAE,AAAI,AAAC;;AACzI,YAAI,AAAc,kBAAI,AAAI,QAAI,AAAc,eAAC,AAAM,WAAK,AAAC,GAAE;AACzD,gBAAM,IAAI,AAAK,MAAC,AAAyC,AAAC;AAC3D;;AAED,AAAa,wBAAG,AAAkB,0CAAC,AAAc,eAAC,AAAC,AAAC,IAAE,AAAI,MAAE,AAAQ,AAAC;AAErE,AAAO,gBAAC,AAA4B,+BAAG,AAAI;AAC5C;;AAED,AAAO,cAAC,AAAe,kBAAG,AAAa,AACzC;;AAAC;;AAED,MAAc,AAAwB;AACpC,AAA6C;AAC7C,WAAO,AAA4C,AACrD;AAAC;;AAES,AAA2B;AACnC,UAAM,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAO;AACrC,UAAM,AAAU,aAAG,AAAO,QAAC,AAAI,KAAC,AAAW,AAAE,kBAAK,AAAO,QAAC,AAAI,AAAC,AAAC,OAAC,AAAW,AAAC,AAAC,cAAC,AAAU;AACzF,AAAO,cAAG,AAAO,QAAC,AAAI,QAAI,AAAU,cAAI,AAAO,QAAC,AAAO,OAAM,AAC/D;AAAC,AACF","sourcesContent":["import { computeDownloadUrl, getPublishConfigs, getPublishConfigsForUpdateInfo } from \"../../publish/PublishManager\"\nimport { WinPackager } from \"../../winPackager\"\nimport { NsisWebOptions } from \"./nsisOptions\"\nimport { NsisTarget } from \"./NsisTarget\"\nimport { AppPackageHelper } from \"./nsisUtil\"\n\n/** @private */\nexport class WebInstallerTarget extends NsisTarget {\n  constructor(packager: WinPackager, outDir: string, targetName: string, packageHelper: AppPackageHelper) {\n    super(packager, outDir, targetName, packageHelper)\n  }\n\n  get isWebInstaller(): boolean {\n    return true\n  }\n\n  protected async configureDefines(oneClick: boolean, defines: any): Promise<any> {\n    //noinspection ES6MissingAwait\n    await (NsisTarget.prototype as WebInstallerTarget).configureDefines.call(this, oneClick, defines)\n\n    const packager = this.packager\n    const options = this.options as NsisWebOptions\n\n    let appPackageUrl = options.appPackageUrl\n    if (appPackageUrl == null) {\n      const publishConfigs = await getPublishConfigsForUpdateInfo(packager, await getPublishConfigs(packager, this.options, null, false), null)\n      if (publishConfigs == null || publishConfigs.length === 0) {\n        throw new Error(\"Cannot compute app package download URL\")\n      }\n\n      appPackageUrl = computeDownloadUrl(publishConfigs[0], null, packager)\n\n      defines.APP_PACKAGE_URL_IS_INCOMLETE = null\n    }\n\n    defines.APP_PACKAGE_URL = appPackageUrl\n  }\n\n  protected get installerFilenamePattern(): string {\n    // tslint:disable:no-invalid-template-strings\n    return \"${productName} Web Setup ${version}.${ext}\"\n  }\n\n  protected generateGitHubInstallerName(): string {\n    const appInfo = this.packager.appInfo\n    const classifier = appInfo.name.toLowerCase() === appInfo.name ? \"web-setup\" : \"WebSetup\"\n    return `${appInfo.name}-${classifier}-${appInfo.version}.exe`\n  }\n}"]}

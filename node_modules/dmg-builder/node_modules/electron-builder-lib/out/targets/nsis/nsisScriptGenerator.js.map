{"version":3,"file":"nsisScriptGenerator.js","sourceRoot":"","sources":["../../../src/targets/nsis/nsisScriptGenerator.ts"],"names":[],"mappings":";;;;;;;;AAAA;AACmB,SAAK,QAAkB,AAAE,AA+C5C;AAAC;;AA7CC,AAAa,gBAAC,AAAY;AACxB,AAAI,SAAC,AAAK,MAAC,AAAI,AAAC,wBAAmB,AAAI,IAAG,AAAC,AAC7C;AAAC;;AAED,AAAY,eAAC,AAAkB,YAAE,AAAW;AAC1C,AAAI,SAAC,AAAK,MAAC,AAAI,AAAC,uBAAkB,AAAU,eAAK,AAAG,GAAG,AAAC,AAC1D;AAAC;;AAED,AAAO,UAAC,AAAY;AAClB,AAAI,SAAC,AAAK,MAAC,AAAI,AAAC,kBAAa,AAAI,IAAG,AAAC,AACvC;AAAC;;AAED,AAAK,QAAC,AAAY,MAAE,AAA0C;AAC5D,AAAI,SAAC,AAAK,MAAC,AAAI,AACb,eAAU,AAAI,IAAE,AAChB,SAAK,CAAC,AAAK,MAAC,AAAO,QAAC,AAAK,AAAC,AAAC,AAAC,SAAC,AAAK,AAAC,AAAC,QAAE,AAA6B,MAAC,AAAK,AAAC,OAAC,AAAI,KAAC,AAAM,AAAC,OAAE,AACzF,IAAa,AACd,AACH;AAAC;;AAED,AAAI,OAAC,AAAyB,YAAE,AAAY;AAC1C,AAAI,SAAC,AAAK,MAAC,AAAI,AAAC,YAAO,AAAU,cAAI,AAAI,AAAC,AAAC,OAAC,AAAE,AAAC,AAAC,AAAC,iBAAY,AAAU,UAAG,QAAK,AAAI,IAAG,AAAC,AACzF;AAAC;;AAED,AAAW,cAAC,AAAY,MAAE,AAAkB;AAC1C,AAAI,SAAC,AAAK,MAAC,AAAI,AAAC,qBAAgB,AAAI,QAAI,AAAU,UAAE,AAAC,AACvD;AAAC,IAED,AAAiB;;;AACjB,AAAK,QAAC,AAAoB;AACxB,SAAK,MAAM,AAAQ,YAAI,AAAK,OAAE;AAC5B,YAAM,AAAY,eAAG,AAAI,OAAG,AAAQ,SAAC,AAAC,AAAC,GAAC,AAAW,AAAE,gBAAG,AAAQ,SAAC,AAAS,UAAC,AAAC,AAAC,GAC1E,AAAO,QAAC,AAAc,gBAAE,CAAC,AAAC,GAAE,AAAE,AAAE,AAAE,OAAC,AAAE,GAAC,AAAW,AAAE,AAAC;AACvD,AAAI,WAAC,AAAK,MAAC,AAAI,AAAC,gBAAW,AAAY;oCACT,AAAQ;;;UAGlC,AAAY,qBAAS,AAAY,YAC1C,AAAC;;AACG,AACH;AAAC;;AAED,AAAK;AACH,WAAO,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAI,AAAC,QAAG,AAAI,AACrC;AAAC,AACF","sourcesContent":["export class NsisScriptGenerator {\n  private readonly lines: Array<string> = []\n\n  addIncludeDir(file: string) {\n    this.lines.push(`!addincludedir \"${file}\"`)\n  }\n\n  addPluginDir(pluginArch: string, dir: string) {\n    this.lines.push(`!addplugindir /${pluginArch} \"${dir}\"`)\n  }\n\n  include(file: string) {\n    this.lines.push(`!include \"${file}\"`)\n  }\n\n  macro(name: string, lines: Array<string> | NsisScriptGenerator) {\n    this.lines.push(\n      `!macro ${name}`,\n      `  ${(Array.isArray(lines) ? lines : (lines as NsisScriptGenerator).lines).join(\"\\n  \")}`,\n      `!macroend\\n`\n    )\n  }\n\n  file(outputName: string | null, file: string) {\n    this.lines.push(`File${outputName == null ? \"\" : ` \"/oname=${outputName}\"`} \"${file}\"`)\n  }\n\n  insertMacro(name: string, parameters: string) {\n    this.lines.push(`!insertmacro ${name} ${parameters}`)\n  }\n\n  // without -- !!!\n  flags(flags: Array<string>) {\n    for (const flagName of flags) {\n      const variableName = \"is\" + flagName[0].toUpperCase() + flagName.substring(1)\n        .replace(/[\\-]+(\\w|$)/g, (m, p1) => p1.toUpperCase())\n      this.lines.push(`!macro _${variableName} _a _b _t _f\n  $\\{StdUtils.TestParameter} $R9 \"${flagName}\"\n  StrCmp \"$R9\" \"true\" \\`$\\{_t}\\` \\`$\\{_f}\\`\n!macroend\n!define ${variableName} \\`\"\" ${variableName} \"\"\\`\n`)\n    }\n  }\n\n  build() {\n    return this.lines.join(\"\\n\") + \"\\n\"\n  }\n}"]}

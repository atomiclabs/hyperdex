{"version":3,"file":"nsisLang.js","sourceRoot":"","sources":["../../../src/targets/nsis/nsisLang.ts"],"names":[],"mappings":"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","sourcesContent":["import { asArray } from \"builder-util\"\nimport { bundledLanguages, langIdToName, lcid, toLangWithRegion } from \"builder-util/out/langs\"\nimport _debug from \"debug\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { PlatformPackager } from \"../../platformPackager\"\nimport { NsisOptions } from \"./nsisOptions\"\nimport { NsisScriptGenerator } from \"./nsisScriptGenerator\"\nimport { nsisTemplatesDir } from \"./nsisUtil\"\n\nconst debug = _debug(\"electron-builder:nsis\")\n\nexport class LangConfigurator {\n  readonly isMultiLang: boolean\n  readonly langs: Array<string>\n\n  constructor(options: NsisOptions) {\n    const rawList = options.installerLanguages\n\n    if (options.unicode === false || rawList === null || (Array.isArray(rawList) && rawList.length === 0)) {\n      this.isMultiLang = false\n    }\n    else {\n      this.isMultiLang = options.multiLanguageInstaller !== false\n    }\n\n    if (this.isMultiLang) {\n      this.langs = rawList == null ? bundledLanguages.slice() : asArray(rawList)\n        .map(it => toLangWithRegion(it.replace(\"-\", \"_\")))\n    }\n    else {\n      this.langs = [\"en_US\"]\n    }\n  }\n}\n\nexport function createAddLangsMacro(scriptGenerator: NsisScriptGenerator, langConfigurator: LangConfigurator) {\n  const result: Array<string> = []\n  for (const langWithRegion of langConfigurator.langs) {\n    let name: string\n    if (langWithRegion === \"zh_CN\") {\n      name = \"SimpChinese\"\n    }\n    else if (langWithRegion === \"zh_TW\") {\n      name = \"TradChinese\"\n    }\n    else if (langWithRegion === \"nb_NO\") {\n      name = \"Norwegian\"\n    }\n    else if (langWithRegion === \"pt_BR\") {\n      name = \"PortugueseBR\"\n    }\n    else {\n      const lang = langWithRegion.substring(0, langWithRegion.indexOf(\"_\"))\n      name = (langIdToName as any)[lang]\n      if (name == null) {\n        throw new Error(`Language name is unknown for ${lang}`)\n      }\n\n      if (name === \"Spanish\") {\n        name = \"SpanishInternational\"\n      }\n    }\n    result.push(`!insertmacro MUI_LANGUAGE \"${name}\"`)\n  }\n\n  scriptGenerator.macro(\"addLangs\", result)\n}\n\nasync function writeCustomLangFile(data: string, packager: PlatformPackager<any>) {\n  const file = await packager.getTempFile(\"messages.nsh\")\n  await outputFile(file, data)\n  return file\n}\n\nexport async function addCustomMessageFileInclude(input: string, packager: PlatformPackager<any>, scriptGenerator: NsisScriptGenerator, langConfigurator: LangConfigurator) {\n  const data = safeLoad(await readFile(path.join(nsisTemplatesDir, input), \"utf-8\"))\n  const instructions = computeCustomMessageTranslations(data, langConfigurator).join(\"\\n\")\n  debug(instructions)\n  scriptGenerator.include(await writeCustomLangFile(instructions, packager))\n}\n\nfunction computeCustomMessageTranslations(messages: any, langConfigurator: LangConfigurator): Array<string> {\n  const result: Array<string> = []\n  const includedLangs = new Set(langConfigurator.langs)\n  for (const messageId of Object.keys(messages)) {\n    const langToTranslations = messages[messageId]\n    const unspecifiedLangs = new Set(langConfigurator.langs)\n    for (const lang of Object.keys(langToTranslations)) {\n      const langWithRegion = toLangWithRegion(lang)\n\n      if (!includedLangs.has(langWithRegion)) {\n        continue\n      }\n\n      const value = langToTranslations[lang]\n      if (value == null) {\n        throw new Error(`${messageId} not specified for ${lang}`)\n      }\n\n      result.push(`LangString ${messageId} ${lcid[langWithRegion]} \"${value.replace(/\\n/g, \"$\\\\r$\\\\n\")}\"`)\n      unspecifiedLangs.delete(langWithRegion)\n    }\n\n    if (langConfigurator.isMultiLang) {\n      const defaultTranslation = langToTranslations.en.replace(/\\n/g, \"$\\\\r$\\\\n\")\n      for (const langWithRegion of unspecifiedLangs) {\n        result.push(`LangString ${messageId} ${lcid[langWithRegion]} \"${defaultTranslation}\"`)\n      }\n    }\n  }\n  return result\n}"]}

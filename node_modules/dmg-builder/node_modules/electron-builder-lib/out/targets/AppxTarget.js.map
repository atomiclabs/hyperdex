{"version":3,"file":"AppxTarget.js","sourceRoot":"","sources":["../../src/targets/AppxTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, InvalidConfigurationError, log, deepAssign } from \"builder-util\"\nimport { copyOrLinkFile, walk } from \"builder-util/out/fs\"\nimport { emptyDir, readdir, readFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppXOptions } from \"../\"\nimport { Target } from \"../core\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { VmManager } from \"../vm/vm\"\nimport { getSignVendorPath, isOldWin6 } from \"../windowsCodeSign\"\nimport { WinPackager } from \"../winPackager\"\nimport { createStageDir } from \"./targetUtil\"\n\nconst APPX_ASSETS_DIR_NAME = \"appx\"\n\nconst vendorAssetsForDefaultAssets: { [key: string]: string; } = {\n  \"StoreLogo.png\": \"SampleAppx.50x50.png\",\n  \"Square150x150Logo.png\": \"SampleAppx.150x150.png\",\n  \"Square44x44Logo.png\": \"SampleAppx.44x44.png\",\n  \"Wide310x150Logo.png\": \"SampleAppx.310x150.png\",\n}\n\nconst DEFAULT_RESOURCE_LANG = \"en-US\"\n\nexport default class AppXTarget extends Target {\n  readonly options: AppXOptions = deepAssign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"appx\")\n\n    if (process.platform !== \"darwin\" && (process.platform !== \"win32\" || isOldWin6())) {\n      throw new Error(\"AppX is supported only on Windows 10 or Windows Server 2012 R2 (version number 6.3+)\")\n    }\n  }\n\n  // https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool#mapping-files\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"appx\", arch)\n    const artifactPath = path.join(this.outDir, artifactName)\n    this.logBuilding(\"AppX\", artifactPath, arch)\n\n    const vendorPath = await getSignVendorPath()\n    const vm = await packager.vm.value\n\n    const stageDir = await createStageDir(this, packager, arch)\n\n    const mappingFile = stageDir.getTempFile(\"mapping.txt\")\n    const makeAppXArgs = [\"pack\", \"/o\" /* overwrite the output file if it exists */,\n      \"/f\", vm.toVmFile(mappingFile),\n      \"/p\", vm.toVmFile(artifactPath),\n    ]\n    if (packager.compression === \"store\") {\n      makeAppXArgs.push(\"/nc\")\n    }\n\n    const mappingList: Array<Array<string>> = []\n    mappingList.push(await BluebirdPromise.map(walk(appOutDir), file => {\n      let appxPath = file.substring(appOutDir.length + 1)\n      if (path.sep !== \"\\\\\") {\n        appxPath = appxPath.replace(/\\//g, \"\\\\\")\n      }\n      return `\"${vm.toVmFile(file)}\" \"app\\\\${appxPath}\"`\n    }))\n\n    const userAssetDir = await this.packager.getResource(undefined, APPX_ASSETS_DIR_NAME)\n    const assetInfo = await AppXTarget.computeUserAssets(vm, vendorPath, userAssetDir)\n    const userAssets = assetInfo.userAssets\n\n    const manifestFile = stageDir.getTempFile(\"AppxManifest.xml\")\n    await this.writeManifest(getTemplatePath(\"appx\"), manifestFile, arch, await this.computePublisherName(), userAssets)\n    mappingList.push(assetInfo.mappings)\n    mappingList.push([`\"${vm.toVmFile(manifestFile)}\" \"AppxManifest.xml\"`])\n\n    if (isScaledAssetsProvided(userAssets)) {\n      const outFile = vm.toVmFile(stageDir.getTempFile(\"resources.pri\"))\n      const makePriPath = vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makepri.exe\"))\n\n      const assetRoot = stageDir.getTempFile(\"appx/assets\")\n      await emptyDir(assetRoot)\n      await BluebirdPromise.map(assetInfo.allAssets, it => copyOrLinkFile(it, path.join(assetRoot, path.basename(it))))\n\n      await vm.exec(makePriPath, [\"new\",\n        \"/Overwrite\",\n        \"/Manifest\", vm.toVmFile(manifestFile),\n        \"/ProjectRoot\", vm.toVmFile(path.dirname(assetRoot)),\n        \"/ConfigXml\", vm.toVmFile(path.join(getTemplatePath(\"appx\"), \"priconfig.xml\")),\n        \"/OutputFile\", outFile,\n      ])\n\n      // in addition to resources.pri, resources.scale-140.pri and other such files will be generated\n      for (const resourceFile of (await readdir(stageDir.dir)).filter(it => it.startsWith(\"resources.\")).sort()) {\n        mappingList.push([`\"${vm.toVmFile(stageDir.getTempFile(resourceFile))}\" \"${resourceFile}\"`])\n      }\n      makeAppXArgs.push(\"/l\")\n    }\n\n    let mapping = \"[Files]\"\n    for (const list of mappingList) {\n      mapping += \"\\r\\n\" + list.join(\"\\r\\n\")\n    }\n    await writeFile(mappingFile, mapping)\n    packager.debugLogger.add(\"appx.mapping\", mapping)\n\n    if (this.options.makeappxArgs != null) {\n      makeAppXArgs.push(...this.options.makeappxArgs)\n    }\n    await vm.exec(vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makeappx.exe\")), makeAppXArgs)\n    await packager.sign(artifactPath)\n\n    await stageDir.cleanup()\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      packager,\n      arch,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"appx\"),\n      target: this,\n      isWriteUpdateInfo: this.options.electronUpdaterAware,\n    })\n  }\n\n  private static async computeUserAssets(vm: VmManager, vendorPath: string, userAssetDir: string | null) {\n    const mappings: Array<string> = []\n    let userAssets: Array<string>\n    const allAssets: Array<string> = []\n    if (userAssetDir == null) {\n      userAssets = []\n    }\n    else {\n      userAssets = (await readdir(userAssetDir)).filter(it => !it.startsWith(\".\") && !it.endsWith(\".db\") && it.includes(\".\"))\n      for (const name of userAssets) {\n        mappings.push(`\"${vm.toVmFile(userAssetDir)}${vm.pathSep}${name}\" \"assets\\\\${name}\"`)\n        allAssets.push(path.join(userAssetDir, name))\n      }\n    }\n\n    for (const defaultAsset of Object.keys(vendorAssetsForDefaultAssets)) {\n      if (userAssets.length === 0 || !isDefaultAssetIncluded(userAssets, defaultAsset)) {\n        const file = path.join(vendorPath, \"appxAssets\", vendorAssetsForDefaultAssets[defaultAsset])\n        mappings.push(`\"${vm.toVmFile(file)}\" \"assets\\\\${defaultAsset}\"`)\n        allAssets.push(file)\n      }\n    }\n\n    // we do not use process.arch to build path to tools, because even if you are on x64, ia32 appx tool must be used if you build appx for ia32\n    return {userAssets, mappings, allAssets}\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/2108#issuecomment-333200711\n  private async computePublisherName() {\n    if (await this.packager.cscInfo.value == null) {\n      log.info({reason: \"Windows Store only build\"}, \"AppX is not signed\")\n      return this.options.publisher || \"CN=ms\"\n    }\n\n    const publisher = await this.packager.computedPublisherSubjectOnWindowsOnly.value\n    if (!publisher) {\n      throw new Error(\"Internal error: cannot compute subject using certificate info\")\n    }\n    return publisher\n  }\n\n  private async writeManifest(templatePath: string, outFile: string, arch: Arch, publisher: string, userAssets: Array<string>) {\n    const appInfo = this.packager.appInfo\n    const options = this.options\n    const manifest = (await readFile(path.join(templatePath, \"appxmanifest.xml\"), \"utf8\"))\n      .replace(/\\$\\{([a-zA-Z0-9]+)\\}/g, (match, p1): string => {\n        switch (p1) {\n          case \"publisher\":\n            return publisher\n\n          case \"publisherDisplayName\":\n            const name = options.publisherDisplayName || appInfo.companyName\n            if (name == null) {\n              throw new InvalidConfigurationError(`Please specify \"author\" in the application package.json — it is required because \"appx.publisherDisplayName\" is not set.`)\n            }\n            return name\n\n          case \"version\":\n            return appInfo.versionInWeirdWindowsForm\n\n          case \"applicationId\":\n            const result = options.applicationId || options.identityName || appInfo.name\n            if (!isNaN(parseInt(result[0], 10))) {\n              let message = `AppX Application.Id can’t start with numbers: \"${result}\"`\n              if (options.applicationId == null) {\n                message += `\\nPlease set appx.applicationId (or correct appx.identityName or name)`\n              }\n              throw new InvalidConfigurationError(message)\n            }\n            return result\n\n          case \"identityName\":\n            return options.identityName  || appInfo.name\n\n          case \"executable\":\n            return `app\\\\${appInfo.productFilename}.exe`\n\n          case \"displayName\":\n            return options.displayName || appInfo.productName\n\n          case \"description\":\n            return appInfo.description || appInfo.productName\n\n          case \"backgroundColor\":\n            return options.backgroundColor || \"#464646\"\n\n          case \"logo\":\n            return \"assets\\\\StoreLogo.png\"\n\n          case \"square150x150Logo\":\n            return \"assets\\\\Square150x150Logo.png\"\n\n          case \"square44x44Logo\":\n            return \"assets\\\\Square44x44Logo.png\"\n\n          case \"lockScreen\":\n            return lockScreenTag(userAssets)\n\n          case \"defaultTile\":\n            return defaultTileTag(userAssets)\n\n          case \"splashScreen\":\n            return splashScreenTag(userAssets)\n\n          case \"arch\":\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\n\n          case \"resourceLanguages\":\n            return resourceLanguageTag(asArray(options.languages))\n\n          default:\n            throw new Error(`Macro ${p1} is not defined`)\n        }\n      })\n    await writeFile(outFile, manifest)\n  }\n}\n\n// get the resource - language tag, see https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest\nfunction resourceLanguageTag(userLanguages: Array<string> | null | undefined): string {\n  if (userLanguages == null || userLanguages.length === 0) {\n    userLanguages = [DEFAULT_RESOURCE_LANG]\n  }\n  return userLanguages.map(it => `<Resource Language=\"${it.replace(/_/g, \"-\")}\" />`).join(\"\\n\")\n}\n\nfunction lockScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"BadgeLogo.png\")) {\n    return '<uap:LockScreen Notification=\"badgeAndTileText\" BadgeLogo=\"assets\\\\BadgeLogo.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction defaultTileTag(userAssets: Array<string>): string {\n  const defaultTiles: Array<string> = [\"<uap:DefaultTile\", 'Wide310x150Logo=\"assets\\\\Wide310x150Logo.png\"']\n\n  if (isDefaultAssetIncluded(userAssets, \"LargeTile.png\")) {\n    defaultTiles.push('Square310x310Logo=\"assets\\\\LargeTile.png\"')\n  }\n  if (isDefaultAssetIncluded(userAssets, \"SmallTile.png\")) {\n    defaultTiles.push('Square71x71Logo=\"assets\\\\SmallTile.png\"')\n  }\n\n  defaultTiles.push(\"/>\")\n  return defaultTiles.join(\" \")\n}\n\nfunction splashScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"SplashScreen.png\")) {\n    return '<uap:SplashScreen Image=\"assets\\\\SplashScreen.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction isDefaultAssetIncluded(userAssets: Array<string>, defaultAsset: string) {\n  const defaultAssetName = defaultAsset.substring(0, defaultAsset.indexOf(\".\"))\n  return userAssets.some(it => it.includes(defaultAssetName))\n}\n\nfunction isScaledAssetsProvided(userAssets: Array<string>) {\n  return userAssets.some(it => it.includes(\".scale-\") || it.includes(\".targetsize-\"))\n}"]}

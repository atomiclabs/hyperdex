{"version":3,"file":"macPackager.js","sourceRoot":"","sources":["../src/macPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepAssign, Arch, AsyncTaskManager, exec, InvalidConfigurationError, log, use } from \"builder-util\"\nimport { signAsync, SignOptions } from \"electron-osx-sign\"\nimport { ensureDir } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { AppInfo } from \"./appInfo\"\nimport { appleCertificatePrefixes, CertType, CodeSigningInfo, createKeychain, findIdentity, Identity, isSignAllowed, reportError } from \"./codeSign\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { MacConfiguration, MasConfiguration } from \"./options/macOptions\"\nimport { Packager } from \"./packager\"\nimport { chooseNotNull, PlatformPackager } from \"./platformPackager\"\nimport { ArchiveTarget } from \"./targets/ArchiveTarget\"\nimport { PkgTarget, prepareProductBuildArgs } from \"./targets/pkg\"\nimport { createCommonTarget, NoOpTarget } from \"./targets/targetFactory\"\n\nexport default class MacPackager extends PlatformPackager<MacConfiguration> {\n  readonly codeSigningInfo = new Lazy<CodeSigningInfo>(() => {\n    const cscLink = this.getCscLink()\n    if (cscLink == null || process.platform !== \"darwin\") {\n      return Promise.resolve({keychainName: process.env.CSC_KEYCHAIN || null})\n    }\n\n    return createKeychain({\n      tmpDir: this.info.tempDirManager,\n      cscLink,\n      cscKeyPassword: this.getCscPassword(),\n      cscILink: chooseNotNull(this.platformSpecificBuildOptions.cscInstallerLink, process.env.CSC_INSTALLER_LINK),\n      cscIKeyPassword: chooseNotNull(this.platformSpecificBuildOptions.cscInstallerKeyPassword, process.env.CSC_INSTALLER_KEY_PASSWORD),\n      currentDir: this.projectDir\n    })\n  })\n\n  private _iconPath = new Lazy(() => this.getOrConvertIcon(\"icns\"))\n\n  constructor(info: Packager) {\n    super(info, Platform.MAC)\n  }\n\n  get defaultTarget(): Array<string> {\n    const electronUpdaterCompatibility = this.platformSpecificBuildOptions.electronUpdaterCompatibility\n    return (electronUpdaterCompatibility == null || semver.satisfies(\"2.16.0\", electronUpdaterCompatibility)) ? [\"zip\", \"dmg\"] : [\"dmg\"]\n  }\n\n  protected prepareAppInfo(appInfo: AppInfo): AppInfo {\n    return new AppInfo(this.info, this.platformSpecificBuildOptions.bundleVersion)\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return this._iconPath.value\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    for (const name of targets) {\n      switch (name) {\n        case DIR_TARGET:\n          break\n\n        case \"dmg\":\n          const { DmgTarget } = require(\"dmg-builder\")\n          mapper(name, outDir => new DmgTarget(this, outDir))\n          break\n\n        case \"zip\":\n          // https://github.com/electron-userland/electron-builder/issues/2313\n          mapper(name, outDir => new ArchiveTarget(name, outDir, this, true))\n          break\n\n        case \"pkg\":\n          mapper(name, outDir => new PkgTarget(this, outDir))\n          break\n\n        default:\n          mapper(name, outDir => name === \"mas\" || name === \"mas-dev\" ? new NoOpTarget(name) : createCommonTarget(name, outDir, this))\n          break\n      }\n    }\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    let nonMasPromise: Promise<any> | null = null\n\n    const hasMas = targets.length !== 0 && targets.some(it => it.name === \"mas\" || it.name === \"mas-dev\")\n    const prepackaged = this.packagerOptions.prepackaged\n\n    if (!hasMas || targets.length > 1) {\n      const appPath = prepackaged == null ? path.join(this.computeAppOutDir(outDir, arch), `${this.appInfo.productFilename}.app`) : prepackaged\n      nonMasPromise = (prepackaged ? Promise.resolve() : this.doPack(outDir, path.dirname(appPath), this.platform.nodeName, arch, this.platformSpecificBuildOptions, targets))\n        .then(() => this.sign(appPath, null, null))\n        .then(() => this.packageInDistributableFormat(appPath, Arch.x64, targets, taskManager))\n    }\n\n    for (const target of targets) {\n      const targetName = target.name\n      if (!(targetName === \"mas\" || targetName === \"mas-dev\")) {\n        continue\n      }\n\n      const masBuildOptions = deepAssign({}, this.platformSpecificBuildOptions, (this.config as any).mas)\n      if (targetName === \"mas-dev\") {\n        deepAssign(masBuildOptions, (this.config as any)[targetName], {\n          type: \"development\",\n        })\n      }\n\n      const targetOutDir = path.join(outDir, targetName)\n      if (prepackaged == null) {\n        await this.doPack(outDir, targetOutDir, \"mas\", arch, masBuildOptions, [target])\n        await this.sign(path.join(targetOutDir, `${this.appInfo.productFilename}.app`), targetOutDir, masBuildOptions)\n      }\n      else {\n        await this.sign(prepackaged, targetOutDir, masBuildOptions)\n      }\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appPath: string, outDir: string | null, masOptions: MasConfiguration | null): Promise<void> {\n    if (!isSignAllowed()) {\n      return\n    }\n\n    const isMas = masOptions != null\n    const macOptions = this.platformSpecificBuildOptions\n    const qualifier = (isMas ? masOptions!.identity : null) || macOptions.identity\n\n    if (!isMas && qualifier === null) {\n      if (this.forceCodeSigning) {\n        throw new InvalidConfigurationError(\"identity explicitly is set to null, but forceCodeSigning is set to true\")\n      }\n      log.info({reason: \"identity explicitly is set to null\"}, \"skipped macOS code signing\")\n      return\n    }\n\n    const keychainName = (await this.codeSigningInfo.value).keychainName\n    const explicitType = isMas ? masOptions!.type : macOptions.type\n    const type = explicitType || \"distribution\"\n    const isDevelopment = type === \"development\"\n    const certificateType = getCertificateType(isMas, isDevelopment)\n    let identity = await findIdentity(certificateType, qualifier, keychainName)\n    if (identity == null) {\n      if (!isMas && !isDevelopment && explicitType !== \"distribution\") {\n        identity = await findIdentity(\"Mac Developer\", qualifier, keychainName)\n        if (identity != null) {\n          log.warn(\"Mac Developer is used to sign app — it is only for development and testing, not for production\")\n        }\n      }\n\n      if (identity == null) {\n        await reportError(isMas, certificateType, qualifier, keychainName, this.forceCodeSigning)\n        return\n      }\n    }\n\n    const signOptions: any = {\n      \"identity-validation\": false,\n      // https://github.com/electron-userland/electron-builder/issues/1699\n      // kext are signed by the chipset manufacturers. You need a special certificate (only available on request) from Apple to be able to sign kext.\n      ignore: (file: string) => {\n        return file.endsWith(\".kext\") || file.startsWith(\"/Contents/PlugIns\", appPath.length) ||\n          // https://github.com/electron-userland/electron-builder/issues/2010\n          file.includes(\"/node_modules/puppeteer/.local-chromium\")\n      },\n      identity: identity!,\n      type,\n      platform: isMas ? \"mas\" : \"darwin\",\n      version: this.config.electronVersion,\n      app: appPath,\n      keychain: keychainName || undefined,\n      binaries: (isMas && masOptions != null ? masOptions.binaries : macOptions.binaries) || undefined,\n      requirements: isMas || macOptions.requirements == null ? undefined : await this.getResource(macOptions.requirements),\n      \"gatekeeper-assess\": appleCertificatePrefixes.find(it => identity!.name.startsWith(it)) != null\n    }\n\n    await this.adjustSignOptions(signOptions, masOptions)\n    log.info({\n      file: log.filePath(appPath),\n      identityName: identity.name,\n      identityHash: identity.hash,\n      provisioningProfile: signOptions[\"provisioning-profile\"] || \"none\",\n    }, \"signing\")\n    await this.doSign(signOptions)\n\n    // https://github.com/electron-userland/electron-builder/issues/1196#issuecomment-312310209\n    if (masOptions != null && !isDevelopment) {\n      const certType = isDevelopment ? \"Mac Developer\" : \"3rd Party Mac Developer Installer\"\n      const masInstallerIdentity = await findIdentity(certType, masOptions.identity, keychainName)\n      if (masInstallerIdentity == null) {\n        throw new InvalidConfigurationError(`Cannot find valid \"${certType}\" identity to sign MAS installer, please see https://electron.build/code-signing`)\n      }\n\n      const artifactName = this.expandArtifactNamePattern(masOptions, \"pkg\")\n      const artifactPath = path.join(outDir!, artifactName)\n      await this.doFlat(appPath, artifactPath, masInstallerIdentity, keychainName)\n      this.dispatchArtifactCreated(artifactPath, null, Arch.x64, this.computeSafeArtifactName(artifactName, \"pkg\"))\n    }\n  }\n\n  private async adjustSignOptions(signOptions: any, masOptions: MasConfiguration | null) {\n    const resourceList = await this.resourceList\n    if (resourceList.includes(`entitlements.osx.plist`)) {\n      throw new InvalidConfigurationError(\"entitlements.osx.plist is deprecated name, please use entitlements.mac.plist\")\n    }\n    if (resourceList.includes(`entitlements.osx.inherit.plist`)) {\n      throw new InvalidConfigurationError(\"entitlements.osx.inherit.plist is deprecated name, please use entitlements.mac.inherit.plist\")\n    }\n\n    const customSignOptions = masOptions || this.platformSpecificBuildOptions\n    const entitlementsSuffix = masOptions == null ? \"mac\" : \"mas\"\n    if (customSignOptions.entitlements == null) {\n      const p = `entitlements.${entitlementsSuffix}.plist`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.info.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n\n    if (customSignOptions.entitlementsInherit == null) {\n      const p = `entitlements.${entitlementsSuffix}.inherit.plist`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.info.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n\n    if (customSignOptions.provisioningProfile != null) {\n      signOptions[\"provisioning-profile\"] = customSignOptions.provisioningProfile\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return signAsync(opts)\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doFlat(appPath: string, outFile: string, identity: Identity, keychain: string | null | undefined): Promise<any> {\n    // productbuild doesn't created directory for out file\n    await ensureDir(path.dirname(outFile))\n\n    const args = prepareProductBuildArgs(identity, keychain)\n    args.push(\"--component\", appPath, \"/Applications\")\n    args.push(outFile)\n    return await exec(\"productbuild\", args)\n  }\n\n  public getElectronSrcDir(dist: string) {\n    return path.resolve(this.projectDir, dist, this.info.framework.distMacOsAppName)\n  }\n\n  public getElectronDestinationDir(appOutDir: string) {\n    return path.join(appOutDir, this.info.framework.distMacOsAppName)\n  }\n\n  // todo fileAssociations\n  async applyCommonInfo(appPlist: any) {\n    const appInfo = this.appInfo\n    const appFilename = appInfo.productFilename\n\n    // https://github.com/electron-userland/electron-builder/issues/1278\n    appPlist.CFBundleExecutable = appFilename.endsWith(\" Helper\") ? appFilename.substring(0, appFilename.length - \" Helper\".length) : appFilename\n\n    const icon = await this.getIconPath()\n    if (icon != null) {\n      appPlist.CFBundleIconFile = `${appFilename}.icns`\n    }\n    appPlist.CFBundleName = appInfo.productName\n    appPlist.CFBundleDisplayName = appInfo.productName\n\n    const minimumSystemVersion = this.platformSpecificBuildOptions.minimumSystemVersion\n    if (minimumSystemVersion != null) {\n      appPlist.LSMinimumSystemVersion = minimumSystemVersion\n    }\n\n    appPlist.CFBundleIdentifier = appInfo.macBundleIdentifier\n\n    appPlist.CFBundleShortVersionString = this.platformSpecificBuildOptions.bundleShortVersion || appInfo.version\n    appPlist.CFBundleVersion = appInfo.buildVersion\n\n    use(this.platformSpecificBuildOptions.category || (this.config as any).category, it => appPlist.LSApplicationCategoryType = it)\n    appPlist.NSHumanReadableCopyright = appInfo.copyright\n  }\n}\n\nfunction getCertificateType(isMas: boolean, isDevelopment: boolean): CertType {\n  if (isDevelopment) {\n    return \"Mac Developer\"\n  }\n  return isMas ? \"3rd Party Mac Developer Application\" : \"Developer ID Application\"\n}"]}

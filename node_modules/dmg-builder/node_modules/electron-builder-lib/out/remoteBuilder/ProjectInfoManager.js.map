{"version":3,"file":"ProjectInfoManager.js","sourceRoot":"","sources":["../../src/remoteBuilder/ProjectInfoManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAU,AAAE,AAAM,AAAY;;;;;;;;;;AACvC,AAAO,AAAE,AAAI,AAAE,AAAM,AAAU;;;;;;;;;;AAC/B,AAAO,AAAK,AAAI,AAAM,AAAM,AAG5B,AAAM;;;;;AAGJ,cAAqB,AAAkB;AAAlB,SAAQ,WAAR,AAAQ,AAAU;AAF9B,SAAQ,WAAG,KAAI,AAAI,iBAAC,AAAG,AAAE,MAAC,AAAI,KAAC,AAA4B,AAAE,AAAC,AAGvE;AAAC;;AAEa,AAA4B,8BAAlC,AAAK;;;;AACX,YAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,YAAM,AAAO,UAAG,eAAe,AAAc,eAAC,AAAa;AAAE,AAAM,gBAAE,AAAuB,AAAC,AAAC;AAAlC,OAAtC,AAAQ,GAC9B,AAA+D;;AAC/D,YAAM,AAAI;AACR,AAAQ,kBAAE,AAAQ,SAAC,AAAQ;AAC3B,AAAa,uBAAE,AAAQ,SAAC,AAAM;AAC9B,AAAc,wBAAE,MAAM,AAAQ,SAAC,AAAc;AAC7C,AAAoB,8BAAE,AAAI,KAAC,AAAQ,SAAC,AAAQ,SAAC,AAAiB,AAAC,AAChE;AALiB;;AAMlB,UAAI,AAAQ,SAAC,AAAQ,aAAK,AAAQ,SAAC,AAAW,eAAI,AAAQ,SAAC,AAAW,eAAI,AAAI,MAAE;AAC9E,AAAI,aAAC,AAAW,cAAG,AAAQ,SAAC,AAAW;AACxC;;AACD,YAAM,AAAI,OAAG,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAW,AAAC;AAC5C,YAAM,AAAU,4BAAC,AAAI,MAAE,AAAI,AAAC;AAC5B,aAAO,AAAI,AACb;;AAAC,AACF","sourcesContent":["import { outputJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { Packager } from \"../packager\"\n\nexport class ProjectInfoManager {\n  readonly infoFile = new Lazy(() => this.saveConfigurationAndMetadata())\n\n  constructor(readonly packager: Packager) {\n  }\n\n  private async saveConfigurationAndMetadata() {\n    const packager = this.packager\n    const tempDir = await packager.tempDirManager.createTempDir({prefix: \"remote-build-metadata\"})\n    // we cannot use getTempFile because file name must be constant\n    const info: any = {\n      metadata: packager.metadata,\n      configuration: packager.config,\n      repositoryInfo: await packager.repositoryInfo,\n      buildResourceDirName: path.basename(packager.buildResourcesDir)\n    }\n    if (packager.metadata !== packager.devMetadata && packager.devMetadata != null) {\n      info.devMetadata = packager.devMetadata\n    }\n    const file = path.join(tempDir, \"info.json\")\n    await outputJson(file, info)\n    return file\n  }\n}"]}

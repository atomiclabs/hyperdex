{"version":3,"file":"RemoteBuilder.js","sourceRoot":"","sources":["../../src/remoteBuilder/RemoteBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, isEnvTrue, log } from \"builder-util\"\nimport { connect, constants } from \"http2\"\nimport * as path from \"path\"\nimport { promisify } from \"util\"\nimport { Target } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { ProjectInfoManager } from \"./ProjectInfoManager\"\nimport { checkStatus, getConnectOptions, RemoteBuildManager } from \"./RemoteBuildManager\"\n\ninterface TargetInfo {\n  name: string\n  arch: string\n  unpackedDirectory: string\n  outDir: string\n}\n\nconst errorCodes = new Set([\"ECONNREFUSED\", \"ECONNRESET\"])\n\nexport class RemoteBuilder {\n  private readonly toBuild = new Map<Arch, Array<TargetInfo>>()\n  private buildStarted = false\n\n  constructor(readonly packager: PlatformPackager<any>) {\n  }\n\n  scheduleBuild(target: Target, arch: Arch, unpackedDirectory: string) {\n    if (!isEnvTrue(process.env._REMOTE_BUILD) && this.packager.config.remoteBuild === false) {\n      throw new Error(\"Target is not supported on your OS and using of Electron Build Service is disabled (\\\"remoteBuild\\\" option)\")\n    }\n\n    let list = this.toBuild.get(arch)\n    if (list == null) {\n      list = []\n      this.toBuild.set(arch, list)\n    }\n\n    list.push({\n      name: target.name,\n      arch: Arch[arch],\n      unpackedDirectory,\n      outDir: target.outDir,\n    })\n  }\n\n  build(): Promise<any> {\n    if (this.buildStarted) {\n      return Promise.resolve()\n    }\n\n    this.buildStarted = true\n\n    return BluebirdPromise.mapSeries(Array.from(this.toBuild.keys()), (arch: Arch) => {\n      return this._build(this.toBuild.get(arch)!!, this.packager)\n    })\n  }\n\n  // noinspection JSMethodCanBeStatic\n  private async _build(targets: Array<TargetInfo>, packager: PlatformPackager<any>): Promise<any> {\n    if (log.isDebugEnabled) {\n      log.debug({remoteTargets: JSON.stringify(targets, null, 2)}, \"remote building\")\n    }\n\n    const projectInfoManager = new ProjectInfoManager(packager.info)\n\n    let result: RemoteBuilderResponse | null = null\n    for (let attempt = 0; true; attempt++) {\n      const endpoint = await findBuildAgent()\n      // for now assume that all targets has the same outDir (correct for Linux)\n      const buildManager = new RemoteBuildManager(endpoint, projectInfoManager, targets[0].unpackedDirectory, targets[0].outDir, packager)\n      const setTimeoutPromise = promisify(setTimeout)\n      try {\n        result = await buildManager.build({\n          \"x-targets\": JSON.stringify(targets.map(it => {\n            return {\n              name: it.name,\n              arch: it.arch,\n              unpackedDirName: path.basename(it.unpackedDirectory),\n            }\n          })),\n          \"x-platform\": packager.platform.buildConfigurationKey,\n        })\n        break\n      }\n      catch (e) {\n        const errorCode: string = e.code\n        if (!errorCodes.has(errorCode) || attempt > 3) {\n          if (errorCode === \"ECONNREFUSED\") {\n            const error = new Error(`Cannot connect to electron build service ${endpoint}: ${e.message}`)\n            e.code = errorCode\n            throw error\n          }\n          else {\n            throw e\n          }\n        }\n\n        const waitTime = 4000 * (attempt + 1)\n        console.warn(`Attempt ${attempt + 1}: ${e.message}\\nWaiting ${waitTime / 1000}s...`)\n        await setTimeoutPromise(waitTime, \"wait\")\n      }\n    }\n\n    if (result != null && result.error != null) {\n      throw new Error(`Remote builder error (if you think that it is not your application misconfiguration issue, please file issue to https://github.com/electron-userland/electron-builder/issues):\\n\\n${result.error}`)\n    }\n  }\n}\n\nasync function findBuildAgent(): Promise<string> {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ENDPOINT\n  if (result != null) {\n    log.debug({endpoint: result}, `endpoint is set explicitly`)\n    return result.startsWith(\"http\") ? result : `https://${result}`\n  }\n\n  const rawUrl = process.env.ELECTRON_BUILD_SERVICE_ROUTER_HOST || \"service.electron.build\"\n  // add random query param to prevent caching\n  const routerUrl = rawUrl.startsWith(\"http\") ? rawUrl : `https://${rawUrl}`\n  log.debug({routerUrl}, \"\")\n  const client = connect(routerUrl, getConnectOptions())\n  return await new BluebirdPromise<string>((resolve, reject) => {\n    client.on(\"socketError\", reject)\n    client.on(\"error\", reject)\n    client.setTimeout(10 * 1000, () => {\n      reject(new Error(\"Timeout\"))\n    })\n\n    const stream = client.request({\n      [constants.HTTP2_HEADER_PATH]: `/find-build-agent?c=${Date.now().toString(32)}`,\n      [constants.HTTP2_HEADER_METHOD]: constants.HTTP2_METHOD_GET,\n    })\n    stream.on(\"error\", reject)\n\n    stream.on(\"response\", headers => {\n      if (!checkStatus(headers[constants.HTTP2_HEADER_STATUS] as any, reject)) {\n        return\n      }\n\n      stream.setEncoding(\"utf8\")\n      let data = \"\"\n      stream.on(\"end\", () => {\n        try {\n          if (log.isDebugEnabled) {\n            log.debug({data}, \"remote build response\")\n          }\n          resolve(JSON.parse(data).endpoint)\n        }\n        catch (e) {\n          throw new Error(`Cannot parse response: ${data}`)\n        }\n      })\n      stream.on(\"data\", (chunk: string) => {\n        data += chunk\n      })\n    })\n  })\n    .finally(() => {\n      client.destroy()\n    })\n}\n\nexport interface RemoteBuilderResponse {\n  error?: string\n}"]}

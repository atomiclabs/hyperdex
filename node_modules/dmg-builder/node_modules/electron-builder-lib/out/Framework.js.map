{"version":3,"file":"Framework.js","sourceRoot":"","sources":["../src/Framework.ts"],"names":[],"mappings":";;;;;;;yBA+BgC,AAAoB;AAClD,SAAO,AAAS,UAAC,AAAI,SAAK,AAAU,cAAI,AAAS,UAAC,AAAI,SAAK,AAAM,AACnE;AAAC","sourcesContent":["import { FileTransformer } from \"builder-util/out/fs\"\nimport { AsarIntegrity } from \"./asar/integrity\"\nimport { PlatformPackager } from \"./platformPackager\"\n\nexport interface Framework {\n  readonly name: string\n  readonly version: string\n  readonly distMacOsAppName: string\n\n  readonly isNpmRebuildRequired: boolean\n\n  readonly isDefaultAppIconProvided: boolean\n\n  prepareApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions): Promise<any>\n\n  beforeCopyExtraFiles?(packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null): Promise<any>\n\n  createTransformer?(): FileTransformer | null\n}\n\nexport interface PrepareApplicationStageDirectoryOptions {\n  readonly packager: PlatformPackager<any>\n  /**\n   * Platform doesn't process application output directory in any way. Unpack implementation must create or empty dir if need.\n   */\n  readonly appOutDir: string\n  readonly platformName: string\n  readonly arch: string\n  readonly version: string\n}\n\nexport function isElectronBased(framework: Framework) {\n  return framework.name === \"electron\" || framework.name === \"muon\"\n}"]}

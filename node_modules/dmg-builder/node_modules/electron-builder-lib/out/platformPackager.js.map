{"version":3,"file":"platformPackager.js","sourceRoot":"","sources":["../src/platformPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, AsyncTaskManager, debug, DebugLogger, deepAssign, executeAppBuilder, getArchSuffix, InvalidConfigurationError, isEmptyOrSpaces, log } from \"builder-util\"\nimport { PackageBuilder } from \"builder-util/out/api\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { orIfFileNotExist } from \"builder-util/out/promise\"\nimport { readdir } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { AppInfo } from \"./appInfo\"\nimport { checkFileInArchive } from \"./asar/asarFileChecker\"\nimport { AsarPackager } from \"./asar/asarUtil\"\nimport { computeData } from \"./asar/integrity\"\nimport { CompressionLevel, Platform, Target, TargetSpecificOptions } from \"./core\"\nimport { copyFiles, FileMatcher, getFileMatchers, GetFileMatchersOptions, getMainFileMatchers } from \"./fileMatcher\"\nimport { createTransformer, isElectronCompileUsed } from \"./fileTransformer\"\nimport { isElectronBased } from \"./Framework\"\nimport { AfterPackContext, AsarOptions, Configuration, FileAssociation, PlatformSpecificBuildOptions } from \"./index\"\nimport { Packager } from \"./packager\"\nimport { PackagerOptions } from \"./packagerApi\"\nimport { copyAppFiles } from \"./util/appFileCopier\"\nimport { computeFileSets, ELECTRON_COMPILE_SHIM_FILENAME } from \"./util/AppFileCopierHelper\"\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> implements PackageBuilder {\n  get packagerOptions(): PackagerOptions {\n    return this.info.options\n  }\n\n  get buildResourcesDir(): string {\n    return this.info.buildResourcesDir\n  }\n\n  get projectDir(): string {\n    return this.info.projectDir\n  }\n\n  get config(): Configuration {\n    return this.info.config\n  }\n\n  readonly platformSpecificBuildOptions: DC\n\n  get resourceList(): Promise<Array<string>> {\n    return this._resourceList.value\n  }\n\n  private readonly _resourceList = new Lazy<Array<string>>(() => orIfFileNotExist(readdir(this.info.buildResourcesDir), []))\n\n  readonly appInfo: AppInfo\n\n  protected constructor(readonly info: Packager, readonly platform: Platform) {\n    this.platformSpecificBuildOptions = PlatformPackager.normalizePlatformSpecificBuildOptions((this.config as any)[platform.buildConfigurationKey])\n    this.appInfo = this.prepareAppInfo(info.appInfo)\n  }\n\n  get compression(): CompressionLevel {\n    const compression = this.platformSpecificBuildOptions.compression\n    // explicitly set to null - request to use default value instead of parent (in the config)\n    if (compression === null) {\n      return \"normal\"\n    }\n    return compression || this.config.compression || \"normal\"\n  }\n\n  get debugLogger(): DebugLogger {\n    return this.info.debugLogger\n  }\n\n  abstract get defaultTarget(): Array<string>\n\n  protected prepareAppInfo(appInfo: AppInfo) {\n    return appInfo\n  }\n\n  private static normalizePlatformSpecificBuildOptions(options: any | null | undefined): any {\n    return options == null ? Object.create(null) : options\n  }\n\n  abstract createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void\n\n  protected getCscPassword(): string {\n    const password = this.doGetCscPassword()\n    if (isEmptyOrSpaces(password)) {\n      log.info({reason: \"CSC_KEY_PASSWORD is not defined\"}, \"empty password will be used for code signing\")\n      return \"\"\n    }\n    else {\n      return password!.trim()\n    }\n  }\n\n  protected getCscLink(extraEnvName?: string | null): string | null | undefined {\n    // allow to specify as empty string\n    const envValue = chooseNotNull(extraEnvName == null ? null : process.env[extraEnvName], process.env.CSC_LINK)\n    return chooseNotNull(chooseNotNull(this.info.config.cscLink, this.platformSpecificBuildOptions.cscLink), envValue)\n  }\n\n  protected doGetCscPassword(): string | null | undefined {\n    // allow to specify as empty string\n    return chooseNotNull(chooseNotNull(this.info.config.cscKeyPassword, this.platformSpecificBuildOptions.cscKeyPassword), process.env.CSC_KEY_PASSWORD)\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return this.packagerOptions.prepackaged || path.join(outDir, `${this.platform.buildConfigurationKey}${getArchSuffix(arch)}${this.platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n  }\n\n  dispatchArtifactCreated(file: string, target: Target | null, arch: Arch | null, safeArtifactName?: string | null) {\n    this.info.dispatchArtifactCreated({\n      file, safeArtifactName, target, arch,\n      packager: this,\n    })\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    await this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions, targets)\n    this.packageInDistributableFormat(appOutDir, arch, targets, taskManager)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): void {\n    if (targets.find(it => !it.isAsyncSupported) == null) {\n      PlatformPackager.buildAsyncTargets(targets, taskManager, appOutDir, arch)\n      return\n    }\n\n    taskManager.add(async () => {\n      // BluebirdPromise.map doesn't invoke target.build immediately, but for RemoteTarget it is very critical to call build() before finishBuild()\n      const subTaskManager = new AsyncTaskManager(this.info.cancellationToken)\n      PlatformPackager.buildAsyncTargets(targets, subTaskManager, appOutDir, arch)\n      await subTaskManager.awaitTasks()\n\n      for (const target of targets) {\n        if (!target.isAsyncSupported) {\n          await target.build(appOutDir, arch)\n        }\n      }\n    })\n  }\n\n  private static buildAsyncTargets(targets: Array<Target>, taskManager: AsyncTaskManager, appOutDir: string, arch: Arch) {\n    for (const target of targets) {\n      if (target.isAsyncSupported) {\n        taskManager.addTask(target.build(appOutDir, arch))\n      }\n    }\n  }\n\n  private getExtraFileMatchers(isResources: boolean, appOutDir: string, options: GetFileMatchersOptions): Array<FileMatcher> | null {\n    const base = isResources ? this.getResourcesDir(appOutDir) : (this.platform === Platform.MAC ? path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\") : appOutDir)\n    return getFileMatchers(this.config, isResources ? \"extraResources\" : \"extraFiles\", this.projectDir, base, options)\n  }\n\n  get electronDistExecutableName() {\n    return this.config.muonVersion == null ? \"electron\" : \"brave\"\n  }\n\n  get electronDistMacOsExecutableName() {\n    return this.config.muonVersion == null ? \"Electron\" : \"Brave\"\n  }\n\n  protected async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, platformSpecificBuildOptions: DC, targets: Array<Target>) {\n    if (this.packagerOptions.prepackaged != null) {\n      return\n    }\n\n    const macroExpander = (it: string) => this.expandMacro(it, arch == null ? null : Arch[arch], {\"/*\": \"{,/**/*}\"})\n\n    const framework = this.info.framework\n    log.info({\n      platform: platformName,\n      arch: Arch[arch],\n      [`${framework.name}`]: framework.version,\n      appOutDir: log.filePath(appOutDir),\n    }, `packaging`)\n\n    await framework.prepareApplicationStageDirectory({\n      packager: this,\n      appOutDir,\n      platformName,\n      arch: Arch[arch],\n      version: framework.version,\n    })\n\n    const excludePatterns: Array<Minimatch> = []\n\n    const computeParsedPatterns = (patterns: Array<FileMatcher> | null) => {\n      if (patterns != null) {\n        for (const pattern of patterns) {\n          pattern.computeParsedPatterns(excludePatterns, this.info.projectDir)\n        }\n      }\n    }\n\n    const getFileMatchersOptions: GetFileMatchersOptions = {\n      macroExpander,\n      customBuildOptions: platformSpecificBuildOptions,\n      outDir,\n    }\n    const extraResourceMatchers = this.getExtraFileMatchers(true, appOutDir, getFileMatchersOptions)\n    computeParsedPatterns(extraResourceMatchers)\n    const extraFileMatchers = this.getExtraFileMatchers(false, appOutDir, getFileMatchersOptions)\n    computeParsedPatterns(extraFileMatchers)\n\n    const packContext: AfterPackContext = {\n      appOutDir, outDir, arch, targets,\n      packager: this,\n      electronPlatformName: platformName,\n    }\n\n    const taskManager = new AsyncTaskManager(this.info.cancellationToken)\n    const asarOptions = await this.computeAsarOptions(platformSpecificBuildOptions)\n    const resourcesPath = this.platform === Platform.MAC ? path.join(appOutDir, framework.distMacOsAppName, \"Contents\", \"Resources\") : (isElectronBased(framework) ? path.join(appOutDir, \"resources\") : appOutDir)\n    this.copyAppFiles(taskManager, asarOptions, resourcesPath, path.join(resourcesPath, \"app\"), outDir, platformSpecificBuildOptions, excludePatterns, macroExpander)\n    await taskManager.awaitTasks()\n\n    if (this.info.cancellationToken.cancelled) {\n      return\n    }\n\n    const beforeCopyExtraFiles = this.info.framework.beforeCopyExtraFiles\n    if (beforeCopyExtraFiles != null) {\n      await beforeCopyExtraFiles(this, appOutDir, asarOptions == null ? null : await computeData(resourcesPath, asarOptions.externalAllowed ? {externalAllowed: true} : null))\n    }\n    await BluebirdPromise.each([extraResourceMatchers, extraFileMatchers], it => copyFiles(it))\n\n    if (this.info.cancellationToken.cancelled) {\n      return\n    }\n\n    await this.info.afterPack(packContext)\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\n    await this.signApp(packContext)\n    await this.info.afterSign(packContext)\n  }\n\n  private copyAppFiles(taskManager: AsyncTaskManager, asarOptions: AsarOptions | null, resourcePath: string, defaultDestination: string, outDir: string, platformSpecificBuildOptions: DC, excludePatterns: Array<Minimatch>, macroExpander: ((it: string) => string)) {\n    const appDir = this.info.appDir\n    const config = this.config\n    const isElectronCompile = asarOptions != null && isElectronCompileUsed(this.info)\n\n    const mainMatchers = getMainFileMatchers(appDir, defaultDestination, macroExpander, platformSpecificBuildOptions, this, outDir, isElectronCompile)\n    if (excludePatterns.length > 0) {\n      for (const matcher of mainMatchers) {\n        matcher.excludePatterns = excludePatterns\n      }\n    }\n\n    const framework = this.info.framework\n    const transformer = createTransformer(appDir, config, isElectronCompile ? {\n      originalMain: this.info.metadata.main,\n      main: ELECTRON_COMPILE_SHIM_FILENAME,\n      ...config.extraMetadata\n    } : config.extraMetadata, framework.createTransformer == null ? null : framework.createTransformer())\n\n    const _computeFileSets = (matchers: Array<FileMatcher>) => {\n      return computeFileSets(matchers, (this.info.isPrepackedAppAsar || asarOptions == null) ? null : transformer, this.info, isElectronCompile)\n        .then(it => it.filter(it => it.files.length > 0))\n    }\n\n    if (this.info.isPrepackedAppAsar) {\n      taskManager.addTask(BluebirdPromise.each(_computeFileSets([new FileMatcher(appDir, resourcePath, macroExpander)]), it => copyAppFiles(it, this.info, transformer)))\n    }\n    else if (asarOptions == null) {\n      taskManager.addTask(BluebirdPromise.each(_computeFileSets(mainMatchers), it => copyAppFiles(it, this.info, transformer)))\n    }\n    else {\n      const unpackPattern = getFileMatchers(config, \"asarUnpack\", appDir, defaultDestination, {\n        macroExpander,\n        customBuildOptions: platformSpecificBuildOptions,\n        outDir,\n      })\n      const fileMatcher = unpackPattern == null ? null : unpackPattern[0]\n      taskManager.addTask(_computeFileSets(mainMatchers)\n        .then(fileSets => new AsarPackager(appDir, resourcePath, asarOptions, fileMatcher == null ? null : fileMatcher.createFilter()).pack(fileSets, this)))\n    }\n  }\n\n  protected signApp(packContext: AfterPackContext): Promise<any> {\n    return Promise.resolve()\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return null\n  }\n\n  private async computeAsarOptions(customBuildOptions: DC): Promise<AsarOptions | null> {\n    if (!isElectronBased(this.info.framework)) {\n      return null\n    }\n\n    function errorMessage(name: string) {\n      return `${name} is deprecated is deprecated and not supported — please use asarUnpack`\n    }\n\n    const buildMetadata = this.config as any\n    if (buildMetadata[\"asar-unpack\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack\"))\n    }\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack-dir\"))\n    }\n\n    const platformSpecific = customBuildOptions.asar\n    const result = platformSpecific == null ? this.config.asar : platformSpecific\n    if (result === false) {\n      const appAsarStat = await statOrNull(path.join(this.info.appDir, \"app.asar\"))\n      //noinspection ES6MissingAwait\n      if (appAsarStat == null || !appAsarStat.isFile()) {\n        log.warn({\n          solution: \"enable asar and use asarUnpack to unpack files that must be externally available\",\n        }, \"asar using is disabled — it is strongly not recommended\")\n      }\n      return null\n    }\n\n    if (result == null || result === true) {\n      return {}\n    }\n\n    for (const name of [\"unpackDir\", \"unpack\"]) {\n      if ((result as any)[name] != null) {\n        throw new Error(errorMessage(`asar.${name}`))\n      }\n    }\n    return deepAssign({}, result)\n  }\n\n  public getElectronSrcDir(dist: string): string {\n    return path.resolve(this.projectDir, dist)\n  }\n\n  public getElectronDestinationDir(appOutDir: string): string {\n    return appOutDir\n  }\n\n  getResourcesDir(appOutDir: string): string {\n    if (this.platform === Platform.MAC) {\n      return this.getMacOsResourcesDir(appOutDir)\n    }\n    else if (isElectronBased(this.info.framework)) {\n      return path.join(appOutDir, \"resources\")\n    }\n    else {\n      return appOutDir\n    }\n  }\n\n  public getMacOsResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\", \"Resources\")\n  }\n\n  private async checkFileInPackage(resourcesDir: string, file: string, messagePrefix: string, isAsar: boolean) {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\n    if (isAsar) {\n      await checkFileInArchive(path.join(resourcesDir, \"app.asar\"), relativeFile, messagePrefix)\n      return\n    }\n\n    const pathParsed = path.parse(file)\n    // Even when packaging to asar is disabled, it does not imply that the main file can not be inside an .asar archive.\n    // This may occur when the packaging is done manually before processing with electron-builder.\n    if (pathParsed.dir.includes(\".asar\")) {\n      // The path needs to be split to the part with an asar archive which acts like a directory and the part with\n      // the path to main file itself. (e.g. path/arch.asar/dir/index.js -> path/arch.asar, dir/index.js)\n      // noinspection TypeScriptValidateJSTypes\n      const pathSplit: Array<string> = pathParsed.dir.split(path.sep)\n      let partWithAsarIndex = 0\n      pathSplit.some((pathPart: string, index: number) => {\n        partWithAsarIndex = index\n        return pathPart.endsWith(\".asar\")\n      })\n      const asarPath = path.join.apply(path, pathSplit.slice(0, partWithAsarIndex + 1))\n      let mainPath = pathSplit.length > (partWithAsarIndex + 1) ? path.join.apply(pathSplit.slice(partWithAsarIndex + 1)) : \"\"\n      mainPath += path.join(mainPath, pathParsed.base)\n      await checkFileInArchive(path.join(resourcesDir, \"app\", asarPath), mainPath, messagePrefix)\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      if (outStat == null) {\n        throw new Error(`${messagePrefix} \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\n      }\n      else {\n        //noinspection ES6MissingAwait\n        if (!outStat.isFile()) {\n          throw new Error(`${messagePrefix} \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\n        }\n      }\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\n    }\n    else {\n      //noinspection ES6MissingAwait\n      if (!outStat.isDirectory()) {\n        throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\n      }\n    }\n\n    const resourcesDir = this.getResourcesDir(appOutDir)\n    await this.checkFileInPackage(resourcesDir, this.info.metadata.main || \"index.js\", \"Application entry file\", isAsar)\n    await this.checkFileInPackage(resourcesDir, \"package.json\", \"Application\", isAsar)\n  }\n\n  computeSafeArtifactName(suggestedName: string | null, ext: string, arch?: Arch | null, skipArchIfX64 = true): string | null {\n    // GitHub only allows the listed characters in file names.\n    if (suggestedName != null && isSafeGithubName(suggestedName)) {\n      return null\n    }\n\n    // tslint:disable-next-line:no-invalid-template-strings\n    return this.computeArtifactName(\"${name}-${version}-${arch}.${ext}\", ext, skipArchIfX64 && arch === Arch.x64 ? null : arch)\n  }\n\n  expandArtifactNamePattern(targetSpecificOptions: TargetSpecificOptions | null | undefined, ext: string, arch?: Arch | null, defaultPattern?: string, skipArchIfX64 = true): string {\n    let pattern = targetSpecificOptions == null ? null : targetSpecificOptions.artifactName\n    if (pattern == null) {\n      // tslint:disable-next-line:no-invalid-template-strings\n      pattern = this.platformSpecificBuildOptions.artifactName || this.config.artifactName || defaultPattern || \"${productName}-${version}-${arch}.${ext}\"\n    }\n    return this.computeArtifactName(pattern, ext, skipArchIfX64 && arch === Arch.x64 ? null : arch)\n  }\n\n  private computeArtifactName(pattern: any, ext: string, arch: Arch | null | undefined) {\n    let archName: string | null = arch == null ? null : Arch[arch]\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\" || ext === \"rpm\") {\n        archName = \"x86_64\"\n      }\n      else if (ext === \"deb\" || ext === \"snap\") {\n        archName = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32) {\n      if (ext === \"deb\" || ext === \"AppImage\" || ext === \"snap\") {\n        archName = \"i386\"\n      }\n      else if (ext === \"pacman\" || ext === \"rpm\") {\n        archName = \"i686\"\n      }\n    }\n\n    return this.expandMacro(pattern, this.platform === Platform.MAC ? null : archName, {\n      ext\n    })\n  }\n\n  expandMacro(pattern: string, arch?: string | null, extra: any = {}, isProductNameSanitized = true): string {\n    if (arch == null) {\n      pattern = pattern\n      // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\"-${arch}\", \"\")\n        // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\" ${arch}\", \"\")\n        // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\"_${arch}\", \"\")\n        // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\"/${arch}\", \"\")\n    }\n\n    const appInfo = this.appInfo\n    return pattern.replace(/\\${([_a-zA-Z./*]+)}/g, (match, p1): string => {\n      switch (p1) {\n        case \"productName\":\n          return isProductNameSanitized ? appInfo.productFilename : appInfo.productName\n\n        case \"arch\":\n          if (arch == null) {\n            // see above, we remove macro if no arch\n            return \"\"\n          }\n          return arch\n\n        case \"os\":\n          return this.platform.buildConfigurationKey\n\n        case \"platform\":\n          return process.platform\n\n        case \"channel\":\n          return appInfo.channel || \"latest\"\n\n        default:\n          if (p1 in appInfo) {\n            return (appInfo as any)[p1]\n          }\n\n          if (p1.startsWith(\"env.\")) {\n            const envName = p1.substring(\"env.\".length)\n            const envValue = process.env[envName]\n            if (envValue == null) {\n              throw new InvalidConfigurationError(`cannot expand pattern \"${pattern}\": env ${envName} is not defined`, \"ERR_ELECTRON_BUILDER_ENV_NOT_DEFINED\")\n            }\n            return envValue\n          }\n\n          const value = extra[p1]\n          if (value == null) {\n            throw new InvalidConfigurationError(`cannot expand pattern \"${pattern}\": macro ${p1} is not defined`, \"ERR_ELECTRON_BUILDER_MACRO_NOT_DEFINED\")\n          }\n          else {\n            return value\n          }\n      }\n    })\n  }\n\n  generateName(ext: string | null, arch: Arch, deployment: boolean, classifier: string | null = null): string {\n    let c: string | null = null\n    let e: string | null = null\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\") {\n        c = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        c = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32 && ext === \"deb\") {\n      c = \"i386\"\n    }\n    else if (ext === \"pacman\") {\n      if (arch === Arch.ia32) {\n        c = \"i686\"\n      }\n      e = \"pkg.tar.xz\"\n    }\n    else {\n      c = Arch[arch]\n    }\n\n    if (c == null) {\n      c = classifier\n    }\n    else if (classifier != null) {\n      c += `-${classifier}`\n    }\n    if (e == null) {\n      e = ext\n    }\n    return this.generateName2(e, c, deployment)\n  }\n\n  generateName2(ext: string | null, classifier: string | null | undefined, deployment: boolean): string {\n    const dotExt = ext == null ? \"\" : `.${ext}`\n    const separator = ext === \"deb\" ? \"_\" : \"-\"\n    return `${deployment ? this.appInfo.name : this.appInfo.productFilename}${separator}${this.appInfo.version}${classifier == null ? \"\" : `${separator}${classifier}`}${dotExt}`\n  }\n\n  getTempFile(suffix: string): Promise<string> {\n    return this.info.tempDirManager.getTempFile({suffix})\n  }\n\n  get fileAssociations(): Array<FileAssociation> {\n    return asArray(this.config.fileAssociations).concat(asArray(this.platformSpecificBuildOptions.fileAssociations))\n  }\n\n  async getResource(custom: string | null | undefined, ...names: Array<string>): Promise<string | null> {\n    const resourcesDir = this.info.buildResourcesDir\n    if (custom === undefined) {\n      const resourceList = await this.resourceList\n      for (const name of names) {\n        if (resourceList.includes(name)) {\n          return path.join(resourcesDir, name)\n        }\n      }\n    }\n    else if (custom != null && !isEmptyOrSpaces(custom)) {\n      const resourceList = await this.resourceList\n      if (resourceList.includes(custom)) {\n        return path.join(resourcesDir, custom)\n      }\n\n      let p = path.resolve(resourcesDir, custom)\n      if (await statOrNull(p) == null) {\n        p = path.resolve(this.projectDir, custom)\n        if (await statOrNull(p) == null) {\n          throw new InvalidConfigurationError(`cannot find specified resource \"${custom}\", nor relative to \"${resourcesDir}\", neither relative to project dir (\"${this.projectDir}\")`)\n        }\n      }\n      return p\n    }\n    return null\n  }\n\n  get forceCodeSigning(): boolean {\n    const forceCodeSigningPlatform = this.platformSpecificBuildOptions.forceCodeSigning\n    return (forceCodeSigningPlatform == null ? this.config.forceCodeSigning : forceCodeSigningPlatform) || false\n  }\n\n  protected async getOrConvertIcon(format: IconFormat): Promise<string | null> {\n    const iconPath = this.platformSpecificBuildOptions.icon || this.config.icon\n    if (iconPath != null) {\n      const iconInfos = await this.resolveIcon([iconPath], format)\n      return (iconInfos)[0].file\n    }\n\n    const sourceNames = [`icon.${format === \"set\" ? \"png\" : format}`, \"icon.png\", \"icons\"]\n    if (format === \"ico\") {\n      sourceNames.push(\"icon.icns\")\n    }\n\n    const result = await this.resolveIcon(sourceNames, format)\n    if (result.length === 0) {\n      const framework = this.info.framework\n      log.warn({reason: \"application icon is not set\"}, framework.isDefaultAppIconProvided ? `default ${capitalizeFirstLetter(framework.name)} icon is used` : `application doesn't have an icon`)\n      return null\n    }\n    else {\n      return result[0].file\n    }\n  }\n\n  // convert if need, validate size (it is a reason why tool is called even if file has target extension (already specified as foo.icns for example))\n  async resolveIcon(sources: Array<string>, outputFormat: IconFormat): Promise<Array<IconInfo>> {\n    const args = [\n      \"icon\",\n      \"--format\", outputFormat,\n      \"--root\", this.buildResourcesDir,\n      \"--root\", this.projectDir,\n      \"--out\", path.resolve(this.projectDir, this.config.directories!!.output!!, `.icon-${outputFormat}`),\n    ]\n    for (const source of sources) {\n      args.push(\"--input\", source)\n    }\n\n    const rawResult = await executeAppBuilder(args)\n    let result: IconConvertResult\n    try {\n      result = JSON.parse(rawResult)\n    }\n    catch (e) {\n      throw new Error(`Cannot parse result: ${e.message}: ${rawResult}`)\n    }\n\n    const errorMessage = result.error\n    if (errorMessage != null) {\n      throw new InvalidConfigurationError(errorMessage, result.errorCode)\n    }\n    return result.icons || []\n  }\n}\n\nexport interface IconInfo {\n  file: string\n  size: number\n}\n\ninterface IconConvertResult {\n  icons?: Array<IconInfo>\n\n  error?: string\n  errorCode?: string\n}\n\nexport type IconFormat = \"icns\" | \"ico\" | \"set\"\n\nexport function isSafeGithubName(name: string) {\n  return /^[0-9A-Za-z._-]+$/.test(name)\n}\n\n// remove leading dot\nexport function normalizeExt(ext: string) {\n  return ext.startsWith(\".\") ? ext.substring(1) : ext\n}\n\nexport function resolveFunction<T>(executor: T | string): T {\n  if (executor == null || typeof executor !== \"string\") {\n    return executor\n  }\n\n  let p = executor as string\n  if (p.startsWith(\".\")) {\n    p = path.resolve(p)\n  }\n  try {\n    p = require.resolve(p)\n  }\n  catch (e) {\n    debug(e)\n    p = path.resolve(p)\n  }\n\n  const m = require(p)\n  return m.default || m\n}\n\nexport function chooseNotNull(v1: string | null | undefined, v2: string | null | undefined): string | null | undefined {\n  return v1 == null ? v2 : v1\n}\n\nfunction capitalizeFirstLetter(text: string) {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}"]}

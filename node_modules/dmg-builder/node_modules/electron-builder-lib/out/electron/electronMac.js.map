{"version":3,"file":"electronMac.js","sourceRoot":"","sources":["../../src/electron/electronMac.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, getPlatformIconFileName, InvalidConfigurationError, log } from \"builder-util\"\nimport { copyFile, copyOrLinkFile, unlinkIfExists } from \"builder-util/out/fs\"\nimport { readFile, rename, utimes, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { build as buildPlist, parse as parsePlist } from \"plist\"\nimport { filterCFBundleIdentifier } from \"../appInfo\"\nimport { AsarIntegrity } from \"../asar/integrity\"\nimport MacPackager from \"../macPackager\"\nimport { normalizeExt } from \"../platformPackager\"\n\nfunction doRename(basePath: string, oldName: string, newName: string) {\n  return rename(path.join(basePath, oldName), path.join(basePath, newName))\n}\n\nfunction moveHelpers(frameworksPath: string, appName: string, prefix: string): Promise<any> {\n  return BluebirdPromise.map([\" Helper\", \" Helper EH\", \" Helper NP\"], suffix => {\n    const executableBasePath = path.join(frameworksPath, `${prefix}${suffix}.app`, \"Contents\", \"MacOS\")\n    return doRename(executableBasePath, `${prefix}${suffix}`, appName + suffix)\n      .then(() => doRename(frameworksPath, `${prefix}${suffix}.app`, `${appName}${suffix}.app`))\n  })\n}\n\n/** @internal */\nexport async function createMacApp(packager: MacPackager, appOutDir: string, asarIntegrity: AsarIntegrity | null) {\n  const appInfo = packager.appInfo\n  const appFilename = appInfo.productFilename\n\n  const contentsPath = path.join(appOutDir, packager.info.framework.distMacOsAppName, \"Contents\")\n  const frameworksPath = path.join(contentsPath, \"Frameworks\")\n\n  const appPlistFilename = path.join(contentsPath, \"Info.plist\")\n  const helperPlistFilename = path.join(frameworksPath, `${packager.electronDistMacOsExecutableName} Helper.app`, \"Contents\", \"Info.plist\")\n  const helperEHPlistFilename = path.join(frameworksPath, `${packager.electronDistMacOsExecutableName} Helper EH.app`, \"Contents\", \"Info.plist\")\n  const helperNPPlistFilename = path.join(frameworksPath, `${packager.electronDistMacOsExecutableName} Helper NP.app`, \"Contents\", \"Info.plist\")\n\n  const buildMetadata = packager.config!\n  const fileContents: Array<string> = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, (buildMetadata as any)[\"extend-info\"]], it => it == null ? it : readFile(it, \"utf8\"))\n  const appPlist = parsePlist(fileContents[0])\n  const helperPlist = parsePlist(fileContents[1])\n  const helperEHPlist = parsePlist(fileContents[2])\n  const helperNPPlist = parsePlist(fileContents[3])\n\n  // if an extend-info file was supplied, copy its contents in first\n  if (fileContents[4] != null) {\n    Object.assign(appPlist, parsePlist(fileContents[4]))\n  }\n\n  const macOptions = buildMetadata.mac || {}\n  if (macOptions.extendInfo != null) {\n    Object.assign(appPlist, macOptions.extendInfo)\n  }\n\n  const oldHelperBundleId = (buildMetadata as any)[\"helper-bundle-id\"]\n  if (oldHelperBundleId != null) {\n    log.warn(\"build.helper-bundle-id is deprecated, please set as build.mac.helperBundleId\")\n  }\n  const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `${appInfo.macBundleIdentifier}.helper`)\n\n  const oldIcon = appPlist.CFBundleIconFile\n\n  await packager.applyCommonInfo(appPlist)\n\n  helperPlist.CFBundleExecutable = `${appFilename} Helper`\n  helperEHPlist.CFBundleExecutable = `${appFilename} Helper EH`\n  helperNPPlist.CFBundleExecutable = `${appFilename} Helper NP`\n\n  helperPlist.CFBundleDisplayName = `${appInfo.productName} Helper`\n  helperEHPlist.CFBundleDisplayName = `${appInfo.productName} Helper EH`\n  helperNPPlist.CFBundleDisplayName = `${appInfo.productName} Helper NP`\n\n  helperPlist.CFBundleIdentifier = helperBundleIdentifier\n  helperEHPlist.CFBundleIdentifier = `${helperBundleIdentifier}.EH`\n  helperNPPlist.CFBundleIdentifier = `${helperBundleIdentifier}.NP`\n\n  helperPlist.CFBundleVersion = appPlist.CFBundleVersion\n  helperEHPlist.CFBundleVersion = appPlist.CFBundleVersion\n  helperNPPlist.CFBundleVersion = appPlist.CFBundleVersion\n\n  const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols))\n  if (protocols.length > 0) {\n    appPlist.CFBundleURLTypes = protocols.map(protocol => {\n      const schemes = asArray(protocol.schemes)\n      if (schemes.length === 0) {\n        throw new InvalidConfigurationError(`Protocol \"${protocol.name}\": must be at least one scheme specified`)\n      }\n      return {\n        CFBundleURLName: protocol.name,\n        CFBundleTypeRole: protocol.role || \"Editor\",\n        CFBundleURLSchemes: schemes.slice()\n      }\n    })\n  }\n\n  const resourcesPath = path.join(contentsPath, \"Resources\")\n\n  const fileAssociations = packager.fileAssociations\n  if (fileAssociations.length > 0) {\n    appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async fileAssociation => {\n      const extensions = asArray(fileAssociation.ext).map(normalizeExt)\n      const customIcon = await packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `${extensions[0]}.icns`)\n      let iconFile = appPlist.CFBundleIconFile\n      if (customIcon != null) {\n        iconFile = path.basename(customIcon)\n        await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile))\n      }\n\n      const result = {\n        CFBundleTypeExtensions: extensions,\n        CFBundleTypeName: fileAssociation.name || extensions[0],\n        CFBundleTypeRole: fileAssociation.role || \"Editor\",\n        CFBundleTypeIconFile: iconFile\n      } as any\n\n      if (fileAssociation.isPackage) {\n        result.LSTypeIsPackage = true\n      }\n      return result\n    })\n  }\n\n  if (asarIntegrity != null) {\n    appPlist.AsarIntegrity = JSON.stringify(asarIntegrity)\n  }\n\n  const promises: Array<Promise<any | null | undefined>> = [\n    writeFile(appPlistFilename, buildPlist(appPlist)),\n    writeFile(helperPlistFilename, buildPlist(helperPlist)),\n    writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),\n    writeFile(helperNPPlistFilename, buildPlist(helperNPPlist)),\n    doRename(path.join(contentsPath, \"MacOS\"), packager.electronDistMacOsExecutableName, appPlist.CFBundleExecutable),\n    unlinkIfExists(path.join(appOutDir, \"LICENSE\")),\n    unlinkIfExists(path.join(appOutDir, \"LICENSES.chromium.html\")),\n  ]\n\n  const icon = await packager.getIconPath()\n  if (icon != null) {\n    promises.push(unlinkIfExists(path.join(resourcesPath, oldIcon)))\n    promises.push(copyFile(icon, path.join(resourcesPath, appPlist.CFBundleIconFile)))\n  }\n\n  await Promise.all(promises)\n\n  await moveHelpers(frameworksPath, appFilename, packager.electronDistMacOsExecutableName)\n  const appPath = path.join(appOutDir, `${appFilename}.app`)\n  await rename(path.dirname(contentsPath), appPath)\n  // https://github.com/electron-userland/electron-builder/issues/840\n  const now = Date.now() / 1000\n  await utimes(appPath, now, now)\n}"]}

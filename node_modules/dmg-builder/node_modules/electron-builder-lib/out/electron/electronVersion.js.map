{"version":3,"file":"electronVersion.js","sourceRoot":"","sources":["../../src/electron/electronVersion.ts"],"names":[],"mappings":"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","sourcesContent":["import { log } from \"builder-util\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { orNullIfFileNotExist } from \"read-config-file\"\nimport { Configuration } from \"../configuration\"\nimport { getConfig } from \"../util/config\"\nimport { versionFromDependencyRange } from \"../util/packageMetadata\"\n\nexport type MetadataValue = Lazy<{ [key: string]: any } | null>\n\nexport async function getElectronVersion(projectDir: string, config?: Configuration, projectMetadata: MetadataValue = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))): Promise<string> {\n  if (config == null) {\n    config = await getConfig(projectDir, null, null)\n  }\n  if (config.electronVersion != null) {\n    return config.electronVersion\n  }\n  return await computeElectronVersion(projectDir, projectMetadata)\n}\n\nexport async function getElectronVersionFromInstalled(projectDir: string) {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    try {\n      return (await readJson(path.join(projectDir, \"node_modules\", name, \"package.json\"))).version\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        log.warn({name, error: e}, `cannot read electron version package.json`)\n      }\n    }\n  }\n  return null\n}\n\n/** @internal */\nexport async function computeElectronVersion(projectDir: string, projectMetadata: MetadataValue): Promise<string> {\n  const result = await getElectronVersionFromInstalled(projectDir)\n  if (result != null) {\n    return result\n  }\n\n  const electronPrebuiltDep = findFromElectronPrebuilt(await projectMetadata!!.value)\n  if (electronPrebuiltDep == null || electronPrebuiltDep === \"latest\") {\n    try {\n      const releaseInfo = JSON.parse((await httpExecutor.request({\n        hostname: \"github.com\",\n        path: \"/electron/electron/releases/latest\",\n        headers: {\n          Accept: \"application/json\",\n        },\n      }))!!)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      log.warn(e)\n    }\n\n    throw new Error(`Cannot find electron dependency to get electron version in the '${path.join(projectDir, \"package.json\")}'`)\n  }\n\n  return versionFromDependencyRange(electronPrebuiltDep)\n}\n\nfunction findFromElectronPrebuilt(packageData: any): any {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    const devDependencies = packageData.devDependencies\n    let dep = devDependencies == null ? null : devDependencies[name]\n    if (dep == null) {\n      const dependencies = packageData.dependencies\n      dep = dependencies == null ? null : dependencies[name]\n    }\n    if (dep != null) {\n      return dep\n    }\n  }\n  return null\n}"]}

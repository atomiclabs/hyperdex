{"version":3,"file":"ajvErrorNormalizer.js","sourceRoot":"","sources":["../src/ajvErrorNormalizer.ts"],"names":[],"mappings":"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","sourcesContent":["import { AdditionalPropertiesParams, ComparisonParams, DependenciesParams, ErrorObject, TypeParams } from \"ajv\"\n\nexport function normaliseErrorMessages(errors: Array<ErrorObject>, schemeData: object) {\n  const printer = new SchemeErrorPrinter(schemeData)\n  return \"Configuration is invalid.\\n\" +\n    filterErrors(errors)\n      .map(it => \" - \" + indent(printer.formatValidationError(it), \"   \", false))\n      .join(\"\\n\")\n}\n\n//tslint:disable-next-line:no-empty-interface\ninterface Scheme {\n  // to ensure that proper arg is passed\n}\n\nclass SchemeErrorPrinter {\n  constructor(readonly schemeData: Scheme) {\n  }\n\n  formatValidationError(error: ErrorObject) {\n    const dataPath = `configuration${error.dataPath}`\n    if (error.keyword === \"additionalProperties\") {\n      return `${dataPath} has an unknown property '${(error.params as AdditionalPropertiesParams).additionalProperty}'. These properties are valid:\\n${this.getSchemaPartText(error.parentSchema)}`\n    }\n    else if (error.keyword === \"oneOf\" || error.keyword === \"anyOf\") {\n      const children = (error as any).children\n      if (children && children.length > 0) {\n        // use set to remove duplicated messages like \"should be an object.\"\n        return `${dataPath} should be one of these:\\n${this.getSchemaPartText(error.parentSchema)}\\n` +\n          `Details:\\n${Array.from(new Set(children.map((it: ErrorObject) => \" * \" + indent(this.formatValidationError(it), \"   \", false)))).join(\"\\n\")}`\n      }\n      return `${dataPath} should be one of these:\\n${this.getSchemaPartText(error.parentSchema)}`\n\n    }\n    else if (error.keyword === \"enum\") {\n      if (error.parentSchema && (error.parentSchema as any).enum && (error.parentSchema as any).enum.length === 1) {\n        return `${dataPath} should be ${this.getSchemaPartText(error.parentSchema)}`\n      }\n      return `${dataPath} should be one of these:\\n${this.getSchemaPartText(error.parentSchema)}`\n    }\n    else if (error.keyword === \"allOf\") {\n      return `${dataPath} should be:\\n${this.getSchemaPartText(error.parentSchema)}`\n    }\n    else if (error.keyword === \"type\") {\n      switch ((error.params as TypeParams).type) {\n        case \"object\":\n          return `${dataPath} should be an object.`\n        case \"string\":\n          return `${dataPath} should be a string.`\n        case \"boolean\":\n          return `${dataPath} should be a boolean.`\n        case \"number\":\n          return `${dataPath} should be a number.`\n        case \"array\":\n          return `${dataPath} should be an array:\\n${this.getSchemaPartText(error.parentSchema)}`\n      }\n      return `${dataPath} should be ${(error.params as TypeParams).type}:\\n${this.getSchemaPartText(error.parentSchema)}`\n    }\n    else if (error.keyword === \"instanceof\") {\n      return `${dataPath} should be an instance of ${this.getSchemaPartText(error.parentSchema)}.`\n    }\n    else if (error.keyword === \"required\") {\n      const missingProperty = (error.params as DependenciesParams).missingProperty.replace(/^\\./, \"\")\n      return `${dataPath} misses the property '${missingProperty}'.\\n${this.getSchemaPartText(error.parentSchema, [\"properties\", missingProperty])}`\n    }\n    else if (error.keyword === \"minLength\" || error.keyword === \"minItems\") {\n      if ((error.params as ComparisonParams).limit === 1) {\n        return `${dataPath} should not be empty.`\n      }\n      else {\n        return `${dataPath} ${error.message}`\n      }\n    }\n    else if (error.keyword === \"absolutePath\") {\n      const baseMessage = `${dataPath}: ${error.message}`\n      if (dataPath === \"configuration.output.filename\") {\n        return `${baseMessage}\\n` +\n          \"Please use output.path to specify absolute path and output.filename for the file name.\"\n      }\n      return baseMessage\n    }\n    else {\n      // eslint-disable-line no-fallthrough\n      return `${dataPath} ${error.message} (${JSON.stringify(error, null, 2)}).\\n${this.getSchemaPartText(error.parentSchema)}`\n    }\n  }\n\n  private getSchemaPart(path: string) {\n    const pathList = path.split(\"/\").slice(0, path.length)\n    let schemaPart = this.schemeData as any\n    for (let i = 1; i < pathList.length; i++) {\n      const inner = schemaPart[pathList[i]]\n      if (inner) {\n        schemaPart = inner\n      }\n    }\n    return schemaPart\n  }\n\n  private getSchemaPartText(schemaPart: any, additionalPath: Array<string> | null = null) {\n    if (additionalPath != null) {\n      for (const p of additionalPath) {\n        const inner = schemaPart[p]\n        if (inner) {\n          schemaPart = inner\n        }\n      }\n    }\n\n    while (schemaPart.$ref != null) {\n      schemaPart = this.getSchemaPart(schemaPart.$ref)\n    }\n\n    let schemaText = this.formatSchema(schemaPart)\n    let description = schemaPart.description\n    if (description != null) {\n      description = description.trim()\n      const twoLineBreakPosition = description.indexOf(\"\\n\\n\")\n      description = twoLineBreakPosition < 0 ? description : description.substring(0, twoLineBreakPosition)\n      schemaText += `\\n${description}\\n`\n    }\n    return schemaText\n  }\n\n  private formatSchema(schema: any, prevSchemas?: any) {\n    prevSchemas = prevSchemas || []\n\n    const formatInnerSchema = (innerSchema: any, isAddSelf = false): string => {\n      if (!isAddSelf) {\n        return this.formatSchema(innerSchema, prevSchemas)\n      }\n      if (prevSchemas.indexOf(innerSchema) >= 0) {\n        return \"(recursive)\"\n      }\n      return this.formatSchema(innerSchema, prevSchemas.concat(schema))\n    }\n\n    if (schema.type === \"string\") {\n      if (schema.minLength === 1) {\n        return \"non-empty string\"\n      }\n      else if (schema.minLength > 1) {\n        return `string (min length ${schema.minLength})`\n      }\n      else {\n        return \"string\"\n      }\n    }\n    else if (schema.type === \"boolean\") {\n      return \"boolean\"\n    }\n    else if (schema.type === \"number\") {\n      return \"number\"\n    }\n    else if (schema.type === \"object\") {\n      if (schema.properties) {\n        const required = schema.required || []\n        return `object { ${Object.keys(schema.properties).map(property => {\n          if (required.indexOf(property) < 0) {\n            return property + \"?\"\n          }\n          return property\n        }).concat(schema.additionalProperties ? [\"...\"] : []).join(\", \")} }`\n      }\n      if (schema.additionalProperties) {\n        return `object { <key>: ${formatInnerSchema(schema.additionalProperties)} }`\n      }\n      return \"object\"\n    }\n    else if (schema.type === \"array\") {\n      return `[${formatInnerSchema(schema.items)}]`\n    }\n\n    switch (schema.instanceof) {\n      case \"Function\":\n        return \"function\"\n      case \"RegExp\":\n        return \"RegExp\"\n    }\n\n    if (schema.$ref != null) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true)\n    }\n    if (schema.allOf) {\n      return schema.allOf.map(formatInnerSchema).join(\" & \")\n    }\n    if (schema.oneOf) {\n      return schema.oneOf.map(formatInnerSchema).join(\" | \")\n    }\n    if (schema.anyOf) {\n      return schema.anyOf.map(formatInnerSchema).join(\" | \")\n    }\n    if (schema.enum) {\n      return schema.enum.map((it: object) => JSON.stringify(it)).join(\" | \")\n    }\n    return JSON.stringify(schema, null, 2)\n  }\n}\n\nfunction indent(str: string, prefix: string, isFirstLine: boolean) {\n  if (isFirstLine) {\n    return prefix + str.replace(/\\n(?!$)/g, \"\\n\" + prefix)\n  }\n  else {\n    return str.replace(/\\n(?!$)/g, `\\n${prefix}`)\n  }\n}\n\nfunction filterErrors(errors: Array<ErrorObject>) {\n  let newErrors: Array<any> = []\n  for (const error of errors) {\n    const dataPath = error.dataPath\n    let children: Array<ErrorObject> = []\n    newErrors = newErrors.filter(oldError => {\n      if (!oldError.dataPath.includes(dataPath)) {\n        return true\n      }\n\n      if (oldError.children != null) {\n        children = children.concat(oldError.children.slice(0))\n      }\n      oldError.children = null\n      children.push(oldError)\n      return false\n    })\n\n    if (children.length > 0) {\n      (error as any).children = children\n    }\n    newErrors.push(error)\n  }\n  return newErrors\n}"]}

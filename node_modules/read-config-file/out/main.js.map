{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFile, readJson } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { Lazy } from \"lazy-val\"\nimport Ajv, { ErrorObject } from \"ajv\"\nimport { normaliseErrorMessages } from \"./ajvErrorNormalizer\"\nimport { parse as parseEnv } from \"dotenv\"\n\nexport interface ReadConfigResult<T> {\n  readonly result: T\n  readonly configFile: string | null\n}\n\nexport async function readConfig<T>(configFile: string): Promise<ReadConfigResult<T>> {\n  const data = await readFile(configFile, \"utf8\")\n  let result\n  if (configFile.endsWith(\".json5\") || configFile.endsWith(\".json\")) {\n    result = require(\"json5\").parse(data)\n  }\n  else if (configFile.endsWith(\".toml\")) {\n    result = require(\"toml\").parse(data)\n  }\n  else {\n    result = safeLoad(data)\n  }\n  return {result, configFile}\n}\n\nexport async function findAndReadConfig<T>(request: ReadConfigRequest): Promise<ReadConfigResult<T> | null> {\n  const prefix = request.configFilename\n  for (const configFile of [`${prefix}.yml`, `${prefix}.yaml`, `${prefix}.json`, `${prefix}.json5`, `${prefix}.toml`]) {\n    const data = await orNullIfFileNotExist(readConfig<T>(path.join(request.projectDir, configFile)))\n    if (data != null) {\n      return data\n    }\n  }\n\n  return null\n}\n\nexport function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null> {\n  return orIfFileNotExist(promise, null)\n}\n\nexport function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T> {\n  return promise\n    .catch(e => {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        return fallbackValue\n      }\n      throw e\n    })\n}\n\nexport interface ReadConfigRequest {\n  packageKey: string\n  configFilename: string\n\n  projectDir: string\n  packageMetadata: Lazy<{ [key: string]: any } | null> | null\n}\n\nexport async function loadConfig<T>(request: ReadConfigRequest): Promise<ReadConfigResult<T> | null> {\n  let packageMetadata = request.packageMetadata == null ? null : await request.packageMetadata.value\n  if (packageMetadata == null) {\n    packageMetadata = await orNullIfFileNotExist(readJson(path.join(request.projectDir, \"package.json\")))\n  }\n  const data: T = packageMetadata == null ? null : packageMetadata[request.packageKey]\n  return data == null ? findAndReadConfig<T>(request) : {result: data, configFile: null}\n}\n\nexport function getConfig<T>(request: ReadConfigRequest, configPath?: string | null): Promise<ReadConfigResult<T> | null> {\n  if (configPath == null) {\n    return loadConfig<T>(request)\n  }\n  else {\n    return readConfig<T>(path.resolve(request.projectDir, configPath))\n  }\n}\n\nexport async function loadParentConfig<T>(request: ReadConfigRequest, spec: string): Promise<ReadConfigResult<T>> {\n  let isFileSpec: boolean | undefined\n  if (spec.startsWith(\"file:\")) {\n    spec = spec.substring(\"file:\".length)\n    isFileSpec = true\n  }\n\n  let parentConfig = await orNullIfFileNotExist(readConfig<T>(path.resolve(request.projectDir, spec)))\n  if (parentConfig == null && isFileSpec !== true) {\n    let resolved: string | null = null\n    try {\n      resolved = require.resolve(spec)\n    }\n    catch (e) {\n      // ignore\n    }\n\n    if (resolved != null) {\n      parentConfig = await readConfig<T>(resolved)\n    }\n  }\n\n  if (parentConfig == null) {\n    throw new Error(`Cannot find parent config file: ${spec}`)\n  }\n\n  return parentConfig\n}\n\nexport async function validateConfig(config: any, scheme: Lazy<any>, errorMessage: (error: string, errors: Array<ErrorObject>) => string) {\n  const ajv = new Ajv({\n    allErrors: true,\n    coerceTypes: true,\n    verbose: true,\n    errorDataPath: \"configuration\",\n  })\n  require(\"ajv-keywords\")(ajv, [\"typeof\"])\n  const schema = await scheme.value\n  const validator = ajv.compile(schema)\n\n  if (!validator(config)) {\n    const error = new Error(errorMessage(normaliseErrorMessages(validator.errors!, schema), validator.errors!!));\n    (error as any).code = \"ERR_CONFIG_INVALID\"\n    throw error\n  }\n}\n\nexport async function loadEnv(envFile: string) {\n  const data = await orNullIfFileNotExist(readFile(envFile, \"utf8\"))\n  if (data == null) {\n    return null\n  }\n\n  const parsed = parseEnv(data)\n  for (const key of Object.keys(parsed)) {\n    if (!process.env.hasOwnProperty(key)) {\n      process.env[key] = parsed[key]\n    }\n  }\n  require(\"dotenv-expand\")(parsed)\n  return parsed\n}"]}

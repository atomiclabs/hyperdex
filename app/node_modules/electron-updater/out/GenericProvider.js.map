{"version":3,"file":"GenericProvider.js","sourceRoot":"","sources":["../src/GenericProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAwB,AAAS,AAAE,AAAQ,AAAc,AAAM,AAAsB;;;;;;;;;;AAE5F,AAAO,AAAE,AAAkB,AAAE,AAAoB,AAAE,AAAqB,AAAE,AAAmB,AAAE,AAAU,AAAE,AAAc,AAAE,AAAQ,AAA0B,AAAM,AAAQ;;;;;;;;;;AAC3K,AAAO,AAAE,AAAe,AAAE,AAAY,AAAE,AAAM,AAAY,AAE1D,AAAM;;;;;;;;;;MAAuB,wBAAQ,AAAoB;AAGvD,cAA6B,AAAmC,eAAmB,AAAmB,SAAE,AAAuB,0BAAG,AAAI;AACpI,AAAK,UAAC,AAAO,QAAC,AAAY,cAAE,AAAuB,AAAC;AADzB,SAAa,gBAAb,AAAa,AAAsB;AAAmB,SAAO,UAAP,AAAO,AAAY;AAFrF,SAAO,UAAG,AAAU,wBAAC,AAAI,KAAC,AAAa,cAAC,AAAG,AAAC,AAI7D;AAAC;;AAED,MAAY,AAAO;AACjB,UAAM,AAAM,SAAG,AAAI,KAAC,AAAO,QAAC,AAAO,WAAI,AAAI,KAAC,AAAa,cAAC,AAAO;AACjE,WAAO,AAAM,UAAI,AAAI,AAAC,AAAC,OAAC,AAAqB,AAAE,AAAC,AAAC,uCAAC,AAAoB,kCAAC,AAAM,AAAC,AAChF;AAAC;;AAEK,AAAgB,kBAAtB,AAAK;;;;AACH,UAAI,AAAkB;AACtB,YAAM,AAAW,cAAG,AAAkB,gCAAC,AAAI,MAAC,AAAO,AAAC;AACpD,YAAM,AAAU,aAAG,AAAc,4BAAC,AAAW,aAAE,AAAI,MAAC,AAAO,SAAE,AAAI,AAAC;;AAClE,WAAK,IAAI,AAAa,gBAAG,AAAC,IAAI,AAAa,AAAE,iBAAE;AAC7C,YAAI;AACF,AAAM,mBAAG,AAAe,kCAAC,MAAM,AAAI,MAAC,AAAW,YAAC,AAAU,AAAC,cAAE,AAAW,aAAE,AAAU,AAAC;AACrF,AAAK;AACN,UACD,OAAO,AAAC,GAAE;AACR,cAAI,AAAC,aAAY,AAAS,mCAAI,AAAC,EAAC,AAAU,eAAK,AAAG,KAAE;AAClD,kBAAM,AAAQ,AAAC,4DAAwB,AAAW,6BAAkB,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,IAAE,AAAoC,AAAC;AAClI,iBACI,IAAI,AAAC,EAAC,AAAI,SAAK,AAAc,gBAAE;AAClC,gBAAI,AAAa,gBAAG,AAAC,GAAE;AACrB,wBAAU,AAAO,QAAC,CAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AACpC,oBAAI;AACF,AAAU,6BAAC,AAAO,SAAE,AAAI,OAAG,AAAa,AAAC;AAC1C,kBACD,OAAO,AAAC,GAAE;AACR,AAAM,yBAAC,AAAC,AAAC;AACV,AACH;AAAC,AAAC,eAPI;AAQN,AAAQ;AACT;AACF;;AACD,gBAAM,AAAC;AACR;AACF;;AAED,UAAI,AAAmB,AAAE,oCAAE;AACxB,AAAc,eAAC,AAAc,iBAAG,AAAU,WAAC,AAAI;AACjD;;AACD,aAAO,AAAM,AACf;;AAAC;;AAED,AAAY,eAAC,AAAsB;AACjC,WAAO,AAAY,8BAAC,AAAU,YAAE,AAAI,KAAC,AAAO,AAAC,AAC/C;AAAC,AACF","sourcesContent":["import { GenericServerOptions, HttpError, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { getChannelFilename, getCustomChannelName, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nexport class GenericProvider extends Provider<UpdateInfo> {\n  private readonly baseUrl = newBaseUrl(this.configuration.url)\n\n  constructor(private readonly configuration: GenericServerOptions, private readonly updater: AppUpdater, useMultipleRangeRequest = true) {\n    super(updater.httpExecutor, useMultipleRangeRequest)\n  }\n\n  private get channel(): string {\n    const result = this.updater.channel || this.configuration.channel\n    return result == null ? getDefaultChannelName() : getCustomChannelName(result)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    let result: UpdateInfo\n    const channelFile = getChannelFilename(this.channel)\n    const channelUrl = newUrlFromBase(channelFile, this.baseUrl, true)\n    for (let attemptNumber = 0; ; attemptNumber++) {\n      try {\n        result = parseUpdateInfo(await this.httpRequest(channelUrl), channelFile, channelUrl)\n        break\n      }\n      catch (e) {\n        if (e instanceof HttpError && e.statusCode === 404) {\n          throw newError(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n        }\n        else if (e.code === \"ECONNREFUSED\") {\n          if (attemptNumber < 3) {\n            await new Promise((resolve, reject) => {\n              try {\n                setTimeout(resolve, 1000 * attemptNumber)\n              }\n              catch (e) {\n                reject(e)\n              }\n            })\n            continue\n          }\n        }\n        throw e\n      }\n    }\n\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = channelUrl.href\n    }\n    return result\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return resolveFiles(updateInfo, this.baseUrl)\n  }\n}"]}

{"version":3,"file":"NsisUpdater.js","sourceRoot":"","sources":["../src/NsisUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationToken, DownloadOptions, newError, PackageFileInfo, UpdateInfo } from \"builder-util-runtime\"\nimport { spawn } from \"child_process\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport { BaseUpdater } from \"./BaseUpdater\"\nimport { FileWithEmbeddedBlockMapDifferentialDownloader } from \"./differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader\"\nimport { GenericDifferentialDownloader } from \"./differentialDownloader/GenericDifferentialDownloader\"\nimport { newUrlFromBase, ResolvedUpdateFileInfo } from \"./main\"\nimport { findFile, Provider } from \"./Provider\"\nimport { unlink } from \"fs-extra-p\"\nimport { verifySignature } from \"./windowsExecutableCodeSignatureVerifier\"\n\nexport class NsisUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const provider = await this.provider\n    const fileInfo = findFile(provider.resolveFiles(updateInfo), \"exe\")!!\n    const requestHeaders = await this.computeRequestHeaders()\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: requestHeaders,\n      cancellationToken,\n      sha512: fileInfo.info.sha512,\n    }\n\n    return await this.executeDownload({\n      fileExtension: \"exe\",\n      downloadOptions,\n      fileInfo,\n      updateInfo,\n      task: async (destinationFile, packageFile, removeTempDirIfAny) => {\n        if (await this.differentialDownloadInstaller(fileInfo, destinationFile, requestHeaders, provider)) {\n          await this.httpExecutor.download(fileInfo.url.href, destinationFile, downloadOptions)\n        }\n\n        const signatureVerificationStatus = await this.verifySignature(destinationFile)\n        if (signatureVerificationStatus != null) {\n          await removeTempDirIfAny()\n          // noinspection ThrowInsideFinallyBlockJS\n          throw newError(`New version ${updateInfo!.version} is not signed by the application owner: ${signatureVerificationStatus}`, \"ERR_UPDATER_INVALID_SIGNATURE\")\n        }\n\n        const packageInfo = fileInfo.packageInfo\n        if (packageInfo != null && packageFile != null) {\n          if (await this.differentialDownloadWebPackage(packageInfo, packageFile, provider)) {\n            try {\n              await this.httpExecutor.download(packageInfo.path, packageFile, {\n                skipDirCreation: true,\n                headers: requestHeaders,\n                cancellationToken,\n                sha512: packageInfo.sha512,\n              })\n            }\n            catch (e) {\n              try {\n                await unlink(packageFile)\n              }\n              catch (ignored) {\n                // ignore\n              }\n\n              throw e\n            }\n          }\n        }\n      },\n    })\n  }\n\n  // $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n  // | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n  // | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\n  private async verifySignature(tempUpdateFile: string): Promise<string | null> {\n    let publisherName: Array<string> | string | null\n    try {\n      publisherName = (await this.configOnDisk.value).publisherName\n      if (publisherName == null) {\n        return null\n      }\n    }\n    catch (e) {\n      if (e.code === \"ENOENT\") {\n        // no app-update.yml\n        return null\n      }\n      throw e\n    }\n    return await verifySignature(Array.isArray(publisherName) ? publisherName : [publisherName], tempUpdateFile, this._logger)\n  }\n\n  protected doInstall(installerPath: string, isSilent: boolean, isForceRunAfter: boolean): boolean {\n    const args = [\"--updated\"]\n    if (isSilent) {\n      args.push(\"/S\")\n    }\n\n    if (isForceRunAfter) {\n      args.push(\"--force-run\")\n    }\n\n    const packagePath = this.downloadedUpdateHelper.packageFile\n    if (packagePath != null) {\n      // only = form is supported\n      args.push(`--package-file=\"${packagePath}\"`)\n    }\n\n    const spawnOptions = {\n      detached: true,\n      stdio: \"ignore\",\n    }\n\n    try {\n      spawn(installerPath, args, spawnOptions)\n        .unref()\n    }\n    catch (e) {\n      // yes, such errors dispatched not as error event\n      // https://github.com/electron-userland/electron-builder/issues/1129\n      if ((e as any).code === \"UNKNOWN\" || (e as any).code === \"EACCES\") { // Node 8 sends errors: https://nodejs.org/dist/latest-v8.x/docs/api/errors.html#errors_common_system_errors\n        this._logger.info(\"Access denied or UNKNOWN error code on spawn, will be executed again using elevate\")\n        try {\n          spawn(path.join(process.resourcesPath!, \"elevate.exe\"), [installerPath].concat(args), spawnOptions)\n            .unref()\n        }\n        catch (e) {\n          this.dispatchError(e)\n        }\n      }\n      else {\n        this.dispatchError(e)\n      }\n    }\n\n    return true\n  }\n\n  private async differentialDownloadInstaller(fileInfo: ResolvedUpdateFileInfo, installerPath: string, requestHeaders: OutgoingHttpHeaders, provider: Provider<any>) {\n    if (process.env.__NSIS_DIFFERENTIAL_UPDATE__ == null) {\n      return true\n    }\n\n    try {\n      const blockMapData = JSON.parse((await provider.httpRequest(newUrlFromBase(`${fileInfo.url.pathname}.blockMap.json`, fileInfo.url, true)))!!)\n      await new GenericDifferentialDownloader(fileInfo.info, this.httpExecutor, {\n        newUrl: fileInfo.url.href,\n        oldFile: path.join(this.app.getPath(\"userData\"), \"installer.exe\"),\n        logger: this._logger,\n        newFile: installerPath,\n        useMultipleRangeRequest: provider.useMultipleRangeRequest,\n        requestHeaders,\n      })\n        .download(blockMapData)\n    }\n    catch (e) {\n      this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n      // during test (developer machine mac) we must throw error\n      return process.platform === \"win32\"\n    }\n\n    return false\n  }\n\n  private async differentialDownloadWebPackage(packageInfo: PackageFileInfo, packagePath: string, provider: Provider<any>): Promise<boolean> {\n    if (packageInfo.blockMapSize == null) {\n      return true\n    }\n\n    try {\n      await new FileWithEmbeddedBlockMapDifferentialDownloader(packageInfo, this.httpExecutor, {\n        newUrl: packageInfo.path,\n        oldFile: path.join(process.resourcesPath!, \"..\", \"package.7z\"),\n        logger: this._logger,\n        newFile: packagePath,\n        requestHeaders: this.requestHeaders,\n        useMultipleRangeRequest: provider.useMultipleRangeRequest,\n      })\n        .download()\n    }\n    catch (e) {\n      this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n      // during test (developer machine mac or linux) we must throw error\n      return process.platform === \"win32\"\n    }\n    return false\n  }\n}\n"]}

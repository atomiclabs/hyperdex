{"version":3,"file":"providerFactory.js","sourceRoot":"","sources":["../src/providerFactory.ts"],"names":[],"mappings":";;;;;;;AAAA,AAAO,AAA0E,AAAwB,AAAiB,AAAQ,AAAwB,AAAM,AAAsB;;;;;;;;;;AAEtL,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB;;;;;;;;;;AACnD,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB;;;;;;;;;;AACnD,AAAO,AAAE,AAAc,AAAE,AAAM,AAAkB;;;;;;;;;;AACjD,AAAO,AAAE,AAAqB,AAAE,AAAM,AAAyB,AAE/D,AAAM;;;;;;;;;;sBAAuB,AAA8C,MAAE,AAAmB;AAC9F,AAAqC;AACrC,MAAI,OAAO,AAAI,SAAK,AAAQ,UAAE;AAC5B,UAAM,AAAQ,oCAAC,AAAyC,2CAAE,AAA4C,AAAC;AACxG;;AAED,QAAM,AAAY,eAAG,AAAO,QAAC,AAAY;AACzC,QAAM,AAAQ,WAAG,AAAI,KAAC,AAAQ;;AAC9B,UAAQ,AAAQ,AAAE;AAChB,SAAK,AAAQ;AACX,YAAM,AAAa,gBAAG,AAAqB;AAC3C,YAAM,AAAK,QAAG,CAAC,AAAa,cAAC,AAAO,AAAC,AAAC,UAAC,AAAO,QAAC,AAAG,IAAC,AAAQ,YAAI,AAAO,QAAC,AAAG,IAAC,AAAY,AAAC,AAAC,eAAC,AAAI,AAAC,SAAI,AAAa,cAAC,AAAK;;AACtH,UAAI,AAAK,SAAI,AAAI,MAAE;AACjB,eAAO,KAAI,AAAc,kCAAC,AAAa,eAAE,AAAO,SAAE,AAAY,AAAC;AAChE,aACI;AACH,eAAO,KAAI,AAAqB,gDAAC,AAAa,eAAE,AAAK,OAAE,AAAY,AAAC;AACrE;;AAEH,SAAK,AAAI,AAAC;AACV,SAAK,AAAQ;AACX,kBAAW,AAAe;AACxB,AAAQ,kBAAE,AAAS;AACnB,AAAG,aAAE,AAAwB,oDAAC,AAAI,AAAC;AACnC,AAAO,iBAAG,AAAsB,KAAC,AAAO,WAAI,AAAI,AACjD;AAJ0B,SAIxB,AAAO,SAAE,AAAQ,aAAK,AAAQ;AAAC,AAAuE,AAAC;AAJnG;;AAMT,SAAK,AAAS;AACZ,YAAM,AAAO,UAAG,AAA4B;AAC5C,aAAO,KAAI,AAAe,oCAAC,AAAO,SAAE,AAAO,SAAE,AAAO,QAAC,AAAuB,4BAAK,AAAK,SAAI,CAAC,AAAO,QAAC,AAAG,IAAC,AAAQ,SAAC,AAAkB,AAAC,AAAC;;AAEtI,SAAK,AAAS;AACZ,aAAO,KAAI,AAAe,oCAAC,AAAsB,MAAE,AAAY,AAAC;;AAElE;AACE,YAAM,AAAQ,AAAC,6DAAyB,AAAQ,QAAE,IAAE,AAAkC,AAAC,AAC1F,AACH;;AAAC","sourcesContent":["import { AllPublishOptions, BaseS3Options, BintrayOptions, GenericServerOptions, getS3LikeProviderBaseUrl, GithubOptions, newError, PublishConfiguration } from \"builder-util-runtime\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { BintrayProvider } from \"./BintrayProvider\"\nimport { GenericProvider } from \"./GenericProvider\"\nimport { GitHubProvider } from \"./GitHubProvider\"\nimport { PrivateGitHubProvider } from \"./PrivateGitHubProvider\"\n\nexport function createClient(data: PublishConfiguration | AllPublishOptions, updater: AppUpdater) {\n  // noinspection SuspiciousTypeOfGuard\n  if (typeof data === \"string\") {\n    throw newError(\"Please pass PublishConfiguration object\", \"ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION\")\n  }\n\n  const httpExecutor = updater.httpExecutor\n  const provider = data.provider\n  switch (provider) {\n    case \"github\":\n      const githubOptions = data as GithubOptions\n      const token = (githubOptions.private ? process.env.GH_TOKEN || process.env.GITHUB_TOKEN : null) || githubOptions.token\n      if (token == null) {\n        return new GitHubProvider(githubOptions, updater, httpExecutor)\n      }\n      else {\n        return new PrivateGitHubProvider(githubOptions, token, httpExecutor)\n      }\n\n    case \"s3\":\n    case \"spaces\":\n      return new GenericProvider({\n        provider: \"generic\",\n        url: getS3LikeProviderBaseUrl(data),\n        channel: (data as BaseS3Options).channel || null\n      }, updater, provider === \"spaces\" /* https://github.com/minio/minio/issues/5285#issuecomment-350428955 */)\n\n    case \"generic\":\n      const options = data as GenericServerOptions\n      return new GenericProvider(options, updater, options.useMultipleRangeRequest !== false && !options.url.includes(\"s3.amazonaws.com\"))\n\n    case \"bintray\":\n      return new BintrayProvider(data as BintrayOptions, httpExecutor)\n\n    default:\n      throw newError(`Unsupported provider: ${provider}`, \"ERR_UPDATER_UNSUPPORTED_PROVIDER\")\n  }\n}"]}

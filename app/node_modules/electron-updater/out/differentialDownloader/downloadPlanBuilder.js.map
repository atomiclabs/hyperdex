{"version":3,"file":"downloadPlanBuilder.js","sourceRoot":"","sources":["../../src/differentialDownloader/downloadPlanBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockMap, BlockMapFile } from \"builder-util-runtime/out/blockMapApi\"\nimport { Logger } from \"../main\"\n\nexport enum OperationKind {\n  COPY, DOWNLOAD\n}\n\nexport interface Operation {\n  kind: OperationKind\n\n  start: number\n  end: number\n}\n\nexport function computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap, logger: Logger) {\n  const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\n  const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\n\n  const oldEntryMap = buildEntryMap(oldBlockMap.files)\n\n  let lastOperation: Operation | null = null\n\n  const operations: Array<Operation> = []\n  for (const blockMapFile of newBlockMap.files) {\n    const name = blockMapFile.name\n    const oldEntry = oldEntryMap.get(name)\n    if (oldEntry == null) {\n      // new file\n      operations.push({\n        kind: OperationKind.DOWNLOAD,\n        start: blockMapFile.offset,\n        end: blockMapFile.offset + blockMapFile.sizes.reduce((accumulator, currentValue) => accumulator + currentValue),\n      })\n      continue\n    }\n\n    const newFile = nameToNewBlocks.get(name)!!\n    let changedBlockCount = 0\n\n    const {checksumToOffset: checksumToOldOffset, checksumToOldSize} = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset)\n\n    let newOffset = blockMapFile.offset\n    for (let i = 0; i < newFile.checksums.length; newOffset += newFile.sizes[i], i++) {\n      const blockSize = newFile.sizes[i]\n      const checksum = newFile.checksums[i]\n      let oldOffset: number | null | undefined = checksumToOldOffset.get(checksum)\n      if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\n        logger.warn(`Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(checksum)}, new: ${blockSize})`)\n        oldOffset = null\n      }\n\n      if (oldOffset == null) {\n        changedBlockCount++\n\n        if (lastOperation == null || lastOperation.kind !== OperationKind.DOWNLOAD || lastOperation.end !== newOffset) {\n          lastOperation = {\n            kind: OperationKind.DOWNLOAD,\n            start: newOffset,\n            end: newOffset + blockSize,\n          }\n          operations.push(lastOperation)\n        }\n        else {\n          lastOperation.end += blockSize\n        }\n      }\n      else if (lastOperation == null || lastOperation.kind !== OperationKind.COPY || lastOperation.end !== oldOffset) {\n        lastOperation = {\n          kind: OperationKind.COPY,\n          start: oldOffset,\n          end: oldOffset + blockSize,\n        }\n        operations.push(lastOperation)\n      }\n      else {\n        lastOperation.end += blockSize\n      }\n    }\n\n    if (changedBlockCount > 0) {\n      logger.info(`File${blockMapFile.name === \"file\" ? \"\" : (\" \" + blockMapFile.name)} has ${changedBlockCount} changed blocks`)\n    }\n  }\n  return operations\n}\n\nfunction buildChecksumMap(file: BlockMapFile, fileOffset: number) {\n  const checksumToOffset = new Map<string, number>()\n  const checksumToSize = new Map<string, number>()\n  let offset = fileOffset\n  for (let i = 0; i < file.checksums.length; i++) {\n    const checksum = file.checksums[i]\n    const size = file.sizes[i]\n    checksumToOffset.set(checksum, offset)\n    checksumToSize.set(checksum, size)\n    offset += size\n  }\n  return {checksumToOffset, checksumToOldSize: checksumToSize}\n}\n\nfunction buildEntryMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n\nfunction buildBlockFileMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}"]}

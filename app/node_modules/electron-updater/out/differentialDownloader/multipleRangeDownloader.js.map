{"version":3,"file":"multipleRangeDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/multipleRangeDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHttpError, safeGetHeader } from \"builder-util-runtime\"\nimport { IncomingMessage } from \"http\"\nimport { Writable } from \"stream\"\nimport { copyData, DataSplitter, PartListDataTask } from \"./DataSplitter\"\nimport { DifferentialDownloader } from \"./DifferentialDownloader\"\nimport { Operation, OperationKind } from \"./downloadPlanBuilder\"\n\nexport function executeTasks(differentialDownloader: DifferentialDownloader, tasks: Array<Operation>, out: Writable, oldFileFd: number, reject: (error: Error) => void) {\n  const w = (taskOffset: number) => {\n    if (taskOffset >= tasks.length) {\n      if (differentialDownloader.fileMetadataBuffer != null) {\n        out.write(differentialDownloader.fileMetadataBuffer)\n      }\n      out.end()\n      return\n    }\n\n    const nextOffset = taskOffset + (differentialDownloader.options.useMultipleRangeRequest === false ? 1 : 1000)\n    _executeTasks(differentialDownloader, {\n      tasks,\n      start: taskOffset,\n      end: Math.min(tasks.length, nextOffset),\n      oldFileFd,\n    }, out, () => w(nextOffset), reject)\n  }\n  return w\n}\n\nexport function _executeTasks(differentialDownloader: DifferentialDownloader, options: PartListDataTask, out: Writable, resolve: () => void, reject: (error: Error) => void) {\n  let ranges = \"bytes=\"\n  let partCount = 0\n  const partIndexToTaskIndex = new Map<number, number>()\n  const partIndexToLength: Array<number> = []\n  for (let i = options.start; i < options.end; i++) {\n    const task = options.tasks[i]\n    if (task.kind === OperationKind.DOWNLOAD) {\n      ranges += `${task.start}-${task.end - 1}, `\n      partIndexToTaskIndex.set(partCount, i)\n      partCount++\n      partIndexToLength.push(task.end - task.start)\n    }\n  }\n\n  if (partCount <= 1) {\n    // the only remote range - copy\n    const w = (index: number) => {\n      if (index >= options.end) {\n        resolve()\n        return\n      }\n\n      const task = options.tasks[index++]\n\n      if (task.kind === OperationKind.COPY) {\n        copyData(task, out, options.oldFileFd, reject, () => w(index))\n      }\n      else {\n        const requestOptions = differentialDownloader.createRequestOptions(\"get\")\n        requestOptions.headers!!.Range = `bytes=${task.start}-${task.end - 1}`\n        const request = differentialDownloader.httpExecutor.doRequest(requestOptions, response => {\n          if (!checkIsRangesSupported(response, reject)) {\n            return\n          }\n\n          response.pipe(out, {\n            end: false\n          })\n          response.once(\"end\", () => w(index))\n        })\n        differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n        request.end()\n      }\n    }\n\n    w(options.start)\n    return\n  }\n\n  const requestOptions = differentialDownloader.createRequestOptions(\"get\")\n  requestOptions.headers!!.Range = ranges.substring(0, ranges.length - 2)\n  const request = differentialDownloader.httpExecutor.doRequest(requestOptions, response => {\n    if (!checkIsRangesSupported(response, reject)) {\n      return\n    }\n\n    const contentType = safeGetHeader(response, \"content-type\")\n    const m = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i.exec(contentType)\n    if (m == null) {\n      reject(new Error(`Content-Type \"multipart/byteranges\" is expected, but got \"${contentType}\"`))\n      return\n    }\n\n    const dicer = new DataSplitter(out, options, partIndexToTaskIndex, m[1] || m[2], partIndexToLength, resolve)\n    dicer.on(\"error\", reject)\n    response.pipe(dicer)\n  })\n  differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n  request.end()\n}\n\nexport function checkIsRangesSupported(response: IncomingMessage, reject: (error: Error) => void): boolean {\n  // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n  if (response.statusCode!! >= 400) {\n    reject(createHttpError(response))\n    return false\n  }\n\n  if (response.statusCode !== 206) {\n    const acceptRanges = safeGetHeader(response, \"accept-ranges\")\n    if (acceptRanges == null || acceptRanges === \"none\") {\n      reject(new Error(`Server doesn't support Accept-Ranges (response code ${response.statusCode})`))\n      return false\n    }\n  }\n  return true\n}"]}

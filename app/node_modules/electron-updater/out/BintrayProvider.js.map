{"version":3,"file":"BintrayProvider.js","sourceRoot":"","sources":["../src/BintrayProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAkB,AAAiB,AAAgB,AAAQ,AAAc,AAAM,AAAsB;;;;;;;;;;AAC5G,AAAO,AAAE,AAAa,AAAE,AAAM,AAAkC;;;;;;;;;;AAChE,AAAO,AAAE,AAAG,AAAE,AAAM,AAAK;;;;;;;;;;AACzB,AAAO,AAAE,AAAkB,AAAE,AAAqB,AAAE,AAAU,AAAE,AAAQ,AAA0B,AAAM,AAAQ;;;;;;;;;;AAChH,AAAO,AAAE,AAAe,AAAE,AAAY,AAAE,AAAM,AAAY,AAE1D,AAAM;;;;;;;;;;MAAuB,wBAAQ,AAAoB;AAIvD,cAAY,AAA6B,eAAE,AAA+B;AACxE,AAAK,UAAC,AAAY,AAAC;AAEnB,AAAI,SAAC,AAAM,SAAG,KAAI,AAAa,0BAAC,AAAa,eAAE,AAAY,cAAE,KAAI,AAAiB,AAAE,AAAC;AACrF,AAAI,SAAC,AAAO,UAAG,AAAU,AAAC,kDAA0B,AAAI,KAAC,AAAM,OAAC,AAAK,SAAI,AAAI,KAAC,AAAM,OAAC,AAAI,IAAE,AAAC,AAC9F;AAAC;;AAED,AAAiB,oBAAC,AAAU;AAC1B,AAAK,UAAC,AAAiB,kBAAC,AAAK,AAAC;AAC9B,AAAI,SAAC,AAAM,OAAC,AAAiB,kBAAC,AAAK,AAAC,AACtC;AAAC;;AAEK,AAAgB,kBAAtB,AAAK;;;;AACH,UAAI;AACF,cAAM,AAAI,OAAG,MAAM,AAAI,MAAC,AAAM,OAAC,AAAU,WAAC,AAAS,AAAC;AACpD,cAAM,AAAe,kBAAG,AAAkB,gCAAC,AAAqB,AAAE,AAAC;AACnE,cAAM,AAAK,QAAG,MAAM,AAAI,MAAC,AAAM,OAAC,AAAe,gBAAC,AAAI,KAAC,AAAI,AAAC;AAC1D,cAAM,AAAW,cAAG,AAAK,MAAC,AAAI,KAAC,AAAE,AAAC,AAAE,MAAC,AAAE,GAAC,AAAI,KAAC,AAAQ,AAAC,aAAI,AAAe,eAAE,AAAC,OAAI,AAAE,GAAC,AAAI,KAAC,AAAQ,AAAC,aAAI,AAAe,eAAE,AAAC,AAAC;;AACxH,YAAI,AAAW,eAAI,AAAI,MAAE;AACvB,AAAwC;AACxC,gBAAM,AAAQ,AAAC,iEAA6B,AAAe,sCAAuB,AAAK,MAAC,AAAG,IAAC,AAAE,AAAC,AAAE,MAAC,AAAI,KAAC,AAAS,UAAC,AAAE,IAAE,AAAI,MAAE,AAAC,AAAC,AAAC,IAAC,AAAI,KAAC,AAAK,AAAC,MAAE,IAAE,AAAoC,AAAC;AACpL;;AAED,cAAM,AAAc,iBAAG,KAAI,AAAG,AAAC,sCAA0B,AAAI,MAAC,AAAM,OAAC,AAAK,SAAI,AAAI,MAAC,AAAM,OAAC,AAAI,QAAI,AAAW,YAAC,AAAI,IAAE,AAAC;AACrH,eAAO,AAAe,kCAAC,MAAM,AAAI,MAAC,AAAW,YAAC,AAAc,AAAC,kBAAE,AAAe,iBAAE,AAAc,AAAC;AAChG,QACD,OAAO,AAAC,GAAE;AACR,YAAI,AAAY,gBAAI,AAAC,KAAI,AAAC,EAAC,AAAU,eAAK,AAAG,KAAE;AAC7C,gBAAM,AAAQ,AAAC,sKAAkI,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,IAAE,AAAsC,AAAC;AACjN;;AACD,cAAM,AAAC;AACR,AACH;;AAAC;;AAED,AAAY,eAAC,AAAsB;AACjC,WAAO,AAAY,8BAAC,AAAU,YAAE,AAAI,KAAC,AAAO,AAAC,AAC/C;AAAC,AACF","sourcesContent":["import { BintrayOptions, CancellationToken, HttpExecutor, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { BintrayClient } from \"builder-util-runtime/out/bintray\"\nimport { URL } from \"url\"\nimport { getChannelFilename, getDefaultChannelName, newBaseUrl, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nexport class BintrayProvider extends Provider<UpdateInfo> {\n  private client: BintrayClient\n  private readonly baseUrl: URL\n\n  constructor(configuration: BintrayOptions, httpExecutor: HttpExecutor<any>) {\n    super(httpExecutor)\n\n    this.client = new BintrayClient(configuration, httpExecutor, new CancellationToken())\n    this.baseUrl = newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)\n  }\n\n  setRequestHeaders(value: any): void {\n    super.setRequestHeaders(value)\n    this.client.setRequestHeaders(value)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    try {\n      const data = await this.client.getVersion(\"_latest\")\n      const channelFilename = getChannelFilename(getDefaultChannelName())\n      const files = await this.client.getVersionFiles(data.name)\n      const channelFile = files.find(it => it.name.endsWith(`_${channelFilename}`) || it.name.endsWith(`-${channelFilename}`))\n      if (channelFile == null) {\n        // noinspection ExceptionCaughtLocallyJS\n        throw newError(`Cannot find channel file \"${channelFilename}\", existing files:\\n${files.map(it => JSON.stringify(it, null, 2)).join(\",\\n\")}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n\n      const channelFileUrl = new URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${channelFile.name}`)\n      return parseUpdateInfo(await this.httpRequest(channelFileUrl), channelFilename, channelFileUrl)\n    }\n    catch (e) {\n      if (\"statusCode\" in e && e.statusCode === 404) {\n        throw newError(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n      }\n      throw e\n    }\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return resolveFiles(updateInfo, this.baseUrl)\n  }\n}"]}

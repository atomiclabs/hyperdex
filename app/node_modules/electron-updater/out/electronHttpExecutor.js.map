{"version":3,"file":"electronHttpExecutor.js","sourceRoot":"","sources":["../src/electronHttpExecutor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAA8B,AAAmB,AAAY,AAAE,AAAM,AAAsB;;;;;;;;;;AACpG,AAAO,AAAE,AAAG,AAAE,AAAM,AAAU;;;;;;;;;;AAC9B,AAAO,AAAE,AAAS,AAAE,AAAM,AAAY;;;;;;;;;;AAEtC,AAAO,AAAK,AAAI,AAAM,AAAM,AAI5B,AAAM;;;;MAA4B,6BAAQ,AAAoC;AAC5E,cAA6B,AAAqE;AAChG,AAAK,AAAE;AADoB,SAAkB,qBAAlB,AAAkB,AAAmD,AAElG;AAAC;;AAEK,AAAQ,UAAd,AAAK,CAAU,AAAW,KAAE,AAAmB,aAAE,AAAwB;;;;AACvE,UAAI,AAAO,WAAI,AAAI,QAAI,CAAC,AAAO,QAAC,AAAe,iBAAE;AAC/C,cAAM,AAAS,2BAAC,AAAI,KAAC,AAAO,QAAC,AAAW,AAAC,AAAC;AAC3C;;AAED,aAAO,cAAc,AAAiB,kBAAC,AAAa,cAAS,CAAC,AAAO,SAAE,AAAM,QAAE,AAAQ,AAAE,AAAE;AACzF,AAAI,cAAC,AAAU,uFACqB,AAAG;AACnC,AAAO,mBAAE,AAAO,QAAC,AAAO,WAAI,AAAS,AACtC,AAAC;AAFqC,SAApC,AAA8B;AAGjC,AAAQ,oBAAE,AAAQ;YACjB,AAAW,aAAE,AAAC,GAAE,AAAO,SAAE,AAAK,AAAC,AAAE;AAClC,cAAI,AAAK,SAAI,AAAI,MAAE;AACjB,AAAO,oBAAC,AAAW,AAAC;AACrB,iBACI;AACH,AAAM,mBAAC,AAAK,AAAC;AACd,AACH;AAAC,WAAE,AAAQ,AAAC,AACd;AAAC,AAAC,AACJ,OAfe,AAAO;;AAerB;;AAEM,AAAS,YAAC,AAAY,SAAE,AAAiC;AAC9D,UAAM,AAAO,UAAG,AAAG,gBAAC,AAAO,QAAC,AAAO,AAAC;;AACpC,AAAO,YAAC,AAAE,GAAC,AAAU,YAAE,AAAQ,AAAC;AAChC,AAAI,SAAC,AAAoB,qBAAC,AAAO,AAAC;AAClC,WAAO,AAAO,AAChB;AAAC;;AAEO,AAAoB,uBAAC,AAA+B;AAC1D,QAAI,AAAI,KAAC,AAAkB,sBAAI,AAAI,MAAE;AACnC,AAAO,cAAC,AAAE,GAAC,AAAO,SAAE,AAAI,KAAC,AAAkB,AAAC;AAC7C,AACH;AAAC;;AAES,AAAmB,sBAAC,AAAY,SAAE,AAAuB,SAAE,AAA8B,QAAE,AAAqB,eAAE,AAA0C;AACpK,AAAO,YAAC,AAAE,GAAC,AAAU,YAAE,CAAC,AAAkB,YAAE,AAAc,QAAE,AAAmB,AAAE,AAAE;AACjF,UAAI,AAAa,gBAAG,AAAE,IAAE;AACtB,AAAM,eAAC,IAAI,AAAK,MAAC,AAA2B,AAAC,AAAC;AAC9C,AAAM;AACP;;AAED,AAAO,cAAC,AAAY,mCAAC,AAAyB,0BAAC,AAAW,aAAE,AAAO,AAAC,AAAC,AACvE;AAAC,AAAC,AACJ;AAAC,AACF","sourcesContent":["import { configureRequestOptionsFromUrl, DownloadOptions, HttpExecutor } from \"builder-util-runtime\"\nimport { net } from \"electron\"\nimport { ensureDir } from \"fs-extra-p\"\nimport { RequestOptions } from \"http\"\nimport * as path from \"path\"\n\nexport type LoginCallback = (username: string, password: string) => void\n\nexport class ElectronHttpExecutor extends HttpExecutor<Electron.ClientRequest> {\n  constructor(private readonly proxyLoginCallback?: (authInfo: any, callback: LoginCallback) => void) {\n    super()\n  }\n\n  async download(url: string, destination: string, options: DownloadOptions): Promise<string> {\n    if (options == null || !options.skipDirCreation) {\n      await ensureDir(path.dirname(destination))\n    }\n\n    return await options.cancellationToken.createPromise<string>((resolve, reject, onCancel) => {\n      this.doDownload({\n        ...configureRequestOptionsFromUrl(url, {\n          headers: options.headers || undefined,\n        }),\n        redirect: \"manual\",\n      }, destination, 0, options, error => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      }, onCancel)\n    })\n  }\n\n  public doRequest(options: any, callback: (response: any) => void): any {\n    const request = net.request(options)\n    request.on(\"response\", callback)\n    this.addProxyLoginHandler(request)\n    return request\n  }\n\n  private addProxyLoginHandler(request: Electron.ClientRequest) {\n    if (this.proxyLoginCallback != null) {\n      request.on(\"login\", this.proxyLoginCallback)\n    }\n  }\n\n  protected addRedirectHandlers(request: any, options: RequestOptions, reject: (error: Error) => void, redirectCount: number, handler: (options: RequestOptions) => void) {\n    request.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\n      if (redirectCount > 10) {\n        reject(new Error(\"Too many redirects (> 10)\"))\n        return\n      }\n\n      handler(HttpExecutor.prepareRedirectUrlOptions(redirectUrl, options))\n    })\n  }\n}"]}

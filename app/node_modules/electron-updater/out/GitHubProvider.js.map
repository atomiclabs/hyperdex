{"version":3,"file":"GitHubProvider.js","sourceRoot":"","sources":["../src/GitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, githubUrl, HttpError, HttpExecutor, newError, parseXml, ReleaseNoteInfo, UpdateInfo, XElement } from \"builder-util-runtime\"\nimport * as semver from \"semver\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { getChannelFilename, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nconst hrefRegExp = /\\/tag\\/v?([^\\/]+)$/\n\nexport abstract class BaseGitHubProvider<T extends UpdateInfo> extends Provider<T> {\n  // so, we don't need to parse port (because node http doesn't support host as url does)\n  protected readonly baseUrl: URL\n  protected readonly baseApiUrl: URL\n\n  protected constructor(protected readonly options: GithubOptions, defaultHost: string, executor: HttpExecutor<any>) {\n    super(executor, false /* because GitHib uses S3 */)\n\n    this.baseUrl = newBaseUrl(githubUrl(options, defaultHost))\n    const apiHost = defaultHost === \"github.com\" ? \"api.github.com\" : defaultHost\n    this.baseApiUrl = newBaseUrl(githubUrl(options, apiHost))\n  }\n\n  protected computeGithubBasePath(result: string) {\n    // https://github.com/electron-userland/electron-builder/issues/1903#issuecomment-320881211\n    const host = this.options.host\n    return host != null && host !== \"github.com\" && host !== \"api.github.com\" ? `/api/v3${result}` : result\n  }\n}\n\nexport class GitHubProvider extends BaseGitHubProvider<UpdateInfo> {\n  constructor(protected readonly options: GithubOptions, private readonly updater: AppUpdater, executor: HttpExecutor<any>) {\n    super(options, \"github.com\", executor)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const cancellationToken = new CancellationToken()\n\n    const feedXml: string = (await this.httpRequest(newUrlFromBase(`${this.basePath}.atom`, this.baseUrl), {\n      Accept: \"application/xml, application/atom+xml, text/xml, */*\",\n    }, cancellationToken))!\n\n    const feed = parseXml(feedXml)\n    let latestRelease = feed.element(\"entry\", false, `No published versions on GitHub`)\n    let version: string | null\n    try {\n      if (this.updater.allowPrerelease) {\n        // noinspection TypeScriptValidateJSTypes\n        version = latestRelease.element(\"link\").attribute(\"href\").match(hrefRegExp)!![1]\n      }\n      else {\n        version = await this.getLatestVersionString(cancellationToken)\n        for (const element of feed.getElements(\"entry\")) {\n          if (element.element(\"link\").attribute(\"href\").match(hrefRegExp)!![1] === version) {\n            latestRelease = element\n            break\n          }\n        }\n\n      }\n    }\n    catch (e) {\n      throw newError(`Cannot parse releases feed: ${e.stack || e.message},\\nXML:\\n${feedXml}`, \"ERR_UPDATER_INVALID_RELEASE_FEED\")\n    }\n\n    if (version == null) {\n      throw newError(`No published versions on GitHub`, \"ERR_UPDATER_NO_PUBLISHED_VERSIONS\")\n    }\n\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    const channelFileUrl = newUrlFromBase(this.getBaseDownloadPath(version, channelFile), this.baseUrl)\n    const requestOptions = this.createRequestOptions(channelFileUrl)\n    let rawData: string\n    try {\n      rawData = (await this.executor.request(requestOptions, cancellationToken))!!\n    }\n    catch (e) {\n      if (!this.updater.allowPrerelease && e instanceof HttpError && e.statusCode === 404) {\n        throw newError(`Cannot find ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n      throw e\n    }\n\n    const result = parseUpdateInfo(rawData, channelFile, channelFileUrl)\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = `${githubUrl(this.options)}/${requestOptions.path}`\n    }\n\n    if (result.releaseName == null) {\n      result.releaseName = latestRelease.elementValueOrEmpty(\"title\")\n    }\n\n    if (result.releaseNotes == null) {\n      result.releaseNotes = computeReleaseNotes(this.updater.currentVersion, this.updater.fullChangelog, feed, latestRelease)\n    }\n    return result\n  }\n\n  private async getLatestVersionString(cancellationToken: CancellationToken): Promise<string | null> {\n    const options = this.options\n    // do not use API for GitHub to avoid limit, only for custom host or GitHub Enterprise\n    const url = (options.host == null || options.host === \"github.com\") ?\n      newUrlFromBase(`${this.basePath}/latest`, this.baseUrl) :\n      new URL(`${this.computeGithubBasePath(`/repos/${options.owner}/${options.repo}/releases`)}/latest`, this.baseApiUrl)\n    try {\n      const rawData = await this.httpRequest(url, {Accept: \"application/json\"}, cancellationToken)\n      if (rawData == null) {\n        return null\n      }\n\n      const releaseInfo: GithubReleaseInfo = JSON.parse(rawData)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw newError(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n    }\n  }\n\n  private get basePath() {\n    return `/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    // still replace space to - due to backward compatibility\n    return resolveFiles(updateInfo, this.baseUrl, p => this.getBaseDownloadPath(updateInfo.version, p.replace(/ /g, \"-\")))\n  }\n\n  private getBaseDownloadPath(version: string, fileName: string) {\n    return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}\n\nfunction getNoteValue(parent: XElement): string {\n  const result = parent.elementValueOrEmpty(\"content\")\n  // GitHub reports empty notes as <content>No content.</content>\n  return result === \"No content.\" ? \"\" : result\n}\n\nexport function computeReleaseNotes(currentVersion: string, isFullChangelog: boolean, feed: XElement, latestRelease: any) {\n  if (!isFullChangelog) {\n    return getNoteValue(latestRelease)\n  }\n\n  const releaseNotes: Array<ReleaseNoteInfo> = []\n  for (const release of feed.getElements(\"entry\")) {\n    // noinspection TypeScriptValidateJSTypes\n    const versionRelease = release.element(\"link\").attribute(\"href\").match(/\\/tag\\/v?([^\\/]+)$/)![1]\n    if (semver.lt(currentVersion, versionRelease)) {\n      releaseNotes.push({\n        version: versionRelease,\n        note: getNoteValue(release)\n      })\n    }\n  }\n  return releaseNotes\n    .sort((a, b) => semver.rcompare(a.version, b.version))\n}\n"]}

{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, PackageFileInfo, ProgressInfo, UpdateFileInfo, UpdateInfo } from \"builder-util-runtime\"\nimport { EventEmitter } from \"events\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { LoginCallback } from \"./electronHttpExecutor\"\n\nexport { AppUpdater, NoOpLogger } from \"./AppUpdater\"\nexport { UpdateInfo }\nexport { CancellationToken } from \"builder-util-runtime\"\nexport { Provider } from \"./Provider\"\n\n// autoUpdater to mimic electron bundled autoUpdater\nlet _autoUpdater: any\n\n// required for jsdoc\nexport declare const autoUpdater: AppUpdater\n\nfunction _load_autoUpdater(): AppUpdater {\n  // tslint:disable:prefer-conditional-expression\n  if (process.platform === \"win32\") {\n    _autoUpdater = new (require(\"./NsisUpdater\").NsisUpdater)()\n  }\n  else if (process.platform === \"darwin\") {\n    _autoUpdater = new (require(\"./MacUpdater\").MacUpdater)()\n  }\n  else {\n    _autoUpdater = new (require(\"./AppImageUpdater\").AppImageUpdater)()\n  }\n  return _autoUpdater\n}\n\nObject.defineProperty(exports, \"autoUpdater\", {\n  enumerable: true,\n  get: () => {\n    return _autoUpdater || _load_autoUpdater()\n  }\n})\n\nexport interface ResolvedUpdateFileInfo {\n  readonly url: URL\n  readonly info: UpdateFileInfo\n\n  packageInfo?: PackageFileInfo\n}\n\n// due to historical reasons for windows we use channel name without platform specifier\nexport function getDefaultChannelName() {\n  return `latest${getChannelFilePrefix()}`\n}\n\nfunction getChannelFilePrefix() {\n  const currentPlatform = getCurrentPlatform()\n  if (currentPlatform === \"linux\") {\n    const arch = process.env.TEST_UPDATER_ARCH || process.arch\n    const archSuffix = arch === \"x64\" ? \"\" : `-${arch}`\n    return \"-linux\" + archSuffix\n  }\n  else {\n    return currentPlatform === \"darwin\" ? \"-mac\" : \"\"\n  }\n}\n\nexport function getCustomChannelName(channel: string) {\n  return `${channel}${getChannelFilePrefix()}`\n}\n\nexport function getCurrentPlatform() {\n  return process.env.TEST_UPDATER_PLATFORM || process.platform\n}\n\nexport function isUseOldMacProvider() {\n  // getCurrentPlatform() === \"darwin\"\n  return false\n}\n\nexport function getChannelFilename(channel: string) {\n  return `${channel}.yml`\n}\n\nexport interface UpdateCheckResult {\n  readonly updateInfo: UpdateInfo\n\n  readonly downloadPromise?: Promise<Array<string>> | null\n\n  readonly cancellationToken?: CancellationToken\n\n  /** @deprecated */\n  readonly versionInfo: UpdateInfo\n}\n\nexport type UpdaterEvents = \"login\" | \"checking-for-update\" | \"update-available\" | \"update-cancelled\" | \"download-progress\" | \"update-downloaded\" | \"error\"\n\nexport const DOWNLOAD_PROGRESS: UpdaterEvents = \"download-progress\"\nexport const UPDATE_DOWNLOADED: UpdaterEvents = \"update-downloaded\"\n\nexport type LoginHandler = (authInfo: any, callback: LoginCallback) => void\n\nexport class UpdaterSignal {\n  constructor(private emitter: EventEmitter) {\n  }\n\n  /**\n   * Emitted when an authenticating proxy is [asking for user credentials](https://github.com/electron/electron/blob/master/docs/api/client-request.md#event-login).\n   */\n  login(handler: LoginHandler) {\n    addHandler(this.emitter, \"login\", handler)\n  }\n\n  progress(handler: (info: ProgressInfo) => void) {\n    addHandler(this.emitter, DOWNLOAD_PROGRESS, handler)\n  }\n\n  updateDownloaded(handler: (info: UpdateInfo) => void) {\n    addHandler(this.emitter, UPDATE_DOWNLOADED, handler)\n  }\n\n  updateCancelled(handler: (info: UpdateInfo) => void) {\n    addHandler(this.emitter, \"update-cancelled\", handler)\n  }\n}\n\nconst isLogEvent = false\n\nfunction addHandler(emitter: EventEmitter, event: UpdaterEvents, handler: (...args: Array<any>) => void) {\n  if (isLogEvent) {\n    emitter.on(event, (...args: Array<any>) => {\n      console.log(\"%s %s\", event, args)\n      handler.apply(null, args)\n    })\n  }\n  else {\n    emitter.on(event, handler)\n  }\n}\n\nexport interface Logger {\n  info(message?: any): void\n\n  warn(message?: any): void\n\n  error(message?: any): void\n\n  debug?(message: string): void\n}\n\n// if baseUrl path doesn't ends with /, this path will be not prepended to passed pathname for new URL(input, base)\n/** @internal */\nexport function newBaseUrl(url: string) {\n  const result = new URL(url)\n  if (!result.pathname.endsWith(\"/\")) {\n    result.pathname += \"/\"\n  }\n  return result\n}\n\n/** @internal */\nexport function newUrlFromBase(pathname: string, baseUrl: URL, addRandomQueryToAvoidCaching = false): URL {\n  const result = new URL(pathname, baseUrl)\n  // search is not propagated (search is an empty string if not specified)\n  if (!result.search && baseUrl.search) {\n    result.search = baseUrl.search\n  }\n  if (addRandomQueryToAvoidCaching && !result.search) {\n    result.search = `noCache=${Date.now().toString(32)}`\n  }\n  return result\n}"]}

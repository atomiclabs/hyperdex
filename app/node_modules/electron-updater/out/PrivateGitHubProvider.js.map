{"version":3,"file":"PrivateGitHubProvider.js","sourceRoot":"","sources":["../src/PrivateGitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, HttpError, HttpExecutor, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { URL } from \"url\"\nimport { BaseGitHubProvider } from \"./GitHubProvider\"\nimport { getChannelFilename, getDefaultChannelName, newUrlFromBase, ResolvedUpdateFileInfo } from \"./main\"\nimport { getFileList } from \"./Provider\"\n\nexport interface PrivateGitHubUpdateInfo extends UpdateInfo {\n  assets: Array<Asset>\n}\n\nexport class PrivateGitHubProvider extends BaseGitHubProvider<PrivateGitHubUpdateInfo> {\n  constructor(options: GithubOptions, private readonly token: string, executor: HttpExecutor<any>) {\n    super(options, \"api.github.com\", executor)\n  }\n\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\n    const result = super.createRequestOptions(url, headers);\n    (result as any).redirect = \"manual\"\n    return result\n  }\n\n  async getLatestVersion(): Promise<PrivateGitHubUpdateInfo> {\n    const cancellationToken = new CancellationToken()\n    const channelFile = getChannelFilename(getDefaultChannelName())\n\n    const releaseInfo = await this.getLatestVersionInfo(cancellationToken)\n    const asset = releaseInfo.assets.find(it => it.name === channelFile)\n    if (asset == null) {\n      // html_url must be always, but just to be sure\n      throw newError(`Cannot find ${channelFile} in the release ${releaseInfo.html_url || releaseInfo.name}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n    }\n\n    const url = new URL(asset.url)\n    let result: any\n    try {\n      result = safeLoad((await this.httpRequest(url, this.configureHeaders(\"application/octet-stream\"), cancellationToken))!!)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.statusCode === 404) {\n        throw newError(`Cannot find ${channelFile} in the latest release artifacts (${url}): ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n      throw e\n    }\n\n    (result as PrivateGitHubUpdateInfo).assets = releaseInfo.assets\n    return result\n  }\n\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\n    return this.configureHeaders(\"application/octet-stream\")\n  }\n\n  private configureHeaders(accept: string) {\n    return {\n      Accept: accept,\n      Authorization: `token ${this.token}`,\n    }\n  }\n\n  private async getLatestVersionInfo(cancellationToken: CancellationToken): Promise<ReleaseInfo> {\n    const url = newUrlFromBase(`${this.basePath}/latest`, this.baseUrl)\n    try {\n      return (JSON.parse((await this.httpRequest(url, this.configureHeaders(\"application/vnd.github.v3+json\"), cancellationToken))!!))\n    }\n    catch (e) {\n      throw newError(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n    }\n  }\n\n  private get basePath() {\n    return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)\n  }\n\n  resolveFiles(updateInfo: PrivateGitHubUpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return getFileList(updateInfo).map(it => {\n      const name = path.posix.basename(it.url).replace(/ /g, \"-\")\n      const asset = updateInfo.assets.find(it => it != null && it.name === name)\n      if (asset == null) {\n        throw newError(`Cannot find asset \"${name}\" in: ${JSON.stringify(updateInfo.assets, null, 2)}`, \"ERR_UPDATER_ASSET_NOT_FOUND\")\n      }\n\n      return {\n        url: new URL(asset.url),\n        info: it,\n      }\n    })\n  }\n}\n\ninterface ReleaseInfo {\n  name: string\n  html_url: string\n  assets: Array<Asset>\n}\n\nexport interface Asset {\n  name: string\n  url: string\n}"]}

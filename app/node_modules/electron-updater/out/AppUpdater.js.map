{"version":3,"file":"AppUpdater.js","sourceRoot":"","sources":["../src/AppUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, asArray, CancellationToken, newError, PublishConfiguration, UpdateInfo, UUID } from \"builder-util-runtime\"\nimport { randomBytes } from \"crypto\"\nimport { Notification } from \"electron\"\nimport isDev from \"electron-is-dev\"\nimport { EventEmitter } from \"events\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { eq as isVersionsEqual, gt as isVersionGreaterThan, prerelease as getVersionPreleaseComponents, valid as parseVersion } from \"semver\"\nimport \"source-map-support/register\"\nimport { ElectronHttpExecutor } from \"./electronHttpExecutor\"\nimport { GenericProvider } from \"./GenericProvider\"\nimport { Logger, Provider, UpdateCheckResult, UpdaterSignal } from \"./main\"\nimport { createClient } from \"./providerFactory\"\nimport { DownloadedUpdateHelper } from \"./DownloadedUpdateHelper\"\n\nexport abstract class AppUpdater extends EventEmitter {\n  /**\n   * Whether to automatically download an update when it is found.\n   */\n  autoDownload: boolean = true\n\n  /**\n   * Whether to automatically install a downloaded update on app quit (if `quitAndInstall` was not called before).\n   *\n   * Applicable only on Windows and Linux.\n   */\n  autoInstallOnAppQuit: boolean = true\n\n  /**\n   * *GitHub provider only.* Whether to allow update to pre-release versions. Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\n   *\n   * If `true`, downgrade will be allowed (`allowDowngrade` will be set to `true`).\n   */\n  allowPrerelease: boolean = false\n\n  /**\n   * *GitHub provider only.* Get all release notes (from current version to latest), not just the latest.\n   * @default false\n   */\n  fullChangelog: boolean = false\n\n  /**\n   * Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\n   * @default false\n   */\n  allowDowngrade: boolean = false\n\n  /**\n   * The current application version.\n   */\n  readonly currentVersion: string\n\n  private _channel: string | null = null\n\n  protected readonly downloadedUpdateHelper: DownloadedUpdateHelper\n\n  /**\n   * Get the update channel. Not applicable for GitHub. Doesn't return `channel` from the update configuration, only if was previously set.\n   */\n  get channel(): string | null {\n    return this._channel\n  }\n\n  /**\n   * Set the update channel. Not applicable for GitHub. Overrides `channel` in the update configuration.\n   *\n   * `allowDowngrade` will be automatically set to `true`. If this behavior is not suitable for you, simple set `allowDowngrade` explicitly after.\n   */\n  set channel(value: string | null) {\n    if (this._channel != null) {\n      if (typeof value !== \"string\") {\n        throw newError(`Channel must be a string, but got: ${value}`, \"ERR_UPDATER_INVALID_CHANNEL\")\n      }\n      else if (value.length === 0) {\n        throw newError(`Channel must be not an empty string`, \"ERR_UPDATER_INVALID_CHANNEL\")\n      }\n    }\n\n    this._channel = value\n    this.allowDowngrade = true\n  }\n\n  /**\n   *  The request headers.\n   */\n  requestHeaders: OutgoingHttpHeaders | null = null\n\n  protected _logger: Logger = console\n\n  /**\n   * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\n   * Set it to `null` if you would like to disable a logging feature.\n   */\n  get logger(): Logger | null {\n    return this._logger\n  }\n\n  set logger(value: Logger | null) {\n    this._logger = value == null ? new NoOpLogger() : value\n  }\n\n  /**\n   * For type safety you can use signals, e.g. `autoUpdater.signals.updateDownloaded(() => {})` instead of `autoUpdater.on('update-available', () => {})`\n   */\n  readonly signals = new UpdaterSignal(this)\n\n  private _appUpdateConfigPath: string | null = null\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * test only\n   * @private\n   */\n  set updateConfigPath(value: string | null) {\n    this.clientPromise = null\n    this._appUpdateConfigPath = value\n    this.configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n  }\n\n  protected updateAvailable = false\n\n  private clientPromise: Promise<Provider<any>> | null = null\n\n  protected get provider(): Promise<Provider<any>> {\n    return this.clientPromise!!\n  }\n\n  protected readonly stagingUserIdPromise = new Lazy<string>(() => this.getOrCreateStagingUserId())\n\n  // public, allow to read old config for anyone\n  configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n\n  private readonly untilAppReady: Promise<any>\n  private checkForUpdatesPromise: Promise<UpdateCheckResult> | null = null\n\n  protected readonly app: Electron.App\n\n  protected updateInfo: UpdateInfo | null = null\n\n  /** @internal */\n  readonly httpExecutor: ElectronHttpExecutor\n\n  protected constructor(options: AllPublishOptions | null | undefined, app?: Electron.App) {\n    super()\n\n    this.on(\"error\", (error: Error) => {\n      this._logger.error(`Error: ${error.stack || error.message}`)\n    })\n\n    if (app != null || (global as any).__test_app != null) {\n      this.app = app || (global as any).__test_app\n      this.untilAppReady = Promise.resolve()\n      this.httpExecutor = null as any\n    }\n    else {\n      this.app = require(\"electron\").app\n      this.httpExecutor = new ElectronHttpExecutor((authInfo, callback) => this.emit(\"login\", authInfo, callback))\n      this.untilAppReady = new Promise(resolve => {\n        if (this.app.isReady()) {\n          resolve()\n        }\n        else {\n          this.app.on(\"ready\", resolve)\n        }\n      })\n    }\n\n    this.downloadedUpdateHelper = new DownloadedUpdateHelper(this.app.getPath(\"userData\"))\n\n    const currentVersionString = this.app.getVersion()\n    const currentVersion = parseVersion(currentVersionString)\n    if (currentVersion == null) {\n      throw newError(`App version is not a valid semver version: \"${currentVersionString}`, \"ERR_UPDATER_INVALID_VERSION\")\n    }\n    this.currentVersion = currentVersion\n\n    this.allowPrerelease = hasPrereleaseComponents(this.currentVersion)\n\n    if (options != null) {\n      this.setFeedURL(options)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n  getFeedURL(): string | null | undefined {\n    return \"Deprecated. Do not use it.\"\n  }\n\n  /**\n   * Configure update provider. If value is `string`, [GenericServerOptions](/configuration/publish.md#genericserveroptions) will be set with value as `url`.\n   * @param options If you want to override configuration in the `app-update.yml`.\n   */\n  setFeedURL(options: PublishConfiguration | AllPublishOptions | string) {\n    // https://github.com/electron-userland/electron-builder/issues/1105\n    let provider: Provider<any>\n    if (typeof options === \"string\") {\n      provider = new GenericProvider({provider: \"generic\", url: options}, this)\n    }\n    else {\n      provider = createClient(options, this)\n    }\n    this.clientPromise = Promise.resolve(provider)\n  }\n\n  /**\n   * Asks the server whether there is an update.\n   */\n  checkForUpdates(): Promise<UpdateCheckResult> {\n    let checkForUpdatesPromise = this.checkForUpdatesPromise\n    if (checkForUpdatesPromise != null) {\n      return checkForUpdatesPromise\n    }\n\n    checkForUpdatesPromise = this._checkForUpdates()\n    this.checkForUpdatesPromise = checkForUpdatesPromise\n    const nullizePromise = () => this.checkForUpdatesPromise = null\n    checkForUpdatesPromise\n      .then(nullizePromise)\n      .catch(nullizePromise)\n    return checkForUpdatesPromise\n  }\n\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\n    if (isDev) {\n      return Promise.resolve(null)\n    }\n\n    const checkForUpdatesPromise = this.checkForUpdates()\n    checkForUpdatesPromise.then(it => {\n      const downloadPromise = it.downloadPromise\n      if (downloadPromise == null) {\n        this._logger.warn(\"checkForUpdatesAndNotify called, but downloadPromise is null\")\n        return\n      }\n\n      downloadPromise\n        .then(() => {\n          new Notification({\n            title: \"A new update is ready to install\",\n            body: `${this.app.getName()} version ${it.updateInfo.version} is downloaded and will be automatically installed on exit`\n          }).show()\n        })\n    })\n\n    return checkForUpdatesPromise\n  }\n\n  private async isStagingMatch(updateInfo: UpdateInfo): Promise<boolean> {\n    const rawStagingPercentage = updateInfo.stagingPercentage\n    let stagingPercentage = rawStagingPercentage\n    if (stagingPercentage == null) {\n      return true\n    }\n\n    stagingPercentage = parseInt(stagingPercentage as any, 10)\n    if (isNaN(stagingPercentage)) {\n      this._logger.warn(`Staging percentage is NaN: ${rawStagingPercentage}`)\n      return true\n    }\n\n    // convert from user 0-100 to internal 0-1\n    stagingPercentage = stagingPercentage / 100\n\n    const stagingUserId = await this.stagingUserIdPromise.value\n    const val = UUID.parse(stagingUserId).readUInt32BE(12)\n    const percentage = (val / 0xFFFFFFFF)\n    this._logger.info(`Staging percentage: ${stagingPercentage}, percentage: ${percentage}, user id: ${stagingUserId}`)\n    return percentage < stagingPercentage\n  }\n\n  private async _checkForUpdates(): Promise<UpdateCheckResult> {\n    try {\n      await this.untilAppReady\n      this._logger.info(\"Checking for update\")\n      this.emit(\"checking-for-update\")\n      return await this.doCheckForUpdates()\n    }\n    catch (e) {\n      this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`)\n      throw e\n    }\n  }\n\n  private computeFinalHeaders(headers: OutgoingHttpHeaders) {\n    if (this.requestHeaders != null) {\n      Object.assign(headers, this.requestHeaders)\n    }\n    return headers\n  }\n\n  protected async getUpdateInfo(): Promise<UpdateInfo> {\n    await this.untilAppReady\n\n    if (this.clientPromise == null) {\n      this.clientPromise = this.configOnDisk.value.then(it => createClient(it, this))\n    }\n\n    const client = await this.clientPromise\n    const stagingUserId = await this.stagingUserIdPromise.value\n    client.setRequestHeaders(this.computeFinalHeaders({\"X-User-Staging-Id\": stagingUserId}))\n    return await client.getLatestVersion()\n  }\n\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\n    const updateInfo = await this.getUpdateInfo()\n\n    const latestVersion = parseVersion(updateInfo.version)\n    if (latestVersion == null) {\n      throw newError(`Latest version (from update server) is not valid semver version: \"${latestVersion}`, \"ERR_UPDATER_INVALID_VERSION\")\n    }\n\n    const isStagingMatch = await this.isStagingMatch(updateInfo)\n    if (!isStagingMatch || ((this.allowDowngrade && !hasPrereleaseComponents(latestVersion)) ? isVersionsEqual(latestVersion, this.currentVersion) : !isVersionGreaterThan(latestVersion, this.currentVersion))) {\n      this.updateAvailable = false\n      this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${updateInfo.version}, downgrade is ${this.allowDowngrade ? \"allowed\" : \"disallowed\"}).`)\n      this.emit(\"update-not-available\", updateInfo)\n      return {\n        versionInfo: updateInfo,\n        updateInfo,\n      }\n    }\n\n    this.updateAvailable = true\n    this.updateInfo = updateInfo\n\n    this.onUpdateAvailable(updateInfo)\n\n    const cancellationToken = new CancellationToken()\n    //noinspection ES6MissingAwait\n    return {\n      versionInfo: updateInfo,\n      updateInfo,\n      cancellationToken,\n      downloadPromise: this.autoDownload ? this.downloadUpdate(cancellationToken) : null\n    }\n  }\n\n  protected onUpdateAvailable(updateInfo: UpdateInfo) {\n    this._logger.info(`Found version ${updateInfo.version} (url: ${asArray(updateInfo.files).map(it => it.url).join(\", \")})`)\n    this.emit(\"update-available\", updateInfo)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  async downloadUpdate(cancellationToken: CancellationToken = new CancellationToken()): Promise<any> {\n    const updateInfo = this.updateInfo\n    if (updateInfo == null) {\n      const error = new Error(\"Please check update first\")\n      this.dispatchError(error)\n      throw error\n    }\n\n    this._logger.info(`Downloading update from ${asArray(updateInfo.files).map(it => it.url).join(\", \")}`)\n\n    try {\n      return await this.doDownloadUpdate(updateInfo, cancellationToken)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      throw e\n    }\n  }\n\n  protected dispatchError(e: Error) {\n    this.emit(\"error\", e, (e.stack || e).toString())\n  }\n\n  protected async abstract doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>>\n\n  /**\n   * Restarts the app and installs the update after it has been downloaded.\n   * It should only be called after `update-downloaded` has been emitted.\n   *\n   * **Note:** `autoUpdater.quitAndInstall()` will close all application windows first and only emit `before-quit` event on `app` after that.\n   * This is different from the normal quit event sequence.\n   *\n   * @param isSilent *windows-only* Runs the installer in silent mode. Defaults to `false`.\n   * @param isForceRunAfter Run the app after finish even on silent install. Not applicable for macOS. Ignored if `isSilent` is set to `false`.\n   */\n  abstract quitAndInstall(isSilent?: boolean, isForceRunAfter?: boolean): void\n\n  private async loadUpdateConfig() {\n    if (this._appUpdateConfigPath == null) {\n      this._appUpdateConfigPath = isDev ? path.join(this.app.getAppPath(), \"dev-app-update.yml\") : path.join(process.resourcesPath!, \"app-update.yml\")\n    }\n    return safeLoad(await readFile(this._appUpdateConfigPath, \"utf-8\"))\n  }\n\n  /*** @private */\n  protected async computeRequestHeaders(): Promise<OutgoingHttpHeaders> {\n    const fileExtraDownloadHeaders = (await this.provider).fileExtraDownloadHeaders\n    if (fileExtraDownloadHeaders != null) {\n      const requestHeaders = this.requestHeaders\n      return requestHeaders == null ? fileExtraDownloadHeaders : {\n        ...fileExtraDownloadHeaders,\n        ...requestHeaders,\n      }\n    }\n    return this.computeFinalHeaders({Accept: \"*/*\"})\n  }\n\n  private async getOrCreateStagingUserId(): Promise<string> {\n    const file = path.join(this.app.getPath(\"userData\"), \".updaterId\")\n    try {\n      const id = await readFile(file, \"utf-8\")\n      if (UUID.check(id)) {\n        return id\n      }\n      else {\n        this._logger.warn(`Staging user id file exists, but content was invalid: ${id}`)\n      }\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)\n      }\n    }\n\n    const id = UUID.v5(randomBytes(4096), UUID.OID)\n    this._logger.info(`Generated new staging user ID: ${id}`)\n    try {\n      await outputFile(file, id)\n    }\n    catch (e) {\n      this._logger.warn(`Couldn't write out staging user ID: ${e}`)\n    }\n    return id\n  }\n}\n\nfunction hasPrereleaseComponents(version: string) {\n  const versionPrereleaseComponent = getVersionPreleaseComponents(version)\n  return versionPrereleaseComponent != null && versionPrereleaseComponent.length > 0\n}\n\n/** @private */\nexport class NoOpLogger implements Logger {\n  info(message?: any) {\n    // ignore\n  }\n\n  warn(message?: any) {\n    // ignore\n  }\n\n  error(message?: any) {\n    // ignore\n  }\n}"]}

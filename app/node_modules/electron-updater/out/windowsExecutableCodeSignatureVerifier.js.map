{"version":3,"file":"windowsExecutableCodeSignatureVerifier.js","sourceRoot":"","sources":["../src/windowsExecutableCodeSignatureVerifier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { parseDn } from \"builder-util-runtime\"\nimport { execFile, execFileSync } from \"child_process\"\nimport * as os from \"os\"\nimport { Logger } from \"./main\"\n\n// $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n// | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n// | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\nexport function verifySignature(publisherNames: Array<string>, tempUpdateFile: string, logger: Logger): Promise<string | null> {\n  return new BluebirdPromise<string | null>((resolve, reject) => {\n    // https://github.com/electron-userland/electron-builder/issues/2421\n    // https://github.com/electron-userland/electron-builder/issues/2535\n    execFile(\"powershell.exe\", [\"-NoProfile\", \"-NonInteractive\", \"-InputFormat\", \"None\", \"-Command\", `Get-AuthenticodeSignature '${tempUpdateFile}' | ConvertTo-Json -Compress`], {\n      timeout: 30 * 1000\n    }, (error, stdout, stderr) => {\n      if (error != null || stderr) {\n        if (isOldWin6()) {\n          logger.warn(`Cannot execute Get-AuthenticodeSignature: ${error || stderr}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`)\n          resolve(null)\n          return\n        }\n\n        try {\n          execFileSync(\"powershell.exe\", [\"-NoProfile\", \"-NonInteractive\", \"-Command\", \"ConvertTo-Json test\"], {timeout: 10 * 1000})\n        }\n        catch (testError) {\n          logger.warn(`Cannot execute ConvertTo-Json: ${testError.message}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`)\n          resolve(null)\n          return\n        }\n\n        if (error != null) {\n          reject(error)\n          return\n        }\n\n        if (stderr) {\n          reject(new Error(`Cannot execute Get-AuthenticodeSignature: ${stderr}`))\n          return\n        }\n      }\n\n      const data = JSON.parse(stdout)\n      delete data.PrivateKey\n      delete data.IsOSBinary\n      delete data.SignatureType\n      const signerCertificate = data.SignerCertificate\n      if (signerCertificate != null) {\n        delete signerCertificate.Archived\n        delete signerCertificate.Extensions\n        delete signerCertificate.Handle\n        delete signerCertificate.HasPrivateKey\n        // duplicates data.SignerCertificate (contains RawData)\n        delete signerCertificate.SubjectName\n      }\n      delete data.Path\n\n      if (data.Status === 0) {\n        const name = parseDn(data.SignerCertificate.Subject).get(\"CN\")!\n        if (publisherNames.includes(name)) {\n          resolve(null)\n          return\n        }\n      }\n\n      const result = `publisherNames: ${publisherNames.join(\" | \")}, raw info: ` + JSON.stringify(data, (name, value) => name === \"RawData\" ? undefined : value, 2)\n      logger.info(`Sign verification failed, installer signed with incorrect certificate: ${result}`)\n      resolve(result)\n    })\n  })\n}\n\nfunction isOldWin6() {\n  const winVersion = os.release()\n  return winVersion.startsWith(\"6.\") && !winVersion.startsWith(\"6.3\")\n}\n"]}
